{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>Things to explain:</p> <ul> <li>What is the LARA suite</li> <li>adaptation template</li> <li>what are processes</li> <li>what are workers</li> <li>Things to reuse, things to implement</li> </ul>"},{"location":"#pythonlab","title":"Pythonlab","text":"<p>PythonLab is a Python framework for defining, parsing, and managing laboratory automation workflows. It allows you to write laboratory processes in Python syntax and converts them into executable workflow graphs.</p>"},{"location":"#workers","title":"Workers","text":"<p>Worker_adaptation also needs to be custom. Worker calls steps through the wrappers, and returns the Observable object to orchestrator.</p>"},{"location":"#wrappers","title":"Wrappers","text":"<p>Wrappers implement calls to actual sila servers. In worker the devices are still just conceptual. </p>"},{"location":"#sila-servers","title":"Sila servers","text":"<p>Sila servers have 2 types of commands, one type is observable, other isn\u2019t. If sila command isn\u2019t observable, you have to fake the observable in the wrapper </p>"},{"location":"#config-file","title":"Config file","text":"<p>Describes the capacity of the devices in your lab. This information is read by both the orchestrator and scheduler. </p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This documentation has been written with the help of AI. </p>"},{"location":"wrappers/","title":"Wrappers","text":"<p>Wrappers are the interface between the lab orchestrator and the actual devices. They translate the high-level commands defined in ?? to specific SILA commands.</p>"},{"location":"wrappers/#the-wrapper-structure","title":"The wrapper structure","text":"<pre><code>class MyWrapper(DeviceInterface):\n    @staticmethod\n    def get_SiLA_handler(\n        step: ProcessStep,\n        cont: ContainerInfo,\n        sila_client: ShakerClient,\n        **kwargs,\n    ) -&gt; Observable:\n        ...\n</code></pre>"},{"location":"wrappers/#processstep","title":"ProcessStep","text":"<p>Describes the step that should be executed.</p> <p>hoi bla</p>"},{"location":"wrappers/#containerinfo","title":"ContainerInfo","text":"<p>Describes the container that is handled</p>"},{"location":"wrappers/#sila-client","title":"Sila client","text":""},{"location":"laborchestrator/","title":"Lab Orchestrator Documentation","text":"<p>Lab Orchestrator is a general-purpose orchestrator for scientific laboratories that integrates with SiLA servers and uses pythonLab as a process description language. It manages and schedules complex laboratory workflows, coordinating devices, labware containers, and process steps.</p>"},{"location":"laborchestrator/#documentation-contents","title":"Documentation Contents","text":"<ol> <li>Getting Started - Installation and quick start guide</li> <li>Configuration - How to configure Lab Orchestrator and lab resources</li> <li>Writing Processes - Guide to creating PythonLab workflows</li> <li>SiLA Integration - Using the SiLA server interface</li> <li>API Reference - Core classes and methods</li> <li>Deployment - Running in production with Docker</li> </ol>"},{"location":"laborchestrator/#quick-links","title":"Quick Links","text":"<ul> <li>Lab Configuration YAML Format</li> <li>Process Examples</li> <li>CLI Commands</li> <li>Docker Setup</li> </ul>"},{"location":"laborchestrator/#key-features","title":"Key Features","text":"<ul> <li>Job Shop Scheduling: Optimal scheduling of laboratory processes with device allocation</li> <li>SiLA 2 Integration: Standard protocol for laboratory automation</li> <li>PythonLab Processes: Intuitive Python-based process description language</li> <li>Workflow Visualization: NetworkX-based workflow graphs</li> <li>Real-time Monitoring: Dash web interface for process tracking</li> <li>Database Integration: Experiment tracking and status reporting</li> <li>Container Management: Track labware containers through complex workflows</li> </ul>"},{"location":"laborchestrator/#architecture-overview","title":"Architecture Overview","text":"<p>Lab Orchestrator is built around five main components:</p> <ol> <li>SchedulingInstance (JSSP) - Central data structure holding processes, steps, containers, and devices</li> <li>ScheduleManager - Handles scheduling logic and device allocation</li> <li>WFGManager - Manages workflow graphs for visualization</li> <li>WorkerInterface - Executes process steps by interfacing with lab devices</li> <li>WorkerObserver - Monitors execution and triggers rescheduling</li> </ol>"},{"location":"laborchestrator/#getting-help","title":"Getting Help","text":"<ul> <li>Check the documentation sections listed above</li> <li>Run tests to see example configurations: <code>invoke test</code></li> <li>View example processes in <code>tests/test_data/</code></li> <li>Report issues at the project repository</li> </ul>"},{"location":"laborchestrator/api-reference/","title":"API Reference","text":"<p>This document provides detailed reference for Lab Orchestrator's core classes and methods.</p>"},{"location":"laborchestrator/api-reference/#orchestrator","title":"Orchestrator","text":"<p>Main orchestrator class for managing laboratory workflows.</p>"},{"location":"laborchestrator/api-reference/#class-orchestrator","title":"Class: <code>Orchestrator</code>","text":"<p>Located in: <code>laborchestrator/orchestrator_implementation.py</code></p> <pre><code>from laborchestrator.orchestrator_implementation import Orchestrator\n</code></pre>"},{"location":"laborchestrator/api-reference/#constructor","title":"Constructor","text":"<pre><code>Orchestrator(\n    reader: str = \"PythonLab\",\n    worker_type: Type[WorkerInterface] = WorkerInterface\n)\n</code></pre> <p>Parameters: - <code>reader</code> (str): Process reader type (default: \"PythonLab\") - <code>worker_type</code> (Type[WorkerInterface]): Worker implementation class</p> <p>Example: <pre><code>orchestrator = Orchestrator()\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#methods","title":"Methods","text":""},{"location":"laborchestrator/api-reference/#add_lab_resources_from_file","title":"<code>add_lab_resources_from_file</code>","text":"<p>Load lab configuration from a YAML file.</p> <pre><code>add_lab_resources_from_file(lab_env_filename: str) -&gt; bool\n</code></pre> <p>Parameters: - <code>lab_env_filename</code> (str): Path to lab configuration YAML file</p> <p>Returns: <code>bool</code> - True if successful</p> <p>Example: <pre><code>success = orchestrator.add_lab_resources_from_file(\"lab_config.yml\")\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#add_process","title":"<code>add_process</code>","text":"<p>Add a process to the orchestrator.</p> <pre><code>add_process(\n    description: Optional[str] = None,\n    file_path: Optional[str] = None,\n    name: Optional[str] = None,\n    process_object: Optional[PLProcess] = None,\n    delay: int = 0\n) -&gt; str\n</code></pre> <p>Parameters: - <code>description</code> (str, optional): Process source code as string - <code>file_path</code> (str, optional): Path to Python process file - <code>name</code> (str, optional): Process name - <code>process_object</code> (PLProcess, optional): Process instance - <code>delay</code> (int): Start delay in minutes (default: 0)</p> <p>Returns: <code>str</code> - Process name</p> <p>Example: <pre><code># From file\nname = orchestrator.add_process(\n    file_path=\"process.py\",\n    name=\"MyProcess\"\n)\n\n# From object\nfrom my_processes import IncReadProcess\nprocess = IncReadProcess(priority=5)\nname = orchestrator.add_process(\n    process_object=process,\n    name=\"IncubationTest\"\n)\n\n# From string\ncode = \"\"\"\nfrom pythonlab.process import PLProcess\n# ...\n\"\"\"\nname = orchestrator.add_process(\n    description=code,\n    name=\"DynamicProcess\"\n)\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#start_processes","title":"<code>start_processes</code>","text":"<p>Start execution of processes.</p> <pre><code>start_processes(process_names: List[str]) -&gt; None\n</code></pre> <p>Parameters: - <code>process_names</code> (List[str]): List of process names to start</p> <p>Example: <pre><code>orchestrator.start_processes([\"Process1\", \"Process2\"])\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#set_parameter","title":"<code>set_parameter</code>","text":"<p>Set orchestrator parameter.</p> <pre><code>set_parameter(param_name: str, new_value: Any) -&gt; None\n</code></pre> <p>Parameters: - <code>param_name</code> (str): Parameter name - <code>new_value</code> (Any): New parameter value</p> <p>Example: <pre><code>orchestrator.set_parameter(\"time_limit_short\", 2)\norchestrator.set_parameter(\"time_limit_long\", 5)\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#inject_db_interface","title":"<code>inject_db_interface</code>","text":"<p>Inject database interface for experiment tracking.</p> <pre><code>inject_db_interface(db_client: StatusDBInterface) -&gt; None\n</code></pre> <p>Parameters: - <code>db_client</code> (StatusDBInterface): Database client instance</p> <p>Example: <pre><code>from laborchestrator.database_integration import StatusDBInterface\n\ndb_interface = StatusDBInterface()\norchestrator.inject_db_interface(db_interface)\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#properties","title":"Properties","text":""},{"location":"laborchestrator/api-reference/#processes","title":"<code>processes</code>","text":"<p>Dictionary of all processes.</p> <pre><code>processes: Dict[str, Process]\n</code></pre> <p>Example: <pre><code>for name, process in orchestrator.processes.items():\n    print(f\"{name}: {process.state}\")\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#schedule_manager","title":"<code>schedule_manager</code>","text":"<p>The schedule manager instance.</p> <pre><code>schedule_manager: ScheduleManager\n</code></pre> <p>Example: <pre><code>schedule_manager = orchestrator.schedule_manager\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#schedulemanager","title":"ScheduleManager","text":"<p>Handles scheduling logic and device allocation.</p>"},{"location":"laborchestrator/api-reference/#class-schedulemanager","title":"Class: <code>ScheduleManager</code>","text":"<p>Located in: <code>laborchestrator/engine/schedule_manager.py</code></p> <pre><code>from laborchestrator.engine.schedule_manager import ScheduleManager\n</code></pre>"},{"location":"laborchestrator/api-reference/#constructor_1","title":"Constructor","text":"<pre><code>ScheduleManager(\n    jssp: SchedulingInstance,\n    db_client: Optional[StatusDBInterface] = None\n)\n</code></pre> <p>Parameters: - <code>jssp</code> (SchedulingInstance): Scheduling instance - <code>db_client</code> (StatusDBInterface, optional): Database client</p>"},{"location":"laborchestrator/api-reference/#methods_1","title":"Methods","text":""},{"location":"laborchestrator/api-reference/#configure_lab","title":"<code>configure_lab</code>","text":"<p>Configure lab from YAML file.</p> <pre><code>configure_lab(yaml_file: str) -&gt; bool\n</code></pre> <p>Parameters: - <code>yaml_file</code> (str): Path to lab configuration YAML</p> <p>Returns: <code>bool</code> - True if successful</p> <p>Example: <pre><code>success = schedule_manager.configure_lab(\"lab_config.yml\")\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#compute_schedule","title":"<code>compute_schedule</code>","text":"<p>Compute optimal schedule for processes.</p> <pre><code>compute_schedule(time_limit: Optional[float] = None) -&gt; Dict\n</code></pre> <p>Parameters: - <code>time_limit</code> (float, optional): Scheduling timeout in seconds</p> <p>Returns: <code>Dict</code> - Schedule information</p> <p>Example: <pre><code>schedule = schedule_manager.compute_schedule(time_limit=5.0)\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#properties_1","title":"Properties","text":""},{"location":"laborchestrator/api-reference/#time_limit_short","title":"<code>time_limit_short</code>","text":"<p>Quick scheduling timeout in seconds.</p> <pre><code>time_limit_short: float\n</code></pre> <p>Default: 2 seconds</p>"},{"location":"laborchestrator/api-reference/#time_limit_long","title":"<code>time_limit_long</code>","text":"<p>Full scheduling timeout in seconds.</p> <pre><code>time_limit_long: float\n</code></pre> <p>Default: 5 seconds</p>"},{"location":"laborchestrator/api-reference/#lab_config_file","title":"<code>lab_config_file</code>","text":"<p>Path to loaded lab configuration file.</p> <pre><code>lab_config_file: str\n</code></pre>"},{"location":"laborchestrator/api-reference/#data-structures","title":"Data Structures","text":""},{"location":"laborchestrator/api-reference/#processstep","title":"ProcessStep","text":"<p>Represents a single operation in a workflow.</p> <p>Located in: <code>laborchestrator/structures.py</code></p> <pre><code>from laborchestrator.structures import ProcessStep\nfrom dataclasses import dataclass\n\n@dataclass\nclass ProcessStep:\n    name: str                           # Step identifier\n    cont_names: List[str]              # Container names\n    function: str                       # Operation type\n    duration: float                     # Duration in seconds\n    process_name: str                   # Parent process name\n    used_devices: List[UsedDevice]     # Device requirements\n    wait_to_start_costs: float         # Priority weighting\n    data: Dict                          # Custom metadata\n</code></pre> <p>Example: <pre><code>step = ProcessStep(\n    name=\"incubate_step_1\",\n    cont_names=[\"plate_1\"],\n    function=\"incubate\",\n    duration=120.0,\n    process_name=\"MyProcess\",\n    used_devices=[device],\n    wait_to_start_costs=0.0,\n    data={\"temperature\": 310}\n)\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#movestep","title":"MoveStep","text":"<p>Represents a container movement operation.</p> <pre><code>@dataclass\nclass MoveStep:\n    name: str                           # Step identifier\n    cont_names: List[str]              # Container names\n    function: str                       # Always \"move\"\n    duration: float                     # Duration in seconds\n    source_device: str                  # Source location\n    target_device: str                  # Target location\n    used_devices: List[UsedDevice]     # Mover device\n    lidded: bool                        # Lid state\n</code></pre> <p>Example: <pre><code>move_step = MoveStep(\n    name=\"move_to_incubator\",\n    cont_names=[\"plate_1\"],\n    function=\"move\",\n    duration=30.0,\n    source_device=\"Carousel\",\n    target_device=\"Incubator1\",\n    used_devices=[mover],\n    lidded=True\n)\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#containerinfo","title":"ContainerInfo","text":"<p>Tracks labware container information.</p> <pre><code>@dataclass\nclass ContainerInfo:\n    name: str                           # Container identifier\n    current_device: str                 # Current location\n    current_pos: int                    # Position at location\n    start_device: UsedDevice            # Starting location\n    filled: bool                        # Filled/empty status\n    content: str                        # Content description\n    labware_type: str                   # Type (plate, tube, etc)\n    barcode: Optional[str]              # Barcode number\n    is_reagent: bool                    # Reagent flag\n</code></pre> <p>Example: <pre><code>container = ContainerInfo(\n    name=\"culture_plate_1\",\n    current_device=\"Carousel\",\n    current_pos=10,\n    start_device=storage_device,\n    filled=True,\n    content=\"E. coli culture\",\n    labware_type=\"96-well plate\",\n    barcode=\"BC123456\",\n    is_reagent=False\n)\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#useddevice","title":"UsedDevice","text":"<p>Represents device requirements/assignments.</p> <pre><code>@dataclass\nclass UsedDevice:\n    name: str                           # Device name\n    device_type: str                    # Device type\n    position: Optional[int]             # Position at device\n    capacity: int                       # Device capacity\n    allows_overlap: bool                # Concurrent operations\n</code></pre> <p>Example: <pre><code>device = UsedDevice(\n    name=\"Incubator1\",\n    device_type=\"incubator\",\n    position=5,\n    capacity=32,\n    allows_overlap=False\n)\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#schedulinginstance","title":"SchedulingInstance","text":"<p>Complete workflow container (JSSP - Job Shop Scheduling Problem).</p> <pre><code>@dataclass\nclass SchedulingInstance:\n    process_steps: List[ProcessStep]    # All process steps\n    move_steps: List[MoveStep]          # All move steps\n    containers: List[ContainerInfo]     # All containers\n    devices: List[UsedDevice]           # All devices\n    dependencies: Dict                   # Step dependencies\n</code></pre> <p>Example: <pre><code>instance = SchedulingInstance(\n    process_steps=[step1, step2],\n    move_steps=[move1, move2],\n    containers=[container1, container2],\n    devices=[device1, device2],\n    dependencies={\"step2\": [\"step1\"]}\n)\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#workerinterface","title":"WorkerInterface","text":"<p>Executes process steps by interfacing with lab devices.</p>"},{"location":"laborchestrator/api-reference/#class-workerinterface","title":"Class: <code>WorkerInterface</code>","text":"<p>Located in: <code>laborchestrator/engine/worker_interface.py</code></p> <pre><code>from laborchestrator.engine.worker_interface import WorkerInterface\n</code></pre>"},{"location":"laborchestrator/api-reference/#methods_2","title":"Methods","text":""},{"location":"laborchestrator/api-reference/#execute_step","title":"<code>execute_step</code>","text":"<p>Execute a process step.</p> <pre><code>execute_step(step: ProcessStep, containers: List[ContainerInfo]) -&gt; bool\n</code></pre> <p>Parameters: - <code>step</code> (ProcessStep): Step to execute - <code>containers</code> (List[ContainerInfo]): Involved containers</p> <p>Returns: <code>bool</code> - True if successful</p>"},{"location":"laborchestrator/api-reference/#execute_move","title":"<code>execute_move</code>","text":"<p>Execute a move step.</p> <pre><code>execute_move(move: MoveStep, containers: List[ContainerInfo]) -&gt; bool\n</code></pre> <p>Parameters: - <code>move</code> (MoveStep): Move step to execute - <code>containers</code> (List[ContainerInfo]): Containers to move</p> <p>Returns: <code>bool</code> - True if successful</p>"},{"location":"laborchestrator/api-reference/#workerobserver","title":"WorkerObserver","text":"<p>Monitors execution and updates schedules.</p>"},{"location":"laborchestrator/api-reference/#class-workerobserver","title":"Class: <code>WorkerObserver</code>","text":"<p>Located in: <code>laborchestrator/engine/worker_observer.py</code></p> <pre><code>from laborchestrator.engine.worker_observer import WorkerObserver\n</code></pre>"},{"location":"laborchestrator/api-reference/#methods_3","title":"Methods","text":""},{"location":"laborchestrator/api-reference/#observe","title":"<code>observe</code>","text":"<p>Monitor process execution.</p> <pre><code>observe() -&gt; None\n</code></pre> <p>Continuously monitors running steps and triggers rescheduling on delays or errors.</p>"},{"location":"laborchestrator/api-reference/#update_schedule","title":"<code>update_schedule</code>","text":"<p>Trigger schedule update.</p> <pre><code>update_schedule() -&gt; None\n</code></pre> <p>Requests a new schedule computation based on current state.</p>"},{"location":"laborchestrator/api-reference/#wfgmanager","title":"WFGManager","text":"<p>Manages workflow graphs for visualization.</p>"},{"location":"laborchestrator/api-reference/#class-wfgmanager","title":"Class: <code>WFGManager</code>","text":"<p>Located in: <code>laborchestrator/engine/wfg_manager.py</code></p> <pre><code>from laborchestrator.engine.wfg_manager import WFGManager\n</code></pre>"},{"location":"laborchestrator/api-reference/#methods_4","title":"Methods","text":""},{"location":"laborchestrator/api-reference/#create_graph","title":"<code>create_graph</code>","text":"<p>Create workflow graph from scheduling instance.</p> <pre><code>create_graph(instance: SchedulingInstance) -&gt; WorkFlowGraph\n</code></pre> <p>Parameters: - <code>instance</code> (SchedulingInstance): Scheduling instance</p> <p>Returns: <code>WorkFlowGraph</code> - NetworkX directed graph</p>"},{"location":"laborchestrator/api-reference/#visualize","title":"<code>visualize</code>","text":"<p>Generate visualization of workflow graph.</p> <pre><code>visualize(graph: WorkFlowGraph, output_file: str) -&gt; None\n</code></pre> <p>Parameters: - <code>graph</code> (WorkFlowGraph): Workflow graph - <code>output_file</code> (str): Output file path</p>"},{"location":"laborchestrator/api-reference/#pythonlabreader","title":"PythonLabReader","text":"<p>Parses PythonLab process files.</p>"},{"location":"laborchestrator/api-reference/#class-pythonlabreader","title":"Class: <code>PythonLabReader</code>","text":"<p>Located in: <code>laborchestrator/pythonlab_reader.py</code></p> <pre><code>from laborchestrator.pythonlab_reader import PythonLabReader\n</code></pre>"},{"location":"laborchestrator/api-reference/#methods_5","title":"Methods","text":""},{"location":"laborchestrator/api-reference/#read_process","title":"<code>read_process</code>","text":"<p>Read and parse a PythonLab process file.</p> <pre><code>read_process(file_path: str) -&gt; PLProcess\n</code></pre> <p>Parameters: - <code>file_path</code> (str): Path to process file</p> <p>Returns: <code>PLProcess</code> - Parsed process object</p> <p>Example: <pre><code>reader = PythonLabReader()\nprocess = reader.read_process(\"process.py\")\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#try_to_read_process","title":"<code>try_to_read_process</code>","text":"<p>CLI command to read and validate a process.</p> <pre><code>try_to_read_process(file_path: str) -&gt; None\n</code></pre> <p>Parameters: - <code>file_path</code> (str): Path to process file</p> <p>Example: <pre><code>read_process path/to/process.py\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#enums","title":"Enums","text":""},{"location":"laborchestrator/api-reference/#orchestratorstate","title":"OrchestratorState","text":"<p>Orchestrator execution states.</p> <p>Located in: <code>laborchestrator/orchestrator_interface.py</code></p> <pre><code>from laborchestrator.orchestrator_interface import OrchestratorState\nfrom enum import Enum\n\nclass OrchestratorState(Enum):\n    IDLE = \"idle\"\n    RUNNING = \"running\"\n    PAUSED = \"paused\"\n    ERROR = \"error\"\n    FINISHED = \"finished\"\n</code></pre> <p>Example: <pre><code>if orchestrator.state == OrchestratorState.RUNNING:\n    print(\"Orchestrator is running\")\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#processstate","title":"ProcessState","text":"<p>Process execution states.</p> <pre><code>from laborchestrator.orchestrator_interface import ProcessState\nfrom enum import Enum\n\nclass ProcessState(Enum):\n    PENDING = \"pending\"\n    SCHEDULED = \"scheduled\"\n    RUNNING = \"running\"\n    COMPLETED = \"completed\"\n    FAILED = \"failed\"\n    CANCELLED = \"cancelled\"\n</code></pre> <p>Example: <pre><code>for name, process in orchestrator.processes.items():\n    if process.state == ProcessState.FAILED:\n        print(f\"Process {name} failed\")\n</code></pre></p>"},{"location":"laborchestrator/api-reference/#stepstate","title":"StepState","text":"<p>Process step execution states.</p> <pre><code>from laborchestrator.orchestrator_interface import StepState\nfrom enum import Enum\n\nclass StepState(Enum):\n    PENDING = \"pending\"\n    READY = \"ready\"\n    RUNNING = \"running\"\n    COMPLETED = \"completed\"\n    FAILED = \"failed\"\n    BLOCKED = \"blocked\"\n</code></pre>"},{"location":"laborchestrator/api-reference/#database-integration","title":"Database Integration","text":""},{"location":"laborchestrator/api-reference/#statusdbinterface","title":"StatusDBInterface","text":"<p>Abstract interface for database integration.</p> <p>Located in: <code>laborchestrator/database_integration/status_db_interface.py</code></p> <pre><code>from laborchestrator.database_integration import StatusDBInterface\n</code></pre>"},{"location":"laborchestrator/api-reference/#methods_6","title":"Methods","text":""},{"location":"laborchestrator/api-reference/#update_process_status","title":"<code>update_process_status</code>","text":"<p>Update process status in database.</p> <pre><code>update_process_status(\n    process_name: str,\n    state: ProcessState,\n    progress: float\n) -&gt; None\n</code></pre> <p>Parameters: - <code>process_name</code> (str): Process name - <code>state</code> (ProcessState): Current state - <code>progress</code> (float): Progress percentage (0-100)</p>"},{"location":"laborchestrator/api-reference/#update_step_status","title":"<code>update_step_status</code>","text":"<p>Update step status in database.</p> <pre><code>update_step_status(\n    step_name: str,\n    state: StepState,\n    start_time: Optional[datetime],\n    end_time: Optional[datetime]\n) -&gt; None\n</code></pre> <p>Parameters: - <code>step_name</code> (str): Step name - <code>state</code> (StepState): Current state - <code>start_time</code> (datetime, optional): Start timestamp - <code>end_time</code> (datetime, optional): End timestamp</p>"},{"location":"laborchestrator/api-reference/#log_event","title":"<code>log_event</code>","text":"<p>Log an event to database.</p> <pre><code>log_event(\n    event_type: str,\n    message: str,\n    severity: str = \"info\"\n) -&gt; None\n</code></pre> <p>Parameters: - <code>event_type</code> (str): Event type - <code>message</code> (str): Event message - <code>severity</code> (str): Severity level (info/warning/error)</p>"},{"location":"laborchestrator/api-reference/#type-hints","title":"Type Hints","text":"<p>Common type aliases used in Lab Orchestrator:</p> <pre><code>from typing import Dict, List, Optional, Tuple, Union\nfrom laborchestrator.structures import ProcessStep, MoveStep, ContainerInfo, UsedDevice\n\n# Workflow graph type (NetworkX directed graph)\nWorkFlowGraph = nx.DiGraph\n\n# Schedule type\nSchedule = Dict[str, Any]\n\n# Device configuration\nDeviceConfig = Dict[str, Union[str, int, bool, float]]\n\n# Lab configuration\nLabConfig = Dict[str, Dict[str, DeviceConfig]]\n</code></pre>"},{"location":"laborchestrator/api-reference/#complete-example","title":"Complete Example","text":"<p>Here's a complete example using the API:</p> <pre><code>from laborchestrator.orchestrator_implementation import Orchestrator\nfrom laborchestrator.orchestrator_interface import ProcessState\nfrom tests.test_data.inc_read_process import IncReadProcess\n\n# Create orchestrator\norchestrator = Orchestrator()\n\n# Configure lab\nsuccess = orchestrator.add_lab_resources_from_file(\"lab_config.yml\")\nif not success:\n    print(\"Failed to load lab configuration\")\n    exit(1)\n\n# Add processes\nprocess1 = IncReadProcess(priority=5)\nname1 = orchestrator.add_process(\n    process_object=process1,\n    name=\"IncubationTest\"\n)\n\nname2 = orchestrator.add_process(\n    file_path=\"another_process.py\",\n    name=\"SecondProcess\",\n    delay=30  # Start in 30 minutes\n)\n\n# Start processes\norchestrator.start_processes([name1, name2])\n\n# Monitor execution\nimport time\nwhile True:\n    all_done = True\n    for name, process in orchestrator.processes.items():\n        print(f\"{name}: {process.state}\")\n        if process.state not in [ProcessState.COMPLETED, ProcessState.FAILED]:\n            all_done = False\n\n    if all_done:\n        break\n\n    time.sleep(10)\n\nprint(\"All processes completed\")\n</code></pre>"},{"location":"laborchestrator/api-reference/#see-also","title":"See Also","text":"<ul> <li>Configuration - Configure lab resources</li> <li>Writing Processes - Create workflows</li> <li>SiLA Integration - SiLA server API</li> <li>Getting Started - Quick start guide</li> </ul>"},{"location":"laborchestrator/configuration/","title":"Configuration","text":"<p>This guide explains how to configure Lab Orchestrator and your laboratory resources.</p>"},{"location":"laborchestrator/configuration/#overview","title":"Overview","text":"<p>Lab Orchestrator uses YAML configuration files to define: - Available laboratory devices - Device capacities and constraints - Device groupings by type - Mapping to PythonLab resource types</p>"},{"location":"laborchestrator/configuration/#lab-configuration-yaml","title":"Lab Configuration YAML","text":""},{"location":"laborchestrator/configuration/#structure","title":"Structure","text":"<p>A lab configuration file has two main sections:</p> <ol> <li><code>description</code> - Human-readable description of the lab</li> <li><code>sila_servers</code> - Dictionary of device types and their instances</li> <li><code>pythonlab_translation</code> - Mapping from device types to PythonLab resource classes</li> </ol>"},{"location":"laborchestrator/configuration/#example-configuration","title":"Example Configuration","text":"<pre><code>description: \"Demo lab configuration\"\n\nsila_servers:\n    incubators:\n        Incubator1:\n            capacity: 32\n        Incubator2:\n            capacity: 32\n        Incubator3:\n            capacity: 32\n        Incubator4:\n            capacity: 30\n\n    plate_readers:\n        Plate_Reader:\n            capacity: 1\n        Plate_Reader2:\n            capacity: 1\n\n    liquid_handlers:\n        Liquid_Handler:\n            capacity: 6\n            process_capacity: 1\n            allows_overlap: False\n\n    movers:\n        Mover:\n            capacity: 1\n            allows_overlap: False\n\n    centrifuges:\n        Centrifuge:\n            min_capacity: 4\n            capacity: 4\n            allows_overlap: False\n\n    storage:\n        Carousel:\n            capacity: 150\n        Transfer:\n            capacity: 4\n\npythonlab_translation:\n    incubators: IncubatorServiceResource\n    centrifuges: CentrifugeServiceResource\n    movers: MoverServiceResource\n    liquid_handlers: LiquidHandlerServiceResource\n    plate_readers: PlateReaderServiceResource\n    storage: LabwareStorageResource\n</code></pre>"},{"location":"laborchestrator/configuration/#device-types","title":"Device Types","text":""},{"location":"laborchestrator/configuration/#incubators","title":"Incubators","text":"<p>Devices that maintain temperature and optionally other environmental conditions.</p> <pre><code>incubators:\n    IncubatorName:\n        capacity: 32  # Number of containers it can hold\n</code></pre> <p>Parameters: - <code>capacity</code> (required): Maximum number of containers</p>"},{"location":"laborchestrator/configuration/#plate-readers","title":"Plate Readers","text":"<p>Devices for reading absorbance, fluorescence, or luminescence from microplates.</p> <pre><code>plate_readers:\n    PlateReaderName:\n        capacity: 1  # Usually 1 plate at a time\n</code></pre> <p>Parameters: - <code>capacity</code> (required): Number of simultaneous measurements</p>"},{"location":"laborchestrator/configuration/#liquid-handlers","title":"Liquid Handlers","text":"<p>Automated liquid handling systems for pipetting operations.</p> <pre><code>liquid_handlers:\n    LiquidHandlerName:\n        capacity: 6              # Deck positions\n        process_capacity: 1      # Simultaneous processes\n        allows_overlap: False    # Whether operations can overlap\n</code></pre> <p>Parameters: - <code>capacity</code> (required): Number of container positions on deck - <code>process_capacity</code> (optional): Number of simultaneous operations - <code>allows_overlap</code> (optional): Whether multiple operations can overlap in time</p>"},{"location":"laborchestrator/configuration/#movers","title":"Movers","text":"<p>Robotic arms or transfer systems for moving containers between devices.</p> <pre><code>movers:\n    MoverName:\n        capacity: 1              # Number of containers in gripper\n        allows_overlap: False    # Whether moves can overlap\n</code></pre> <p>Parameters: - <code>capacity</code> (required): Gripper capacity (usually 1) - <code>allows_overlap</code> (optional): Concurrent operation support</p>"},{"location":"laborchestrator/configuration/#centrifuges","title":"Centrifuges","text":"<p>Devices for separating samples by centrifugal force.</p> <pre><code>centrifuges:\n    CentrifugeName:\n        min_capacity: 4          # Minimum containers for balance\n        capacity: 4              # Maximum containers\n        allows_overlap: False    # Whether runs can overlap\n</code></pre> <p>Parameters: - <code>capacity</code> (required): Maximum number of containers - <code>min_capacity</code> (optional): Minimum containers required (for balance) - <code>allows_overlap</code> (optional): Concurrent operation support</p>"},{"location":"laborchestrator/configuration/#storage","title":"Storage","text":"<p>Storage locations like carousels, hotels, or transfer stations.</p> <pre><code>storage:\n    StorageName:\n        capacity: 150  # Number of storage positions\n</code></pre> <p>Parameters: - <code>capacity</code> (required): Number of storage positions</p>"},{"location":"laborchestrator/configuration/#pythonlab-translation","title":"PythonLab Translation","text":"<p>The <code>pythonlab_translation</code> section maps device type keys to PythonLab resource class names:</p> <pre><code>pythonlab_translation:\n    incubators: IncubatorServiceResource\n    centrifuges: CentrifugeServiceResource\n    movers: MoverServiceResource\n    liquid_handlers: LiquidHandlerServiceResource\n    plate_readers: PlateReaderServiceResource\n    storage: LabwareStorageResource\n</code></pre> <p>This mapping allows PythonLab processes to reference the correct resource types.</p>"},{"location":"laborchestrator/configuration/#loading-configuration","title":"Loading Configuration","text":""},{"location":"laborchestrator/configuration/#programmatically","title":"Programmatically","text":"<pre><code>from laborchestrator.orchestrator_implementation import Orchestrator\n\norchestrator = Orchestrator()\norchestrator.add_lab_resources_from_file(\"path/to/lab_config.yml\")\n</code></pre>"},{"location":"laborchestrator/configuration/#via-schedulemanager","title":"Via ScheduleManager","text":"<pre><code>from laborchestrator.engine.schedule_manager import ScheduleManager\n\nschedule_manager.configure_lab(\"path/to/lab_config.yml\")\n</code></pre>"},{"location":"laborchestrator/configuration/#orchestrator-parameters","title":"Orchestrator Parameters","text":"<p>Beyond lab resources, you can configure orchestrator behavior:</p>"},{"location":"laborchestrator/configuration/#initialization-parameters","title":"Initialization Parameters","text":"<pre><code>from laborchestrator.orchestrator_implementation import Orchestrator\nfrom laborchestrator.engine.worker_interface import WorkerInterface\n\norchestrator = Orchestrator(\n    reader: str = \"PythonLab\",  # Process reader type\n    worker_type: Type[WorkerInterface] = WorkerInterface  # Worker implementation\n)\n</code></pre>"},{"location":"laborchestrator/configuration/#runtime-parameters","title":"Runtime Parameters","text":"<pre><code># Set scheduling time limits\norchestrator.set_parameter(\"time_limit_short\", 2)  # Quick scheduling (seconds)\norchestrator.set_parameter(\"time_limit_long\", 5)   # Full scheduling (seconds)\n\n# Inject database interface\nfrom laborchestrator.database_integration import StatusDBInterface\norchestrator.inject_db_interface(db_client)\n</code></pre>"},{"location":"laborchestrator/configuration/#schedule-manager-configuration","title":"Schedule Manager Configuration","text":"<p>The ScheduleManager handles the core scheduling logic:</p> <pre><code>from laborchestrator.engine.schedule_manager import ScheduleManager\n\n# Create manager\nschedule_manager = ScheduleManager(\n    jssp=scheduling_instance,\n    db_client=db_interface  # Optional\n)\n\n# Configure scheduling parameters\nschedule_manager.time_limit_short = 2  # Quick rescheduling timeout\nschedule_manager.time_limit_long = 5   # Full scheduling timeout\nschedule_manager.max_iterations = 1000  # Max scheduling iterations\n\n# Load lab configuration\nschedule_manager.configure_lab(\"lab_config.yml\")\n</code></pre>"},{"location":"laborchestrator/configuration/#environment-variables","title":"Environment Variables","text":"<p>Lab Orchestrator supports configuration via environment variables (defined in <code>.env</code> files):</p> <pre><code># Example .env file\nPYTHONUNBUFFERED=1\nSILA_SERVER_IP=0.0.0.0\nSILA_SERVER_PORT=50052\nLAB_CONFIG_PATH=/path/to/lab_config.yml\n</code></pre>"},{"location":"laborchestrator/configuration/#docker-configuration","title":"Docker Configuration","text":"<p>When running in Docker, configuration is managed via:</p>"},{"location":"laborchestrator/configuration/#docker-composeyml","title":"docker-compose.yml","text":"<pre><code>version: '3.8'\n\nservices:\n  orchestrator:\n    build: .\n    environment:\n      - PYTHONUNBUFFERED=1\n    ports:\n      - \"50052:50052\"\n      - \"8050:8050\"  # Dash UI\n    volumes:\n      - ./lab_config.yml:/app/lab_config.yml\n      - ./logs:/app/logs\n</code></pre>"},{"location":"laborchestrator/configuration/#dockerfile-environment","title":"Dockerfile Environment","text":"<pre><code>ENV PYTHONUNBUFFERED=1\n</code></pre>"},{"location":"laborchestrator/configuration/#best-practices","title":"Best Practices","text":""},{"location":"laborchestrator/configuration/#1-device-naming","title":"1. Device Naming","text":"<p>Use descriptive, unique names: - \u2705 Good: <code>Incubator_Room1_A</code>, <code>Plate_Reader_EnVision</code> - \u274c Bad: <code>Device1</code>, <code>Inc1</code></p>"},{"location":"laborchestrator/configuration/#2-capacity-planning","title":"2. Capacity Planning","text":"<p>Set realistic capacities based on physical constraints: <pre><code>liquid_handlers:\n    Tecan_EVO:\n        capacity: 6              # 6 deck positions\n        process_capacity: 1      # One process at a time\n        allows_overlap: False    # No concurrent operations\n</code></pre></p>"},{"location":"laborchestrator/configuration/#3-storage-organization","title":"3. Storage Organization","text":"<p>Separate storage by function: <pre><code>storage:\n    InputHotel:\n        capacity: 50\n    OutputHotel:\n        capacity: 50\n    TransferStation:\n        capacity: 4\n</code></pre></p>"},{"location":"laborchestrator/configuration/#4-versioning-configuration","title":"4. Versioning Configuration","text":"<p>Keep lab configurations in version control: <pre><code>git add lab_configs/\ngit commit -m \"feat: Add new plate reader to lab config\"\n</code></pre></p>"},{"location":"laborchestrator/configuration/#5-testing-configuration","title":"5. Testing Configuration","text":"<p>Always test configuration changes: <pre><code># Test configuration loading\norchestrator = Orchestrator()\nsuccess = orchestrator.add_lab_resources_from_file(\"new_config.yml\")\nassert success, \"Configuration failed to load\"\n\n# Verify devices are registered\ndevices = orchestrator.get_available_devices()\nassert \"NewDevice\" in devices\n</code></pre></p>"},{"location":"laborchestrator/configuration/#configuration-validation","title":"Configuration Validation","text":"<p>Lab Orchestrator validates configurations when loading. Common errors:</p>"},{"location":"laborchestrator/configuration/#missing-required-fields","title":"Missing Required Fields","text":"<pre><code># \u274c Error: Missing capacity\nincubators:\n    Incubator1: {}\n\n# \u2705 Correct\nincubators:\n    Incubator1:\n        capacity: 32\n</code></pre>"},{"location":"laborchestrator/configuration/#invalid-device-types","title":"Invalid Device Types","text":"<pre><code># \u274c Error: Unknown device type\ninvalid_devices:\n    SomeDevice:\n        capacity: 10\n\n# \u2705 Correct: Use standard types\nincubators:\n    SomeDevice:\n        capacity: 10\n</code></pre>"},{"location":"laborchestrator/configuration/#mismatched-translation","title":"Mismatched Translation","text":"<pre><code># \u274c Error: Device type not in translation\nsila_servers:\n    new_device_type:\n        Device1:\n            capacity: 5\n\n# pythonlab_translation doesn't include 'new_device_type'\n\n# \u2705 Correct: Add to translation\npythonlab_translation:\n    new_device_type: NewDeviceServiceResource\n</code></pre>"},{"location":"laborchestrator/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"laborchestrator/configuration/#custom-device-parameters","title":"Custom Device Parameters","text":"<p>You can add custom parameters for specific devices:</p> <pre><code>incubators:\n    SpecialIncubator:\n        capacity: 32\n        max_temperature: 350  # Custom parameter\n        has_shaking: true     # Custom parameter\n</code></pre> <p>Access custom parameters in your code: <pre><code>device_config = orchestrator.get_device_config(\"SpecialIncubator\")\nif device_config.get(\"has_shaking\"):\n    # Handle shaking incubator differently\n    pass\n</code></pre></p>"},{"location":"laborchestrator/configuration/#multiple-configuration-files","title":"Multiple Configuration Files","text":"<p>For complex labs, split configuration:</p> <pre><code># Load base configuration\norchestrator.add_lab_resources_from_file(\"base_config.yml\")\n\n# Add additional devices\norchestrator.add_lab_resources_from_file(\"expansion_devices.yml\")\n</code></pre>"},{"location":"laborchestrator/configuration/#see-also","title":"See Also","text":"<ul> <li>Writing Processes - Use configured devices in processes</li> <li>SiLA Integration - Connect to physical devices</li> <li>API Reference - Configuration method details</li> </ul>"},{"location":"laborchestrator/deployment/","title":"Deployment","text":"<p>This guide covers deploying Lab Orchestrator in production environments.</p>"},{"location":"laborchestrator/deployment/#deployment-options","title":"Deployment Options","text":"<p>Lab Orchestrator supports multiple deployment methods:</p> <ol> <li>Docker (Recommended) - Containerized deployment</li> <li>Direct Python - Running directly with Python</li> </ol>"},{"location":"laborchestrator/deployment/#docker-deployment","title":"Docker Deployment","text":""},{"location":"laborchestrator/deployment/#using-docker-compose-recommended","title":"Using Docker Compose (Recommended)","text":"<p>The easiest production deployment method.</p>"},{"location":"laborchestrator/deployment/#1-create-docker-composeyml","title":"1. Create docker-compose.yml","text":"<pre><code>version: '3.8'\n\nservices:\n  orchestrator:\n    build: .\n    container_name: lab_orchestrator\n    restart: unless-stopped\n    ports:\n      - \"50052:50052\"  # SiLA server\n      - \"8050:8050\"    # Dash web UI\n    environment:\n      - PYTHONUNBUFFERED=1\n    volumes:\n      - ./lab_config.yml:/app/lab_config.yml:ro\n      - ./processes:/app/processes:ro\n      - ./logs:/app/logs\n      - ./certs:/app/certs:ro\n    command: &gt;\n      python -m laborchestrator.sila_server\n      -c /app/certs/server-cert.pem\n      -k /app/certs/server-key.pem\n      -a 0.0.0.0\n      -p 50052\n    networks:\n      - lab_network\n\nnetworks:\n  lab_network:\n    driver: bridge\n</code></pre>"},{"location":"laborchestrator/deployment/#2-start-the-service","title":"2. Start the Service","text":"<pre><code># Build and start\ndocker-compose up -d --build\n\n# View logs\ndocker-compose logs -f\n\n# Stop service\ndocker-compose down\n</code></pre>"},{"location":"laborchestrator/deployment/#manual-docker-build","title":"Manual Docker Build","text":""},{"location":"laborchestrator/deployment/#build-image","title":"Build Image","text":"<pre><code># Default Python 3.9\ndocker build -t laborchestrator:latest .\n\n# Specific Python version\ndocker build --build-arg PYTHON_VERSION=3.10 -t laborchestrator:3.10 .\n</code></pre>"},{"location":"laborchestrator/deployment/#run-container","title":"Run Container","text":"<pre><code># Basic run\ndocker run -d \\\n  --name lab_orchestrator \\\n  -p 50052:50052 \\\n  -p 8050:8050 \\\n  -v $(pwd)/lab_config.yml:/app/lab_config.yml:ro \\\n  -v $(pwd)/logs:/app/logs \\\n  laborchestrator:latest\n\n# With SSL\ndocker run -d \\\n  --name lab_orchestrator \\\n  -p 50052:50052 \\\n  -p 8050:8050 \\\n  -v $(pwd)/lab_config.yml:/app/lab_config.yml:ro \\\n  -v $(pwd)/certs:/app/certs:ro \\\n  -v $(pwd)/logs:/app/logs \\\n  laborchestrator:latest \\\n  python -m laborchestrator.sila_server \\\n    -c /app/certs/server-cert.pem \\\n    -k /app/certs/server-key.pem \\\n    -a 0.0.0.0 \\\n    -p 50052\n</code></pre>"},{"location":"laborchestrator/deployment/#docker-invoke-tasks","title":"Docker Invoke Tasks","text":"<p>Use the invoke tasks for Docker operations:</p> <pre><code># Run tests in Docker\ninvoke docker-test\n\n# Build Docker image\ninvoke docker-build\n\n# Build with specific Python version\ninvoke docker-build --python-version=3.10\n</code></pre>"},{"location":"laborchestrator/deployment/#direct-python-deployment","title":"Direct Python Deployment","text":""},{"location":"laborchestrator/deployment/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>pip package manager</li> <li>Virtual environment (recommended)</li> </ul>"},{"location":"laborchestrator/deployment/#installation","title":"Installation","text":"<pre><code># Create virtual environment\npython3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install package\npip install laborchestrator --index-url https://gitlab.com/api/v4/projects/39006834/packages/pypi/simple\n\n# Or for development\npip install -e .[dev]\n</code></pre>"},{"location":"laborchestrator/deployment/#running","title":"Running","text":"<pre><code># Start SiLA server\npython -m laborchestrator.sila_server \\\n  -c /path/to/server-cert.pem \\\n  -k /path/to/server-key.pem \\\n  -a 0.0.0.0 \\\n  -p 50052\n\n# Or with screen for background execution\nscreen -dmS orchestrator python -m laborchestrator.sila_server --insecure\n</code></pre>"},{"location":"laborchestrator/deployment/#environment-variables","title":"Environment Variables","text":""},{"location":"laborchestrator/deployment/#supported-variables","title":"Supported Variables","text":"<pre><code># Python runtime\nPYTHONUNBUFFERED=1\n\n# SiLA server\nSILA_SERVER_IP=0.0.0.0\nSILA_SERVER_PORT=50052\nSILA_SERVER_UUID=&lt;uuid&gt;\n\n# Lab configuration\nLAB_CONFIG_PATH=/app/lab_config.yml\n\n# Logging\nLOG_LEVEL=INFO\nLOG_FILE=/app/logs/orchestrator.log\n\n# Database\nDB_CONNECTION_STRING=&lt;database-url&gt;\n</code></pre>"},{"location":"laborchestrator/deployment/#using-env-files","title":"Using .env Files","text":"<p>Create <code>.env</code> file:</p> <pre><code>PYTHONUNBUFFERED=1\nSILA_SERVER_IP=0.0.0.0\nSILA_SERVER_PORT=50052\nLAB_CONFIG_PATH=/app/lab_config.yml\nLOG_LEVEL=DEBUG\n</code></pre> <p>Load in docker-compose.yml:</p> <pre><code>services:\n  orchestrator:\n    env_file:\n      - .env\n</code></pre>"},{"location":"laborchestrator/deployment/#security-considerations","title":"Security Considerations","text":""},{"location":"laborchestrator/deployment/#ssltls-configuration","title":"SSL/TLS Configuration","text":"<p>Always use SSL in production:</p> <pre><code># Generate certificates (if not using CA)\nopenssl genrsa -out server-key.pem 2048\nopenssl req -new -key server-key.pem -out server.csr\nopenssl x509 -req -days 365 -in server.csr -signkey server-key.pem -out server-cert.pem\n</code></pre>"},{"location":"laborchestrator/deployment/#firewall-configuration","title":"Firewall Configuration","text":"<pre><code># Allow SiLA port\nsudo ufw allow 50052/tcp\n\n# Allow web UI (optional)\nsudo ufw allow 8050/tcp\n\n# Restrict to specific IPs\nsudo ufw allow from 192.168.1.0/24 to any port 50052\n</code></pre>"},{"location":"laborchestrator/deployment/#user-permissions","title":"User Permissions","text":"<p>Run with non-root user:</p> <pre><code># In Dockerfile\nRUN useradd -m -u 1000 labuser\nUSER labuser\n</code></pre>"},{"location":"laborchestrator/deployment/#network-isolation","title":"Network Isolation","text":"<p>Use Docker networks or Kubernetes network policies:</p> <pre><code># docker-compose.yml\nnetworks:\n  lab_network:\n    driver: bridge\n    internal: true  # No external access\n</code></pre>"},{"location":"laborchestrator/getting-started/","title":"Getting Started","text":"<p>This guide will help you install and run Lab Orchestrator for the first time.</p>"},{"location":"laborchestrator/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>pip package manager</li> <li>(Optional) Docker and docker-compose for containerized deployment</li> </ul>"},{"location":"laborchestrator/getting-started/#installation","title":"Installation","text":""},{"location":"laborchestrator/getting-started/#install-from-pypi","title":"Install from PyPI","text":"<pre><code>pip install laborchestrator --index-url https://gitlab.com/api/v4/projects/39006834/packages/pypi/simple\n</code></pre>"},{"location":"laborchestrator/getting-started/#development-installation","title":"Development Installation","text":"<p>For development or local modifications:</p> <pre><code># Clone the repository\ngit clone &lt;repository-url&gt;\ncd laborchestrator\n\n# Install with development dependencies\npip install -e .[dev]\n</code></pre>"},{"location":"laborchestrator/getting-started/#quick-start","title":"Quick Start","text":""},{"location":"laborchestrator/getting-started/#1-start-the-sila-server","title":"1. Start the SiLA Server","text":"<p>The simplest way to get started is to run the SiLA server:</p> <pre><code>python -m laborchestrator.sila_server --insecure -a 127.0.0.1 -p 50052\n</code></pre> <p>This starts the orchestrator's SiLA interface on <code>localhost:50052</code> without SSL encryption.</p>"},{"location":"laborchestrator/getting-started/#2-using-the-orchestrator-programmatically","title":"2. Using the Orchestrator Programmatically","text":"<p>Create a Python script to use the orchestrator:</p> <pre><code>from laborchestrator.orchestrator_implementation import Orchestrator\n\n# Create orchestrator instance\norchestrator = Orchestrator()\n\n# Load lab configuration\norchestrator.add_lab_resources_from_file(\"path/to/lab_config.yml\")\n\n# Add a process from a file\norchestrator.add_process(\n    file_path=\"path/to/process.py\",\n    name=\"MyProcess\"\n)\n\n# Start the process\norchestrator.start_processes([\"MyProcess\"])\n</code></pre>"},{"location":"laborchestrator/getting-started/#3-running-with-docker","title":"3. Running with Docker","text":"<p>The easiest deployment method is using Docker:</p> <pre><code># Build and start\ndocker-compose up --build\n</code></pre> <p>This will: - Build the Lab Orchestrator container - Start the orchestrator service - Expose the SiLA server on port 50052 - Start the Dash web interface</p>"},{"location":"laborchestrator/getting-started/#command-line-interface","title":"Command-Line Interface","text":""},{"location":"laborchestrator/getting-started/#sila-server-options","title":"SiLA Server Options","text":"<pre><code>python -m laborchestrator.sila_server [OPTIONS]\n</code></pre> <p>Available options:</p> <ul> <li><code>-a, --ip-address TEXT</code> - Server IP address (default: 127.0.0.1)</li> <li><code>-p, --port INTEGER</code> - Server port (default: 50052)</li> <li><code>--server-uuid TEXT</code> - Custom server UUID</li> <li><code>--disable-discovery</code> - Disable SiLA discovery service</li> <li><code>--insecure</code> - Start without SSL encryption (for development)</li> <li><code>-k, --private-key-file PATH</code> - Path to SSL private key</li> <li><code>-c, --cert-file PATH</code> - Path to SSL certificate</li> <li><code>--verbose</code> - Enable verbose logging</li> <li><code>--debug</code> - Enable debug logging</li> <li><code>--quiet</code> - Suppress non-error messages</li> </ul>"},{"location":"laborchestrator/getting-started/#example-commands","title":"Example Commands","text":"<p>Start server with SSL: <pre><code>python -m laborchestrator.sila_server \\\n    -c server-cert.pem \\\n    -k server-key.pem \\\n    -a 0.0.0.0 \\\n    -p 50052\n</code></pre></p> <p>Start server for local development: <pre><code>python -m laborchestrator.sila_server --insecure --debug\n</code></pre></p>"},{"location":"laborchestrator/getting-started/#process-reader-cli","title":"Process Reader CLI","text":"<p>Read and validate a PythonLab process file:</p> <pre><code>read_process path/to/process.py\n</code></pre> <p>This command parses a PythonLab process file and validates its structure.</p>"},{"location":"laborchestrator/getting-started/#development-commands","title":"Development Commands","text":"<p>Lab Orchestrator uses <code>invoke</code> for development tasks:</p>"},{"location":"laborchestrator/getting-started/#testing","title":"Testing","text":"<pre><code># Run all tests\ninvoke test\n\n# Run tests with HTML coverage report\ninvoke test --coverage=html\n\n# Run tests with JUnit XML output\ninvoke test --junit\n\n# Run tests in Docker\ninvoke docker-test\n\n# Run specific test file\npytest tests/test_laborchestrator.py\n</code></pre>"},{"location":"laborchestrator/getting-started/#code-quality","title":"Code Quality","text":"<pre><code># Format code (applies changes)\ninvoke format\n\n# Check formatting without making changes\ninvoke format --check\n\n# Run linting\ninvoke lint\n\n# Run security checks\ninvoke security\n</code></pre>"},{"location":"laborchestrator/getting-started/#documentation","title":"Documentation","text":"<pre><code># Build and open documentation\ninvoke docs\n\n# Build without opening browser\ninvoke docs --no-launch\n</code></pre>"},{"location":"laborchestrator/getting-started/#build-release","title":"Build &amp; Release","text":"<pre><code># Clean all build artifacts\ninvoke clean\n\n# Build Docker image (default Python 3.9)\ninvoke docker-build\n\n# Build with specific Python version\ninvoke docker-build --python-version=3.10\n\n# Version bump (patch/minor/major)\nbumpversion patch\nbumpversion minor\nbumpversion major\n</code></pre>"},{"location":"laborchestrator/getting-started/#next-steps","title":"Next Steps","text":"<ol> <li>Configure your lab: Create a lab configuration YAML file. See Configuration.</li> <li>Write your first process: Learn the PythonLab syntax. See Writing Processes.</li> <li>Integrate with SiLA: Connect to your lab devices. See SiLA Integration.</li> <li>Deploy: Set up for production use. See Deployment.</li> </ol>"},{"location":"laborchestrator/getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"laborchestrator/getting-started/#common-issues","title":"Common Issues","text":"<p>Problem: <code>ModuleNotFoundError: No module named 'pythonlab'</code></p> <p>Solution: The pythonlab package is hosted on a custom GitLab index. Make sure your <code>pyproject.toml</code> includes:</p> <pre><code>[[tool.uv.index]]\nname = \"gitlab-pythonlab\"\nurl = \"https://gitlab.com/api/v4/projects/70367030/packages/pypi/simple\"\n</code></pre> <p>Problem: SiLA server won't start</p> <p>Solution: Check that the port (default 50052) is not already in use. Use a different port with <code>-p</code> option.</p> <p>Problem: Cannot connect to scheduler service</p> <p>Solution: Ensure the scheduler service is running and discoverable on your network. Check firewall settings.</p>"},{"location":"laborchestrator/getting-started/#verifying-installation","title":"Verifying Installation","text":"<p>Run the test suite to verify your installation:</p> <pre><code>invoke test\n</code></pre> <p>All tests should pass. If you encounter failures, check that: - All dependencies are installed - Python version is 3.9 or higher - You have network access for downloading test data</p>"},{"location":"laborchestrator/sila-integration/","title":"SiLA Integration","text":"<p>This guide explains how to use Lab Orchestrator's SiLA 2 server interface to integrate with laboratory automation systems.</p>"},{"location":"laborchestrator/sila-integration/#overview","title":"Overview","text":"<p>Lab Orchestrator implements the SiLA 2 (Standardization in Lab Automation) protocol, providing a standardized interface for controlling laboratory workflows. The SiLA server allows external systems to:</p> <ul> <li>Add and manage processes</li> <li>Start and stop workflow execution</li> <li>Monitor process status</li> <li>Pause and resume operations</li> <li>Run simulations</li> </ul>"},{"location":"laborchestrator/sila-integration/#starting-the-sila-server","title":"Starting the SiLA Server","text":""},{"location":"laborchestrator/sila-integration/#basic-usage","title":"Basic Usage","text":"<p>Start the server in insecure mode (no SSL) for development:</p> <pre><code>python -m laborchestrator.sila_server --insecure\n</code></pre> <p>This starts the server on <code>127.0.0.1:50052</code>.</p>"},{"location":"laborchestrator/sila-integration/#production-usage","title":"Production Usage","text":"<p>Start with SSL encryption for production:</p> <pre><code>python -m laborchestrator.sila_server \\\n    -c /path/to/server-cert.pem \\\n    -k /path/to/server-key.pem \\\n    -a 0.0.0.0 \\\n    -p 50052\n</code></pre>"},{"location":"laborchestrator/sila-integration/#command-line-options","title":"Command-Line Options","text":"<pre><code>python -m laborchestrator.sila_server [OPTIONS]\n</code></pre> <p>Available options:</p> <ul> <li><code>-a, --ip-address TEXT</code> - Server IP address (default: 127.0.0.1)</li> <li><code>-p, --port INTEGER</code> - Server port (default: 50052)</li> <li><code>--server-uuid TEXT</code> - Custom server UUID</li> <li><code>--disable-discovery</code> - Disable SiLA discovery service</li> <li><code>--insecure</code> - Start without SSL encryption (development only)</li> <li><code>-k, --private-key-file PATH</code> - Path to SSL private key file</li> <li><code>-c, --cert-file PATH</code> - Path to SSL certificate file</li> <li><code>--verbose</code> - Enable verbose logging</li> <li><code>--debug</code> - Enable debug logging</li> <li><code>--quiet</code> - Suppress non-error messages</li> </ul>"},{"location":"laborchestrator/sila-integration/#docker-deployment","title":"Docker Deployment","text":"<p>Using docker-compose:</p> <pre><code>version: '3.8'\n\nservices:\n  orchestrator:\n    build: .\n    ports:\n      - \"50052:50052\"  # SiLA server\n      - \"8050:8050\"    # Dash UI\n    environment:\n      - PYTHONUNBUFFERED=1\n    volumes:\n      - ./lab_config.yml:/app/lab_config.yml\n      - ./certs:/app/certs\n    command: &gt;\n      python -m laborchestrator.sila_server\n      -c /app/certs/server-cert.pem\n      -k /app/certs/server-key.pem\n      -a 0.0.0.0\n      -p 50052\n</code></pre> <p>Start with: <pre><code>docker-compose up --build\n</code></pre></p>"},{"location":"laborchestrator/sila-integration/#sila-server-features","title":"SiLA Server Features","text":"<p>Lab Orchestrator implements four main SiLA features:</p>"},{"location":"laborchestrator/sila-integration/#1-laborchestratorservice","title":"1. LabOrchestratorService","text":"<p>Main service for orchestrator control.</p> <p>Commands: - <code>AddProcess</code> - Add a new process to the orchestrator - <code>StartProcesses</code> - Start execution of processes - <code>GetProcessStatus</code> - Get status of running processes - <code>ConfigureLab</code> - Load lab configuration - <code>SetParameter</code> - Set orchestrator parameters</p> <p>Properties: - <code>AvailableDevices</code> - List of configured devices - <code>RunningProcesses</code> - Currently executing processes - <code>ServerStatus</code> - Orchestrator state</p>"},{"location":"laborchestrator/sila-integration/#2-pausecontroller","title":"2. PauseController","text":"<p>Pause and resume workflow execution.</p> <p>Commands: - <code>Pause</code> - Pause all running processes - <code>Resume</code> - Resume paused processes - <code>PauseProcess</code> - Pause a specific process - <code>ResumeProcess</code> - Resume a specific process</p> <p>Properties: - <code>IsPaused</code> - Current pause state</p>"},{"location":"laborchestrator/sila-integration/#3-cancelcontroller","title":"3. CancelController","text":"<p>Cancel running processes.</p> <p>Commands: - <code>Cancel</code> - Cancel all processes - <code>CancelProcess</code> - Cancel a specific process</p> <p>Properties: - <code>CancellableProcesses</code> - List of processes that can be cancelled</p>"},{"location":"laborchestrator/sila-integration/#4-simulationcontroller","title":"4. SimulationController","text":"<p>Run workflow simulations without physical execution.</p> <p>Commands: - <code>StartSimulation</code> - Start simulation mode - <code>StopSimulation</code> - Stop simulation mode - <code>SimulateProcess</code> - Simulate a specific process</p> <p>Properties: - <code>IsSimulating</code> - Current simulation state - <code>SimulationSpeed</code> - Simulation time multiplier</p>"},{"location":"laborchestrator/sila-integration/#using-the-sila-client","title":"Using the SiLA Client","text":""},{"location":"laborchestrator/sila-integration/#python-sila-client-example","title":"Python SiLA Client Example","text":"<pre><code>from sila2.client import SilaClient\n\n# Connect to server\nclient = SilaClient(\n    server_ip=\"127.0.0.1\",\n    server_port=50052,\n    insecure=True  # For development only\n)\n\n# Add a process\nprocess_code = \"\"\"\nfrom pythonlab.process import PLProcess\n# ... process definition\n\"\"\"\n\nclient.LabOrchestratorService.AddProcess(\n    ProcessDescription=process_code,\n    ProcessName=\"MyProcess\"\n)\n\n# Configure lab\nwith open(\"lab_config.yml\", \"r\") as f:\n    lab_config = f.read()\n\nclient.LabOrchestratorService.ConfigureLab(\n    ConfigurationYAML=lab_config\n)\n\n# Start processes\nclient.LabOrchestratorService.StartProcesses(\n    ProcessNames=[\"MyProcess\"]\n)\n\n# Monitor status\nstatus = client.LabOrchestratorService.GetProcessStatus(\n    ProcessName=\"MyProcess\"\n)\nprint(f\"Status: {status.State}\")\n\n# Pause execution\nclient.PauseController.Pause()\n\n# Resume execution\nclient.PauseController.Resume()\n\n# Cancel process\nclient.CancelController.CancelProcess(\n    ProcessName=\"MyProcess\"\n)\n</code></pre>"},{"location":"laborchestrator/sila-integration/#with-ssl","title":"With SSL","text":"<pre><code>from sila2.client import SilaClient\n\nclient = SilaClient(\n    server_ip=\"orchestrator.lab.example.com\",\n    server_port=50052,\n    insecure=False,\n    server_cert=\"/path/to/server-cert.pem\"\n)\n</code></pre>"},{"location":"laborchestrator/sila-integration/#server-configuration","title":"Server Configuration","text":""},{"location":"laborchestrator/sila-integration/#server-metadata","title":"Server Metadata","text":"<p>The server is configured with the following metadata:</p> <pre><code>server_name = \"Orchestrator\"\nserver_type = \"PythonLabOrchestratorServer\"\nserver_version = \"0.1\"\nserver_description = \"Use this to control a running pythonlaborchestrator\"\nserver_vendor_url = \"https://gitlab.com/SiLA2/sila_python\"\n</code></pre>"},{"location":"laborchestrator/sila-integration/#custom-server-uuid","title":"Custom Server UUID","text":"<p>Provide a custom UUID for the server:</p> <pre><code>python -m laborchestrator.sila_server --server-uuid \"123e4567-e89b-12d3-a456-426614174000\"\n</code></pre> <p>Or in Python:</p> <pre><code>from uuid import UUID\nfrom laborchestrator.sila_server.server import Server\nfrom laborchestrator.orchestrator_implementation import Orchestrator\n\norchestrator = Orchestrator()\nserver = Server(\n    orchestrator=orchestrator,\n    server_uuid=UUID(\"123e4567-e89b-12d3-a456-426614174000\")\n)\n</code></pre>"},{"location":"laborchestrator/sila-integration/#discovery-service","title":"Discovery Service","text":"<p>By default, the SiLA server announces itself via mDNS for automatic discovery. To disable:</p> <pre><code>python -m laborchestrator.sila_server --disable-discovery --insecure\n</code></pre>"},{"location":"laborchestrator/sila-integration/#integration-examples","title":"Integration Examples","text":""},{"location":"laborchestrator/sila-integration/#example-1-remote-process-submission","title":"Example 1: Remote Process Submission","text":"<pre><code>from sila2.client import SilaClient\n\ndef submit_process(process_file_path, process_name):\n    \"\"\"Submit a process to the orchestrator\"\"\"\n    # Connect to orchestrator\n    client = SilaClient(\"127.0.0.1\", 50052, insecure=True)\n\n    # Read process file\n    with open(process_file_path, \"r\") as f:\n        process_code = f.read()\n\n    # Add process\n    client.LabOrchestratorService.AddProcess(\n        ProcessDescription=process_code,\n        ProcessName=process_name\n    )\n\n    # Start process\n    client.LabOrchestratorService.StartProcesses(\n        ProcessNames=[process_name]\n    )\n\n    print(f\"Process '{process_name}' submitted and started\")\n\n# Usage\nsubmit_process(\"my_workflow.py\", \"ExperimentA\")\n</code></pre>"},{"location":"laborchestrator/sila-integration/#example-2-process-monitoring","title":"Example 2: Process Monitoring","text":"<pre><code>from sila2.client import SilaClient\nimport time\n\ndef monitor_process(process_name, poll_interval=5):\n    \"\"\"Monitor a process until completion\"\"\"\n    client = SilaClient(\"127.0.0.1\", 50052, insecure=True)\n\n    while True:\n        status = client.LabOrchestratorService.GetProcessStatus(\n            ProcessName=process_name\n        )\n\n        print(f\"Process: {process_name}\")\n        print(f\"State: {status.State}\")\n        print(f\"Progress: {status.Progress}%\")\n        print(f\"Current Step: {status.CurrentStep}\")\n        print(\"---\")\n\n        if status.State in [\"COMPLETED\", \"FAILED\", \"CANCELLED\"]:\n            break\n\n        time.sleep(poll_interval)\n\n    print(f\"Process finished with state: {status.State}\")\n\n# Usage\nmonitor_process(\"ExperimentA\", poll_interval=10)\n</code></pre>"},{"location":"laborchestrator/sila-integration/#example-3-batch-process-submission","title":"Example 3: Batch Process Submission","text":"<pre><code>from sila2.client import SilaClient\n\ndef submit_batch(process_files, lab_config_path):\n    \"\"\"Submit multiple processes as a batch\"\"\"\n    client = SilaClient(\"127.0.0.1\", 50052, insecure=True)\n\n    # Configure lab\n    with open(lab_config_path, \"r\") as f:\n        lab_config = f.read()\n    client.LabOrchestratorService.ConfigureLab(\n        ConfigurationYAML=lab_config\n    )\n\n    # Add all processes\n    process_names = []\n    for i, process_file in enumerate(process_files):\n        process_name = f\"BatchProcess_{i}\"\n        with open(process_file, \"r\") as f:\n            process_code = f.read()\n\n        client.LabOrchestratorService.AddProcess(\n            ProcessDescription=process_code,\n            ProcessName=process_name\n        )\n        process_names.append(process_name)\n\n    # Start all processes\n    client.LabOrchestratorService.StartProcesses(\n        ProcessNames=process_names\n    )\n\n    print(f\"Started {len(process_names)} processes\")\n\n# Usage\nsubmit_batch(\n    [\"workflow1.py\", \"workflow2.py\", \"workflow3.py\"],\n    \"lab_config.yml\"\n)\n</code></pre>"},{"location":"laborchestrator/sila-integration/#example-4-emergency-stop","title":"Example 4: Emergency Stop","text":"<pre><code>from sila2.client import SilaClient\n\ndef emergency_stop():\n    \"\"\"Stop all running processes immediately\"\"\"\n    client = SilaClient(\"127.0.0.1\", 50052, insecure=True)\n\n    # Pause first (stops scheduling new steps)\n    client.PauseController.Pause()\n    print(\"Paused all processes\")\n\n    # Cancel all processes\n    client.CancelController.Cancel()\n    print(\"Cancelled all processes\")\n\n# Usage\nemergency_stop()\n</code></pre>"},{"location":"laborchestrator/sila-integration/#example-5-simulation-mode","title":"Example 5: Simulation Mode","text":"<pre><code>from sila2.client import SilaClient\n\ndef run_simulation(process_file, lab_config):\n    \"\"\"Run a process in simulation mode\"\"\"\n    client = SilaClient(\"127.0.0.1\", 50052, insecure=True)\n\n    # Configure lab\n    with open(lab_config, \"r\") as f:\n        config = f.read()\n    client.LabOrchestratorService.ConfigureLab(\n        ConfigurationYAML=config\n    )\n\n    # Start simulation mode\n    client.SimulationController.StartSimulation(\n        SimulationSpeed=10.0  # 10x real-time speed\n    )\n\n    # Add and start process\n    with open(process_file, \"r\") as f:\n        process_code = f.read()\n    client.LabOrchestratorService.AddProcess(\n        ProcessDescription=process_code,\n        ProcessName=\"SimProcess\"\n    )\n    client.LabOrchestratorService.StartProcesses(\n        ProcessNames=[\"SimProcess\"]\n    )\n\n    # Monitor simulation\n    # ... (same as Example 2)\n\n    # Stop simulation\n    client.SimulationController.StopSimulation()\n\n# Usage\nrun_simulation(\"workflow.py\", \"lab_config.yml\")\n</code></pre>"},{"location":"laborchestrator/sila-integration/#ssl-certificate-generation","title":"SSL Certificate Generation","text":"<p>For production deployments, generate SSL certificates:</p>"},{"location":"laborchestrator/sila-integration/#using-openssl","title":"Using OpenSSL","text":"<pre><code># Generate private key\nopenssl genrsa -out server-key.pem 2048\n\n# Generate certificate signing request\nopenssl req -new -key server-key.pem -out server.csr\n\n# Generate self-signed certificate (valid for 365 days)\nopenssl x509 -req -days 365 -in server.csr -signkey server-key.pem -out server-cert.pem\n\n# Clean up CSR\nrm server.csr\n</code></pre>"},{"location":"laborchestrator/sila-integration/#using-lets-encrypt","title":"Using Let's Encrypt","text":"<p>For publicly accessible servers:</p> <pre><code>certbot certonly --standalone -d orchestrator.lab.example.com\n</code></pre> <p>Then use the generated certificates: <pre><code>python -m laborchestrator.sila_server \\\n    -c /etc/letsencrypt/live/orchestrator.lab.example.com/fullchain.pem \\\n    -k /etc/letsencrypt/live/orchestrator.lab.example.com/privkey.pem \\\n    -a 0.0.0.0 \\\n    -p 50052\n</code></pre></p>"},{"location":"laborchestrator/sila-integration/#logging","title":"Logging","text":""},{"location":"laborchestrator/sila-integration/#enable-verbose-logging","title":"Enable Verbose Logging","text":"<pre><code>python -m laborchestrator.sila_server --verbose --insecure\n</code></pre>"},{"location":"laborchestrator/sila-integration/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code>python -m laborchestrator.sila_server --debug --insecure\n</code></pre>"},{"location":"laborchestrator/sila-integration/#log-to-file","title":"Log to File","text":"<pre><code>python -m laborchestrator.sila_server --insecure 2&gt;&amp;1 | tee orchestrator.log\n</code></pre>"},{"location":"laborchestrator/sila-integration/#firewall-configuration","title":"Firewall Configuration","text":"<p>Open port 50052 for SiLA communication:</p>"},{"location":"laborchestrator/sila-integration/#linux-ufw","title":"Linux (UFW)","text":"<pre><code>sudo ufw allow 50052/tcp\n</code></pre>"},{"location":"laborchestrator/sila-integration/#linux-iptables","title":"Linux (iptables)","text":"<pre><code>sudo iptables -A INPUT -p tcp --dport 50052 -j ACCEPT\n</code></pre>"},{"location":"laborchestrator/sila-integration/#docker","title":"Docker","text":"<p>Ensure port mapping in docker-compose.yml: <pre><code>ports:\n  - \"50052:50052\"\n</code></pre></p>"},{"location":"laborchestrator/sila-integration/#network-discovery","title":"Network Discovery","text":"<p>The SiLA server supports automatic discovery via mDNS (multicast DNS). Clients can discover the server without knowing its IP address.</p>"},{"location":"laborchestrator/sila-integration/#client-discovery-example","title":"Client Discovery Example","text":"<pre><code>from sila2.discovery import discover_servers\n\n# Discover all SiLA servers on the network\nservers = discover_servers(timeout=5)\n\nfor server in servers:\n    if server.server_type == \"PythonLabOrchestratorServer\":\n        print(f\"Found orchestrator at {server.ip}:{server.port}\")\n        client = SilaClient(server.ip, server.port, insecure=True)\n        break\n</code></pre>"},{"location":"laborchestrator/sila-integration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"laborchestrator/sila-integration/#common-issues","title":"Common Issues","text":"<p>Problem: <code>Connection refused</code> when connecting to server</p> <p>Solution: Check that: - Server is running - Correct IP and port - Firewall allows connections - Using <code>--insecure</code> flag for development</p> <p>Problem: SSL certificate errors</p> <p>Solution: - Verify certificate paths are correct - Check certificate validity: <code>openssl x509 -in server-cert.pem -text</code> - Ensure client has access to certificate</p> <p>Problem: Server UUID conflicts</p> <p>Solution: Use <code>--server-uuid</code> to set a unique identifier</p> <p>Problem: Discovery not working</p> <p>Solution: - Check that discovery is not disabled (<code>--disable-discovery</code>) - Verify mDNS is working on your network - Try specifying IP address directly instead of discovery</p>"},{"location":"laborchestrator/sila-integration/#best-practices","title":"Best Practices","text":"<ol> <li>Use SSL in Production: Always use SSL encryption for production deployments</li> <li>Firewall Configuration: Restrict access to known client IPs</li> <li>Logging: Enable appropriate logging levels for debugging</li> <li>Monitoring: Implement health checks and monitoring</li> <li>Error Handling: Handle connection errors and timeouts gracefully</li> <li>Version Management: Keep SiLA client and server versions synchronized</li> </ol>"},{"location":"laborchestrator/sila-integration/#see-also","title":"See Also","text":"<ul> <li>Configuration - Configure lab resources</li> <li>Writing Processes - Create workflows</li> <li>API Reference - Detailed API documentation</li> <li>Deployment - Production deployment guide</li> <li>SiLA 2 Standard - Official SiLA documentation</li> </ul>"},{"location":"laborchestrator/writing-processes/","title":"Writing Processes","text":"<p>This guide explains how to write laboratory workflows using the PythonLab process description language.</p>"},{"location":"laborchestrator/writing-processes/#overview","title":"Overview","text":"<p>Lab Orchestrator uses PythonLab as its process description language. PythonLab allows you to write laboratory workflows in Python, with resources representing lab devices and containers.</p>"},{"location":"laborchestrator/writing-processes/#process-structure","title":"Process Structure","text":"<p>A PythonLab process is a Python class that inherits from <code>PLProcess</code>:</p> <pre><code>from pythonlab.process import PLProcess\n\nclass MyProcess(PLProcess):\n    def __init__(self, priority=10):\n        # Initialize process-specific variables\n        super().__init__(priority=priority)\n\n    def create_resources(self):\n        # Define devices and containers\n        pass\n\n    def init_service_resources(self):\n        # Initialize container positions\n        super().init_service_resources()\n\n    def process(self):\n        # Define the workflow steps\n        pass\n</code></pre>"},{"location":"laborchestrator/writing-processes/#key-methods","title":"Key Methods","text":"<ol> <li><code>__init__</code> - Initialize the process with parameters</li> <li>Set the <code>priority</code> (lower number = higher priority)</li> <li> <p>Define process-specific variables</p> </li> <li> <p><code>create_resources</code> - Define lab resources</p> </li> <li>Create device resource objects</li> <li>Create container (labware) objects</li> <li> <p>Set container properties</p> </li> <li> <p><code>init_service_resources</code> - Initialize resources</p> </li> <li>Set starting positions of containers</li> <li> <p>Call <code>super().init_service_resources()</code> first</p> </li> <li> <p><code>process</code> - Define the workflow</p> </li> <li>Write the sequence of operations</li> <li>Use device methods to perform actions</li> </ol>"},{"location":"laborchestrator/writing-processes/#resource-types","title":"Resource Types","text":""},{"location":"laborchestrator/writing-processes/#service-resources-devices","title":"Service Resources (Devices)","text":"<p>Import from <code>pythonlab.resources.services</code>:</p> <pre><code>from pythonlab.resources.services.moving import MoverServiceResource\nfrom pythonlab.resources.services.incubation import IncubatorServiceResource\nfrom pythonlab.resources.services.analysis import PlateReaderServiceResource\nfrom pythonlab.resources.services.centrifugation import CentrifugeServiceResource\nfrom pythonlab.resources.services.liquid_handling import LiquidHandlerServiceResource\nfrom pythonlab.resources.services.labware_storage import LabwareStorageResource\n</code></pre> <p>Create device resources in <code>create_resources()</code>:</p> <pre><code>def create_resources(self):\n    self.incubator = IncubatorServiceResource(proc=self, name=\"Incubator1\")\n    self.robot_arm = MoverServiceResource(proc=self, name=\"Mover\")\n    self.reader = PlateReaderServiceResource(proc=self, name=\"Plate_Reader\")\n    self.centrifuge = CentrifugeServiceResource(proc=self, name=\"Centrifuge\")\n    self.liquid_handler = LiquidHandlerServiceResource(proc=self, name=\"Liquid_Handler\")\n    self.storage = LabwareStorageResource(proc=self, name=\"Carousel\", capacity=200)\n</code></pre> <p>Parameters: - <code>proc</code> (required): Reference to the process (<code>self</code>) - <code>name</code> (required): Name matching the lab configuration - <code>capacity</code> (for storage): Number of positions</p>"},{"location":"laborchestrator/writing-processes/#labware-resources-containers","title":"Labware Resources (Containers)","text":"<p>Import from <code>pythonlab.resource</code>:</p> <pre><code>from pythonlab.resource import LabwareResource as ContainerResource\n</code></pre> <p>Create containers in <code>create_resources()</code>:</p> <pre><code>def create_resources(self):\n    # Single container\n    self.plate1 = ContainerResource(\n        proc=self,\n        name=\"plate_1\",\n        lidded=True,\n        filled=True\n    )\n\n    # Multiple containers\n    self.plates = [\n        ContainerResource(\n            proc=self,\n            name=f\"plate_{i}\",\n            lidded=True,\n            filled=True\n        )\n        for i in range(4)\n    ]\n</code></pre> <p>Parameters: - <code>proc</code> (required): Reference to the process (<code>self</code>) - <code>name</code> (required): Unique container name - <code>lidded</code> (optional): Whether container has a lid (default: False) - <code>filled</code> (optional): Whether container is filled (default: True)</p> <p>Container Properties: <pre><code># Set priority (lower = higher priority)\nself.plate1.priority = 1\n\n# Set starting position\nself.plate1.set_start_position(self.storage, position=10)\n</code></pre></p>"},{"location":"laborchestrator/writing-processes/#device-operations","title":"Device Operations","text":""},{"location":"laborchestrator/writing-processes/#mover-operations","title":"Mover Operations","text":"<pre><code># Move container to device\nself.robot_arm.move(container, target_loc=self.incubator)\n\n# Move with specific position\nself.robot_arm.move(container, target_loc=self.storage, position=15)\n\n# Move with lid control\nself.robot_arm.move(container, target_loc=self.reader, lidded=False)\n\n# Read barcode\nself.robot_arm.read_barcode(container)\n</code></pre>"},{"location":"laborchestrator/writing-processes/#incubator-operations","title":"Incubator Operations","text":"<pre><code># Incubate\nself.incubator.incubate(\n    container,\n    duration=120,      # seconds\n    temperature=310    # Kelvin (37\u00b0C = 310K)\n)\n\n# Incubate with shaking\nself.incubator.incubate(\n    container,\n    duration=3600,\n    temperature=310,\n    shaking_speed=200  # RPM\n)\n</code></pre>"},{"location":"laborchestrator/writing-processes/#plate-reader-operations","title":"Plate Reader Operations","text":"<pre><code># Single read\nself.reader.single_read(\n    container,\n    method='abs_600nm',  # Method name from device\n    duration=60          # seconds\n)\n\n# Get absorbance value\nabsorbance = self.reader.get_absorbance(container)\n</code></pre>"},{"location":"laborchestrator/writing-processes/#centrifuge-operations","title":"Centrifuge Operations","text":"<pre><code># Centrifuge\nself.centrifuge.centrifuge(\n    container,\n    duration=300,      # seconds\n    speed=4000         # RPM\n)\n\n# Centrifuge multiple containers\nfor container in self.plates:\n    self.centrifuge.centrifuge(container, duration=300, speed=4000)\n</code></pre>"},{"location":"laborchestrator/writing-processes/#liquid-handler-operations","title":"Liquid Handler Operations","text":"<pre><code># Pipette operation\nself.liquid_handler.pipette(\n    container,\n    method='transfer_protocol',  # Protocol name\n    duration=600                  # seconds\n)\n\n# Custom liquid handling\nself.liquid_handler.execute(\n    containers=[self.source, self.dest],\n    method='custom_protocol',\n    duration=300\n)\n</code></pre>"},{"location":"laborchestrator/writing-processes/#examples","title":"Examples","text":""},{"location":"laborchestrator/writing-processes/#example-1-simple-incubation-and-reading","title":"Example 1: Simple Incubation and Reading","text":"<pre><code>from pythonlab.resources.services.moving import MoverServiceResource\nfrom pythonlab.resources.services.incubation import IncubatorServiceResource\nfrom pythonlab.resources.services.analysis import PlateReaderServiceResource\nfrom pythonlab.resources.services.labware_storage import LabwareStorageResource\nfrom pythonlab.resource import LabwareResource as ContainerResource\nfrom pythonlab.process import PLProcess\n\n\nclass IncReadProcess(PLProcess):\n    def __init__(self, priority=10):\n        self.num_plates = 2\n        super().__init__(priority=priority)\n\n    def create_resources(self):\n        # Create devices\n        self.storage = LabwareStorageResource(proc=self, name=\"Carousel\", capacity=200)\n        self.incubator = IncubatorServiceResource(proc=self, name=\"Incubator1\")\n        self.robot_arm = MoverServiceResource(proc=self, name=\"Mover\")\n        self.reader = PlateReaderServiceResource(proc=self, name=\"Plate_Reader\")\n\n        # Create containers\n        self.plates = [\n            ContainerResource(proc=self, name=f\"plate_{i}\", lidded=True, filled=True)\n            for i in range(self.num_plates)\n        ]\n        self.plates[0].priority = 2  # Higher priority for first plate\n\n    def init_service_resources(self):\n        super().init_service_resources()\n        # Set starting positions\n        for i, plate in enumerate(self.plates):\n            plate.set_start_position(self.storage, self.storage.next_free_position + i)\n\n    def process(self):\n        incubation_duration = 120  # 2 minutes\n        temperature = 310  # 37\u00b0C in Kelvin\n\n        # Incubate all plates\n        for plate in self.plates:\n            self.robot_arm.read_barcode(plate)\n            self.robot_arm.move(plate, target_loc=self.incubator)\n            self.incubator.incubate(plate, duration=incubation_duration, temperature=temperature)\n\n        # Read first plate\n        plate = self.plates[0]\n        self.robot_arm.move(plate, target_loc=self.reader, lidded=False)\n        self.reader.single_read(plate, method='abs_600nm', duration=60)\n\n        # Return all plates to storage\n        for i, plate in enumerate(self.plates):\n            position = 30 + i if i &gt; 0 else None\n            self.robot_arm.move(plate, target_loc=self.storage, position=position, lidded=True)\n</code></pre>"},{"location":"laborchestrator/writing-processes/#example-2-centrifugation-workflow","title":"Example 2: Centrifugation Workflow","text":"<pre><code>from pythonlab.resources.services.moving import MoverServiceResource\nfrom pythonlab.resources.services.centrifugation import CentrifugeServiceResource\nfrom pythonlab.resources.services.labware_storage import LabwareStorageResource\nfrom pythonlab.resource import LabwareResource as ContainerResource\nfrom pythonlab.process import PLProcess\n\n\nclass CentrifugeProcess(PLProcess):\n    def __init__(self, priority=5):\n        self.num_plates = 4\n        super().__init__(priority=priority)\n\n    def create_resources(self):\n        self.storage = LabwareStorageResource(proc=self, name=\"Carousel\", capacity=200)\n        self.centrifuge = CentrifugeServiceResource(proc=self, name=\"Centrifuge\")\n        self.robot_arm = MoverServiceResource(proc=self, name=\"Mover\")\n\n        self.plates = [\n            ContainerResource(proc=self, name=f\"sample_{i}\", lidded=True, filled=True)\n            for i in range(self.num_plates)\n        ]\n\n    def init_service_resources(self):\n        super().init_service_resources()\n        for i, plate in enumerate(self.plates):\n            plate.set_start_position(self.storage, i)\n\n    def process(self):\n        # Move all plates to centrifuge (must meet min_capacity)\n        for plate in self.plates:\n            self.robot_arm.move(plate, target_loc=self.centrifuge)\n            self.centrifuge.centrifuge(plate, duration=300, speed=4000)\n\n        # Return to storage\n        for plate in self.plates:\n            self.robot_arm.move(plate, target_loc=self.storage, lidded=True)\n</code></pre>"},{"location":"laborchestrator/writing-processes/#example-3-conditional-workflow","title":"Example 3: Conditional Workflow","text":"<pre><code>from pythonlab.resources.services.moving import MoverServiceResource\nfrom pythonlab.resources.services.analysis import PlateReaderServiceResource\nfrom pythonlab.resources.services.incubation import IncubatorServiceResource\nfrom pythonlab.resources.services.labware_storage import LabwareStorageResource\nfrom pythonlab.resource import LabwareResource as ContainerResource\nfrom pythonlab.process import PLProcess\n\n\nclass ConditionalProcess(PLProcess):\n    def __init__(self, priority=10):\n        super().__init__(priority=priority)\n\n    def create_resources(self):\n        self.storage = LabwareStorageResource(proc=self, name=\"Carousel\", capacity=200)\n        self.incubator = IncubatorServiceResource(proc=self, name=\"Incubator1\")\n        self.reader = PlateReaderServiceResource(proc=self, name=\"Plate_Reader\")\n        self.robot_arm = MoverServiceResource(proc=self, name=\"Mover\")\n\n        self.plate = ContainerResource(proc=self, name=\"sample\", lidded=True, filled=True)\n\n    def init_service_resources(self):\n        super().init_service_resources()\n        self.plate.set_start_position(self.storage, 0)\n\n    def process(self):\n        # Initial incubation\n        self.robot_arm.move(self.plate, target_loc=self.incubator)\n        self.incubator.incubate(self.plate, duration=120, temperature=310)\n\n        # Check absorbance\n        self.robot_arm.move(self.plate, target_loc=self.reader, lidded=False)\n        self.reader.single_read(self.plate, method='abs_600nm', duration=60)\n\n        absorbance = self.reader.get_absorbance(self.plate)\n\n        # Conditional: if absorbance is low, incubate more\n        if absorbance &lt; 0.5:\n            self.robot_arm.move(self.plate, target_loc=self.incubator, lidded=True)\n            self.incubator.incubate(self.plate, duration=180, temperature=310)\n\n            # Read again\n            self.robot_arm.move(self.plate, target_loc=self.reader, lidded=False)\n            self.reader.single_read(self.plate, method='abs_600nm', duration=60)\n\n        # Return to storage\n        self.robot_arm.move(self.plate, target_loc=self.storage, lidded=True)\n</code></pre>"},{"location":"laborchestrator/writing-processes/#example-4-multi-device-workflow","title":"Example 4: Multi-Device Workflow","text":"<pre><code>from pythonlab.resources.services.moving import MoverServiceResource\nfrom pythonlab.resources.services.incubation import IncubatorServiceResource\nfrom pythonlab.resources.services.analysis import PlateReaderServiceResource\nfrom pythonlab.resources.services.liquid_handling import LiquidHandlerServiceResource\nfrom pythonlab.resources.services.labware_storage import LabwareStorageResource\nfrom pythonlab.resource import LabwareResource as ContainerResource\nfrom pythonlab.process import PLProcess\n\n\nclass ComplexWorkflow(PLProcess):\n    def __init__(self, priority=10):\n        super().__init__(priority=priority)\n\n    def create_resources(self):\n        # Devices\n        self.storage = LabwareStorageResource(proc=self, name=\"Carousel\", capacity=200)\n        self.incubator = IncubatorServiceResource(proc=self, name=\"Incubator1\")\n        self.reader = PlateReaderServiceResource(proc=self, name=\"Plate_Reader\")\n        self.liquid_handler = LiquidHandlerServiceResource(proc=self, name=\"Liquid_Handler\")\n        self.robot_arm = MoverServiceResource(proc=self, name=\"Mover\")\n\n        # Containers\n        self.culture_plate = ContainerResource(proc=self, name=\"culture\", lidded=True, filled=True)\n        self.assay_plate = ContainerResource(proc=self, name=\"assay\", lidded=True, filled=False)\n\n    def init_service_resources(self):\n        super().init_service_resources()\n        self.culture_plate.set_start_position(self.storage, 0)\n        self.assay_plate.set_start_position(self.storage, 1)\n\n    def process(self):\n        # Step 1: Grow culture\n        self.robot_arm.move(self.culture_plate, target_loc=self.incubator)\n        self.incubator.incubate(self.culture_plate, duration=7200, temperature=310)\n\n        # Step 2: Transfer samples to assay plate\n        self.robot_arm.move(self.culture_plate, target_loc=self.liquid_handler, lidded=False)\n        self.robot_arm.move(self.assay_plate, target_loc=self.liquid_handler, lidded=False)\n        self.liquid_handler.pipette(\n            self.culture_plate,\n            method='transfer_protocol',\n            duration=300\n        )\n\n        # Step 3: Read assay plate\n        self.robot_arm.move(self.assay_plate, target_loc=self.reader, lidded=False)\n        self.reader.single_read(self.assay_plate, method='fluorescence', duration=120)\n\n        # Step 4: Return plates\n        self.robot_arm.move(self.culture_plate, target_loc=self.storage, lidded=True)\n        self.robot_arm.move(self.assay_plate, target_loc=self.storage, lidded=True)\n</code></pre>"},{"location":"laborchestrator/writing-processes/#best-practices","title":"Best Practices","text":""},{"location":"laborchestrator/writing-processes/#1-use-descriptive-names","title":"1. Use Descriptive Names","text":"<pre><code># \u2705 Good\nself.culture_plate = ContainerResource(proc=self, name=\"culture_plate_1\")\nself.growth_incubator = IncubatorServiceResource(proc=self, name=\"Incubator1\")\n\n# \u274c Bad\nself.c1 = ContainerResource(proc=self, name=\"c1\")\nself.inc = IncubatorServiceResource(proc=self, name=\"Incubator1\")\n</code></pre>"},{"location":"laborchestrator/writing-processes/#2-set-container-priorities","title":"2. Set Container Priorities","text":"<p>For time-sensitive containers, set higher priority (lower number):</p> <pre><code>self.urgent_sample.priority = 1\nself.normal_sample.priority = 10\n</code></pre>"},{"location":"laborchestrator/writing-processes/#3-initialize-positions-carefully","title":"3. Initialize Positions Carefully","text":"<p>Always call <code>super().init_service_resources()</code> first:</p> <pre><code>def init_service_resources(self):\n    super().init_service_resources()  # Call this first\n    self.plate.set_start_position(self.storage, 0)\n</code></pre>"},{"location":"laborchestrator/writing-processes/#4-handle-lids-correctly","title":"4. Handle Lids Correctly","text":"<p>Remove lids before reading or liquid handling:</p> <pre><code># Before reading\nself.robot_arm.move(plate, target_loc=self.reader, lidded=False)\n\n# After reading, return with lid\nself.robot_arm.move(plate, target_loc=self.storage, lidded=True)\n</code></pre>"},{"location":"laborchestrator/writing-processes/#5-use-meaningful-durations","title":"5. Use Meaningful Durations","text":"<p>Use seconds for all durations:</p> <pre><code># \u2705 Good\nincubation_duration = 7200  # 2 hours in seconds\n\n# \u274c Bad\nincubation_duration = 120  # Unclear if minutes or seconds\n</code></pre>"},{"location":"laborchestrator/writing-processes/#6-comment-complex-logic","title":"6. Comment Complex Logic","text":"<pre><code>def process(self):\n    # Phase 1: Initial growth (overnight)\n    self.incubator.incubate(self.culture, duration=28800, temperature=310)\n\n    # Phase 2: Check growth via OD600\n    self.reader.single_read(self.culture, method='abs_600nm', duration=60)\n    od = self.reader.get_absorbance(self.culture)\n\n    # Phase 3: Conditional processing based on growth\n    if od &gt; 0.6:\n        # Sufficient growth, proceed with assay\n        self.liquid_handler.pipette(self.culture, method='dilution', duration=300)\n</code></pre>"},{"location":"laborchestrator/writing-processes/#adding-processes-to-orchestrator","title":"Adding Processes to Orchestrator","text":""},{"location":"laborchestrator/writing-processes/#from-python-file","title":"From Python File","text":"<pre><code>orchestrator.add_process(\n    file_path=\"path/to/process.py\",\n    name=\"MyProcess\"\n)\n</code></pre>"},{"location":"laborchestrator/writing-processes/#from-process-object","title":"From Process Object","text":"<pre><code>from my_processes import IncReadProcess\n\nprocess = IncReadProcess(priority=5)\norchestrator.add_process(\n    process_object=process,\n    name=\"IncubationWorkflow\"\n)\n</code></pre>"},{"location":"laborchestrator/writing-processes/#from-string-description","title":"From String Description","text":"<pre><code>process_code = '''\nfrom pythonlab.process import PLProcess\n# ... process definition\n'''\n\norchestrator.add_process(\n    description=process_code,\n    name=\"DynamicProcess\"\n)\n</code></pre>"},{"location":"laborchestrator/writing-processes/#with-delay","title":"With Delay","text":"<p>Start process after a delay:</p> <pre><code>orchestrator.add_process(\n    file_path=\"process.py\",\n    name=\"DelayedProcess\",\n    delay=60  # Start in 60 minutes\n)\n</code></pre>"},{"location":"laborchestrator/writing-processes/#running-processes","title":"Running Processes","text":"<pre><code># Add processes\norchestrator.add_process(file_path=\"process1.py\", name=\"Process1\")\norchestrator.add_process(file_path=\"process2.py\", name=\"Process2\")\n\n# Start specific processes\norchestrator.start_processes([\"Process1\", \"Process2\"])\n\n# Start all processes\norchestrator.start_processes(list(orchestrator.processes.keys()))\n\n# Check status\nfor name, process in orchestrator.processes.items():\n    print(f\"{name}: {process.state}\")\n</code></pre>"},{"location":"laborchestrator/writing-processes/#troubleshooting","title":"Troubleshooting","text":""},{"location":"laborchestrator/writing-processes/#common-errors","title":"Common Errors","text":"<p>Error: <code>Device not found: Incubator1</code></p> <p>Solution: Ensure device name matches lab configuration YAML</p> <p>Error: <code>Container position out of bounds</code></p> <p>Solution: Check storage capacity in lab configuration</p> <p>Error: <code>Minimum capacity not met for centrifuge</code></p> <p>Solution: Ensure enough containers are loaded (check <code>min_capacity</code>)</p>"},{"location":"laborchestrator/writing-processes/#see-also","title":"See Also","text":"<ul> <li>Configuration - Set up lab devices</li> <li>API Reference - Detailed method documentation</li> <li>SiLA Integration - Connect to physical devices</li> </ul>"},{"location":"platform-status-db/","title":"Platform Status DB Documentation","text":"<p>Platform Status DB is a Django-based database system designed for tracking and managing the status of robotic laboratory automation platforms. It implements the interface required by the laborchestrator package for process logging, container tracking, and device management.</p>"},{"location":"platform-status-db/#what-is-platform-status-db","title":"What is Platform Status DB?","text":"<p>Platform Status DB provides a centralized database for:</p> <ul> <li>Device Management: Track laboratory devices (robotic arms, plate readers, incubators, etc.) and their available positions</li> <li>Container Tracking: Monitor laboratory containers (plates, tubes, etc.) as they move through the platform</li> <li>Process Logging: Record process steps, experiments, and their execution details</li> <li>Duration Estimation: Predict process step durations based on historical data</li> <li>Web Interface: View and manage platform status through Django admin and custom views</li> </ul>"},{"location":"platform-status-db/#key-features","title":"Key Features","text":"<ul> <li>Real-time Container Tracking: Know the current location of every container on your platform</li> <li>Movement History: Full audit trail of all container movements</li> <li>Process Step Recording: Detailed logs of all operations with timing information</li> <li>Barcode Support: Track containers using barcode identifiers</li> <li>Lid Management: Track lidding/unlidding operations and lid locations</li> <li>Historical Analysis: Duration estimation for future operations based on past performance</li> <li>REST-like Interface: Programmatic access through Python API</li> <li>Web Dashboard: Visual interface for monitoring platform status</li> </ul>"},{"location":"platform-status-db/#architecture-overview","title":"Architecture Overview","text":"<p>The system consists of two main Django applications:</p> <ol> <li>larastatus: Core implementation and configuration</li> <li>Implements <code>StatusDBInterface</code> from laborchestrator</li> <li>Provides duration estimation capabilities</li> <li> <p>Django project configuration</p> </li> <li> <p>job_logs: Data models and web views</p> </li> <li>Database models for devices, containers, and processes</li> <li>Web views for visualizing platform status</li> <li>Django admin interface customization</li> </ol>"},{"location":"platform-status-db/#use-cases","title":"Use Cases","text":""},{"location":"platform-status-db/#laboratory-automation","title":"Laboratory Automation","text":"<p>Track containers through complex multi-step laboratory workflows, ensuring traceability and monitoring system utilization.</p>"},{"location":"platform-status-db/#process-optimization","title":"Process Optimization","text":"<p>Analyze historical data to identify bottlenecks and optimize workflow scheduling.</p>"},{"location":"platform-status-db/#compliance-and-auditing","title":"Compliance and Auditing","text":"<p>Maintain detailed logs of all operations for regulatory compliance and troubleshooting.</p>"},{"location":"platform-status-db/#integration-with-orchestration-systems","title":"Integration with Orchestration Systems","text":"<p>Provide real-time status information to laboratory orchestration systems for intelligent decision-making.</p>"},{"location":"platform-status-db/#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Getting Started: Installation, setup, and first steps</li> <li>Managing Devices: How to add and configure laboratory devices</li> <li>Managing Containers: Working with containers and tracking their movement</li> <li>API Reference: Complete reference for StatusDBImplementation methods</li> <li>Advanced Usage: Experiments, process tracking, and duration estimation</li> </ul>"},{"location":"platform-status-db/#quick-example","title":"Quick Example","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\nfrom laborchestrator import structures\n\n# Initialize the database\ndb = StatusDBImplementation()\n\n# Create lab from configuration file\ndb.create_lab_from_config(\"lab_config.yaml\")\n\n# Add a container\ncontainer_info = structures.ContainerInfo(\n    name=\"Plate001\",\n    current_device=\"RoboticArm1\",\n    current_pos=0,\n    barcode=\"BC12345\",\n    lidded=True,\n    filled=True\n)\ndb.add_container(container_info)\n\n# Track a movement\ndb.moved_container(\n    source_device=\"RoboticArm1\",\n    source_pos=0,\n    target_device=\"PlateReader\",\n    target_pos=1,\n    barcode=\"BC12345\"\n)\n\n# Query container location\ncontainer = db.get_cont_info_by_barcode(\"BC12345\")\nprint(f\"Container is at {container.current_device}, position {container.current_pos}\")\n</code></pre>"},{"location":"platform-status-db/#system-requirements","title":"System Requirements","text":"<ul> <li>Python 3.9 or higher</li> <li>Django 4.1+</li> <li>laborchestrator package (&lt;0.3)</li> <li>SQLite (default) or other Django-supported databases</li> </ul>"},{"location":"platform-status-db/#license","title":"License","text":"<p>MIT License - See LICENSE file for details.</p>"},{"location":"platform-status-db/#support","title":"Support","text":"<p>For issues and questions: - GitLab Issues: Platform Status DB Issues - Documentation: Online Documentation</p>"},{"location":"platform-status-db/advanced-usage/","title":"Advanced Usage","text":"<p>This guide covers advanced features of Platform Status DB including experiments, process tracking, duration estimation, and integration with laboratory orchestration systems.</p>"},{"location":"platform-status-db/advanced-usage/#experiments-and-processes","title":"Experiments and Processes","text":""},{"location":"platform-status-db/advanced-usage/#understanding-the-process-experiment-model","title":"Understanding the Process-Experiment Model","text":"<p>Platform Status DB uses a hierarchical model for tracking laboratory workflows:</p> <ul> <li>Process: A reusable workflow definition (template)</li> <li>Experiment: A specific execution instance of a process</li> <li>ProcessStep: Individual operations within an experiment</li> </ul> <pre><code>Process (Definition)\n  \u2514\u2500\u2500 Experiment 1 (Instance)\n       \u251c\u2500\u2500 ProcessStep 1\n       \u251c\u2500\u2500 ProcessStep 2\n       \u2514\u2500\u2500 ProcessStep 3\n  \u2514\u2500\u2500 Experiment 2 (Instance)\n       \u251c\u2500\u2500 ProcessStep 1\n       \u2514\u2500\u2500 ProcessStep 2\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#creating-a-process","title":"Creating a Process","text":"<p>A process represents a reusable workflow that can be executed multiple times:</p> <pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\ndb = StatusDBImplementation()\n\n# Define process source code or description\nprocess_code = \"\"\"\ndef cell_culture_assay(plate):\n    # Step 1: Add reagent\n    liquid_handler.dispense(plate, reagent='MTT', volume=50)\n\n    # Step 2: Incubate\n    incubator.incubate(plate, temperature=37, duration=4*3600)\n\n    # Step 3: Read absorbance\n    reader.read_absorbance(plate, wavelength=570)\n\"\"\"\n\n# Store process in database\nprocess_uuid = db.add_process_to_db(\n    name=\"Cell Viability Assay\",\n    src=process_code\n)\n\nprint(f\"Process created with UUID: {process_uuid}\")\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#listing-available-processes","title":"Listing Available Processes","text":"<pre><code>processes = db.get_available_processes()\n\nprint(\"Available Processes:\")\nfor name, uuid in processes:\n    print(f\"  {name}: {uuid}\")\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#retrieving-a-process","title":"Retrieving a Process","text":"<pre><code>process_uuid = \"123e4567-e89b-12d3-a456-426614174000\"\nprocess_code = db.get_process(process_uuid)\nprint(process_code)\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#creating-an-experiment","title":"Creating an Experiment","text":"<p>An experiment is a specific execution instance of a process:</p> <pre><code># Create experiment based on a process\nexperiment_uuid = db.create_experiment(process_uuid)\nprint(f\"Experiment created with UUID: {experiment_uuid}\")\n\n# Now you can execute process steps and associate them with this experiment\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#process-step-tracking","title":"Process Step Tracking","text":""},{"location":"platform-status-db/advanced-usage/#recording-basic-process-steps","title":"Recording Basic Process Steps","text":"<p>Track individual operations within an experiment:</p> <pre><code>from laborchestrator import structures\nfrom datetime import datetime\n\ndb = StatusDBImplementation()\n\n# Get container\ncontainer = db.get_cont_info_by_barcode(\"PLATE001\")\n\n# Create process step\nstep = structures.ProcessStep(\n    name=\"Read Absorbance\",\n    main_device=structures.DeviceInfo(name=\"PlateReader\"),\n    data={\n        \"fct\": \"absorbance\",\n        \"method\": \"endpoint\",\n        \"wavelength\": 450,\n        \"reads\": 3\n    }\n)\n\n# Record start time\nstep.start = datetime.now()\n\n# ... perform actual operation on physical device ...\n\n# Record finish time and status\nstep.finish = datetime.now()\nstep.status = \"completed\"\n\n# Save to database\ndb.safe_step_to_db(\n    step=step,\n    container_info=container,\n    experiment_uuid=experiment_uuid\n)\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#recording-movement-steps","title":"Recording Movement Steps","text":"<p>Movement steps are tracked with additional details:</p> <pre><code>from laborchestrator import structures\nfrom datetime import datetime\n\n# Create move step\nmove_step = structures.MoveStep(\n    name=\"Move to Reader\",\n    main_device=structures.DeviceInfo(name=\"RoboticArm\"),\n    origin_device=structures.DeviceInfo(name=\"Hamilton_STAR\"),\n    target_device=structures.DeviceInfo(name=\"PlateReader\"),\n    origin_pos=0,\n    destination_pos=0,\n    data={\"fct\": \"move\"}\n)\n\n# Record execution\nmove_step.start = datetime.now()\n\n# Perform movement in database\ndb.moved_container(\n    source_device=\"Hamilton_STAR\",\n    source_pos=0,\n    target_device=\"PlateReader\",\n    target_pos=0,\n    barcode=container.barcode\n)\n\nmove_step.finish = datetime.now()\nmove_step.status = \"completed\"\n\n# Save to database\ndb.safe_step_to_db(\n    step=move_step,\n    container_info=container,\n    experiment_uuid=experiment_uuid\n)\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#complete-experiment-example","title":"Complete Experiment Example","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\nfrom laborchestrator import structures\nfrom datetime import datetime\nimport time\n\ndb = StatusDBImplementation()\n\n# 1. Define and store process\nprocess_code = \"\"\"\nCell culture screening workflow:\n1. Prepare plates with cells\n2. Add compounds\n3. Incubate\n4. Read absorbance\n\"\"\"\n\nprocess_uuid = db.add_process_to_db(\n    name=\"Cell Screening\",\n    src=process_code\n)\n\n# 2. Create experiment instance\nexperiment_uuid = db.create_experiment(process_uuid)\nprint(f\"Running experiment: {experiment_uuid}\")\n\n# 3. Add container to platform\ncontainer_info = structures.ContainerInfo(\n    name=\"ScreenPlate_01\",\n    current_device=\"Hamilton_STAR\",\n    current_pos=0,\n    barcode=\"SCREEN_001\",\n    lidded=True,\n    filled=True\n)\ndb.add_container(container_info)\n\n# 4. Execute and log process steps\n\n# Step 1: Add compounds\nstep1 = structures.ProcessStep(\n    name=\"Add Compounds\",\n    main_device=structures.DeviceInfo(name=\"Hamilton_STAR\"),\n    data={\"fct\": \"dispense\", \"volume\": 50, \"reagent\": \"compound_library\"}\n)\nstep1.start = datetime.now()\ntime.sleep(2)  # Simulate operation\nstep1.finish = datetime.now()\nstep1.status = \"completed\"\ndb.safe_step_to_db(step1, container_info, experiment_uuid)\n\n# Step 2: Move to incubator\nmove_step = structures.MoveStep(\n    name=\"Move to Incubator\",\n    main_device=structures.DeviceInfo(name=\"RoboticArm\"),\n    origin_device=structures.DeviceInfo(name=\"Hamilton_STAR\"),\n    target_device=structures.DeviceInfo(name=\"Incubator\"),\n    origin_pos=0,\n    destination_pos=5,\n    data={\"fct\": \"move\"}\n)\nmove_step.start = datetime.now()\ndb.moved_container(\"Hamilton_STAR\", 0, \"Incubator\", 5, \"SCREEN_001\")\ncontainer_info = db.get_cont_info_by_barcode(\"SCREEN_001\")\nmove_step.finish = datetime.now()\nmove_step.status = \"completed\"\ndb.safe_step_to_db(move_step, container_info, experiment_uuid)\n\n# Step 3: Incubate\nstep3 = structures.ProcessStep(\n    name=\"Incubate\",\n    main_device=structures.DeviceInfo(name=\"Incubator\"),\n    data={\"fct\": \"incubate\", \"temperature\": 37, \"duration\": 14400}\n)\nstep3.start = datetime.now()\ntime.sleep(2)  # Simulate operation\nstep3.finish = datetime.now()\nstep3.status = \"completed\"\ndb.safe_step_to_db(step3, container_info, experiment_uuid)\n\n# Step 4: Move to reader\nmove_step2 = structures.MoveStep(\n    name=\"Move to Reader\",\n    main_device=structures.DeviceInfo(name=\"RoboticArm\"),\n    origin_device=structures.DeviceInfo(name=\"Incubator\"),\n    target_device=structures.DeviceInfo(name=\"PlateReader\"),\n    origin_pos=5,\n    destination_pos=0,\n    data={\"fct\": \"move\"}\n)\nmove_step2.start = datetime.now()\ndb.moved_container(\"Incubator\", 5, \"PlateReader\", 0, \"SCREEN_001\")\ncontainer_info = db.get_cont_info_by_barcode(\"SCREEN_001\")\nmove_step2.finish = datetime.now()\nmove_step2.status = \"completed\"\ndb.safe_step_to_db(move_step2, container_info, experiment_uuid)\n\n# Step 5: Read absorbance\nstep5 = structures.ProcessStep(\n    name=\"Read Absorbance\",\n    main_device=structures.DeviceInfo(name=\"PlateReader\"),\n    data={\"fct\": \"absorbance\", \"wavelength\": 570}\n)\nstep5.start = datetime.now()\ntime.sleep(2)  # Simulate operation\nstep5.finish = datetime.now()\nstep5.status = \"completed\"\ndb.safe_step_to_db(step5, container_info, experiment_uuid)\n\nprint(f\"Experiment {experiment_uuid} completed\")\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#duration-estimation","title":"Duration Estimation","text":"<p>Platform Status DB can estimate the duration of future operations based on historical data.</p>"},{"location":"platform-status-db/advanced-usage/#estimating-single-step-duration","title":"Estimating Single Step Duration","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\nfrom laborchestrator import structures\n\ndb = StatusDBImplementation()\n\n# Define a step to estimate\nstep = structures.ProcessStep(\n    name=\"Read Absorbance\",\n    main_device=structures.DeviceInfo(name=\"PlateReader\"),\n    data={\"fct\": \"absorbance\", \"method\": \"endpoint_570nm\"}\n)\n\n# Get duration estimate\nestimated_duration = db.get_estimated_duration(step, confidence=0.95)\n\nif estimated_duration:\n    print(f\"Estimated duration: {estimated_duration:.2f} seconds\")\n    print(f\"                   : {estimated_duration/60:.2f} minutes\")\nelse:\n    print(\"No historical data available for this step\")\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#estimating-multiple-steps","title":"Estimating Multiple Steps","text":"<pre><code>from laborchestrator import structures\n\ndb = StatusDBImplementation()\n\n# Define workflow steps\nsteps = [\n    structures.ProcessStep(\n        name=\"Dispense\",\n        main_device=structures.DeviceInfo(name=\"Hamilton_STAR\"),\n        data={\"fct\": \"dispense\", \"volume\": 50}\n    ),\n    structures.MoveStep(\n        name=\"Move to Reader\",\n        main_device=structures.DeviceInfo(name=\"RoboticArm\"),\n        origin_device=structures.DeviceInfo(name=\"Hamilton_STAR\"),\n        target_device=structures.DeviceInfo(name=\"PlateReader\"),\n        origin_pos=0,\n        destination_pos=0,\n        data={\"fct\": \"move\"}\n    ),\n    structures.ProcessStep(\n        name=\"Read\",\n        main_device=structures.DeviceInfo(name=\"PlateReader\"),\n        data={\"fct\": \"absorbance\", \"wavelength\": 450}\n    ),\n]\n\n# Get estimates for all steps\ndurations = db.get_estimated_durations(steps, confidence=0.95)\n\ntotal_estimated = 0\nfor i, (step, duration) in enumerate(zip(steps, durations)):\n    if duration:\n        print(f\"Step {i+1} ({step.name}): {duration:.2f}s\")\n        total_estimated += duration\n    else:\n        print(f\"Step {i+1} ({step.name}): No estimate\")\n\nprint(f\"\\nTotal estimated time: {total_estimated:.2f}s ({total_estimated/60:.2f} min)\")\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#how-duration-estimation-works","title":"How Duration Estimation Works","text":"<p>The duration estimator analyzes historical <code>ProcessStep</code> records and matches based on:</p> <ol> <li>Function name (<code>data['fct']</code>)</li> <li>Device types (for movement steps)</li> <li>Method parameters (for protocol steps)</li> <li>Arbitrary parameters (fallback matching)</li> </ol> <p>The estimator uses specialized \"historians\" for different step types: - MoveHistorian: Analyzes movement patterns between device pairs - ProtocolHistorian: Analyzes protocol executions with similar parameters - GeneralHistorian: Fallback for arbitrary step types</p> <p>Example: A movement from Hamilton_STAR to PlateReader will match historical movements between the same device pair and use the maximum observed duration.</p>"},{"location":"platform-status-db/advanced-usage/#querying-historical-data","title":"Querying Historical Data","text":""},{"location":"platform-status-db/advanced-usage/#query-process-steps","title":"Query Process Steps","text":"<pre><code>from platform_status_db.job_logs.models import ProcessStep, MoveStep\nfrom django.db.models import Avg, Min, Max, Count\n\n# Get all process steps\nall_steps = ProcessStep.objects.all()\nprint(f\"Total process steps logged: {all_steps.count()}\")\n\n# Get steps for a specific device\ndevice_steps = ProcessStep.objects.filter(\n    executing_device__lara_name=\"PlateReader\"\n)\nprint(f\"PlateReader operations: {device_steps.count()}\")\n\n# Calculate statistics\nstats = device_steps.aggregate(\n    avg_duration=Avg('finish') - Avg('start'),\n    min_duration=Min('finish') - Min('start'),\n    max_duration=Max('finish') - Max('start'),\n    total=Count('id')\n)\nprint(f\"Statistics: {stats}\")\n\n# Get movement steps only\nmove_steps = MoveStep.objects.all()\nfor move in move_steps[:10]:  # First 10 movements\n    duration = move.get_duration()\n    print(f\"{move.origin} -&gt; {move.destination}: {duration:.2f}s\")\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#query-experiments","title":"Query Experiments","text":"<pre><code>from platform_status_db.job_logs.models import Experiment, ProcessStep\n\n# Get all experiments\nexperiments = Experiment.objects.all()\n\nfor exp in experiments:\n    steps = ProcessStep.objects.filter(experiment=exp)\n    print(f\"\\nExperiment {exp.experiment_uuid}\")\n    print(f\"  Process: {exp.process.name}\")\n    print(f\"  Steps: {steps.count()}\")\n\n    # Calculate total duration\n    if steps.exists():\n        first_step = steps.order_by('start').first()\n        last_step = steps.order_by('-finish').first()\n        if first_step and last_step:\n            total_duration = (last_step.finish - first_step.start).total_seconds()\n            print(f\"  Duration: {total_duration:.2f}s ({total_duration/60:.2f} min)\")\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#analyze-container-history","title":"Analyze Container History","text":"<pre><code>from platform_status_db.job_logs.models import Container, ProcessStep\n\nbarcode = \"SCREEN_001\"\n\n# Get container\ncontainer = Container.objects.get(barcode=barcode, removed=False)\n\n# Get all steps involving this container\nsteps = ProcessStep.objects.filter(container=container).order_by('start')\n\nprint(f\"History for container {barcode}:\")\nprint(f\"  Starting position: {container.starting_pos}\")\nprint(f\"  Current position: {container.current_pos}\")\nprint(f\"\\nProcess steps:\")\n\nfor step in steps:\n    duration = step.get_duration()\n    print(f\"  [{step.start.strftime('%H:%M:%S')}] {step.process_name} \"\n          f\"on {step.executing_device.lara_name} ({duration:.2f}s)\")\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#integration-patterns","title":"Integration Patterns","text":""},{"location":"platform-status-db/advanced-usage/#integration-with-laborchestrator","title":"Integration with Laborchestrator","text":"<p>Platform Status DB is designed to work seamlessly with laborchestrator:</p> <pre><code>from laborchestrator.orchestrator import Orchestrator\nfrom platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\n# Create orchestrator with status DB\ndb = StatusDBImplementation()\norchestrator = Orchestrator(\n    config_file=\"lab_config.yaml\",\n    status_db=db\n)\n\n# The orchestrator will automatically:\n# - Track container movements\n# - Log process steps\n# - Update container states\n# - Estimate durations\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#custom-workflow-integration","title":"Custom Workflow Integration","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\nfrom laborchestrator import structures\nfrom datetime import datetime\n\nclass WorkflowManager:\n    def __init__(self, db: StatusDBImplementation):\n        self.db = db\n\n    def run_assay_workflow(self, plate_barcode: str, assay_config: dict):\n        # Create experiment\n        process_uuid = self.db.add_process_to_db(\n            name=assay_config['name'],\n            src=str(assay_config)\n        )\n        experiment_uuid = self.db.create_experiment(process_uuid)\n\n        # Get container\n        container = self.db.get_cont_info_by_barcode(plate_barcode)\n\n        # Execute workflow steps\n        for step_config in assay_config['steps']:\n            step = self._create_step(step_config, container)\n\n            # Estimate duration\n            estimated = self.db.get_estimated_duration(step)\n            if estimated:\n                print(f\"Estimated: {estimated:.2f}s\")\n\n            # Execute step\n            step.start = datetime.now()\n            self._execute_step(step, container)\n            step.finish = datetime.now()\n            step.status = \"completed\"\n\n            # Log to database\n            self.db.safe_step_to_db(step, container, experiment_uuid)\n\n            # Update container info if needed\n            if isinstance(step, structures.MoveStep):\n                container = self.db.get_cont_info_by_barcode(plate_barcode)\n\n        return experiment_uuid\n\n    def _create_step(self, config: dict, container) -&gt; structures.ProcessStep:\n        # Create step based on configuration\n        pass\n\n    def _execute_step(self, step: structures.ProcessStep, container):\n        # Execute on physical devices\n        pass\n\n# Usage\ndb = StatusDBImplementation()\nworkflow_mgr = WorkflowManager(db)\n\nassay_config = {\n    'name': 'Enzyme Assay',\n    'steps': [\n        {'type': 'dispense', 'device': 'Hamilton_STAR', 'volume': 50},\n        {'type': 'move', 'from': 'Hamilton_STAR', 'to': 'Incubator'},\n        {'type': 'incubate', 'device': 'Incubator', 'temp': 37, 'time': 3600},\n        {'type': 'move', 'from': 'Incubator', 'to': 'PlateReader'},\n        {'type': 'read', 'device': 'PlateReader', 'wavelength': 450},\n    ]\n}\n\nexperiment_uuid = workflow_mgr.run_assay_workflow(\"PLATE001\", assay_config)\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#rest-api-wrapper-example","title":"REST API Wrapper Example","text":"<p>Create a REST API around Platform Status DB:</p> <pre><code>from flask import Flask, jsonify, request\nfrom platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\nfrom laborchestrator import structures\n\napp = Flask(__name__)\ndb = StatusDBImplementation()\n\n@app.route('/api/containers/&lt;barcode&gt;', methods=['GET'])\ndef get_container(barcode):\n    container = db.get_cont_info_by_barcode(barcode)\n    if container:\n        return jsonify({\n            'barcode': container.barcode,\n            'device': container.current_device,\n            'position': container.current_pos,\n            'lidded': container.lidded\n        })\n    return jsonify({'error': 'Container not found'}), 404\n\n@app.route('/api/containers/&lt;barcode&gt;/move', methods=['POST'])\ndef move_container(barcode):\n    data = request.json\n    db.moved_container(\n        source_device=data['source_device'],\n        source_pos=data['source_pos'],\n        target_device=data['target_device'],\n        target_pos=data['target_pos'],\n        barcode=barcode\n    )\n    return jsonify({'status': 'success'})\n\n@app.route('/api/devices/&lt;device&gt;/positions', methods=['GET'])\ndef get_positions(device):\n    positions = db.get_all_positions(device)\n    status = []\n    for pos in positions:\n        is_empty = db.position_empty(device, pos)\n        container = None if is_empty else db.get_container_at_position(device, pos)\n        status.append({\n            'position': pos,\n            'empty': is_empty,\n            'container': container.barcode if container else None\n        })\n    return jsonify(status)\n\nif __name__ == '__main__':\n    app.run(debug=True, port=5000)\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#performance-optimization","title":"Performance Optimization","text":""},{"location":"platform-status-db/advanced-usage/#bulk-operations","title":"Bulk Operations","text":"<p>When adding many containers, use batch operations:</p> <pre><code>from django.db import transaction\nfrom platform_status_db.job_logs.models import Container, Position\n\n# Use transaction for atomic operations\nwith transaction.atomic():\n    for i in range(100):\n        position = Position.objects.get(device__lara_name=\"Storage\", slot_number=i)\n        Container.objects.create(\n            current_pos=position,\n            starting_pos=position,\n            barcode=f\"BATCH_{i:03d}\",\n            lidded=True,\n            labware_uuid=\"00000000-0000-0000-0000-000000000000\",\n            removed=False\n        )\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#caching-container-locations","title":"Caching Container Locations","text":"<p>For frequently accessed containers:</p> <pre><code>from functools import lru_cache\nfrom platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\nclass CachedStatusDB:\n    def __init__(self):\n        self.db = StatusDBImplementation()\n\n    @lru_cache(maxsize=1000)\n    def get_container_location(self, barcode: str):\n        container = self.db.get_cont_info_by_barcode(barcode)\n        return (container.current_device, container.current_pos) if container else None\n\n    def moved_container(self, *args, **kwargs):\n        # Clear cache on movement\n        self.get_container_location.cache_clear()\n        return self.db.moved_container(*args, **kwargs)\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#database-connection-pooling","title":"Database Connection Pooling","text":"<p>For production deployments with high concurrency, configure connection pooling in <code>settings.py</code>:</p> <pre><code>DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'platform_status',\n        'CONN_MAX_AGE': 600,  # Persistent connections\n        'OPTIONS': {\n            'connect_timeout': 10,\n        }\n    }\n}\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#best-practices","title":"Best Practices","text":""},{"location":"platform-status-db/advanced-usage/#process-step-logging","title":"Process Step Logging","text":"<ol> <li>Always set both <code>start</code> and <code>finish</code> times</li> <li>Use meaningful step names</li> <li>Include relevant parameters in <code>data</code> dict</li> <li>Set appropriate <code>status</code> values</li> <li>Log steps immediately after completion</li> </ol>"},{"location":"platform-status-db/advanced-usage/#experiment-organization","title":"Experiment Organization","text":"<ol> <li>Create processes for reusable workflows</li> <li>Create new experiment for each run</li> <li>Associate all steps with experiment UUID</li> <li>Use descriptive process names</li> <li>Store process source/description for reproducibility</li> </ol>"},{"location":"platform-status-db/advanced-usage/#duration-estimation_1","title":"Duration Estimation","text":"<ol> <li>Log sufficient historical data (at least 10 samples per operation type)</li> <li>Use consistent parameter structures for better matching</li> <li>Handle <code>None</code> estimates gracefully</li> <li>Add buffer time to estimates for scheduling</li> <li>Update estimates periodically as more data accumulates</li> </ol>"},{"location":"platform-status-db/advanced-usage/#error-handling","title":"Error Handling","text":"<pre><code>import logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\ntry:\n    db.safe_step_to_db(step, container, experiment_uuid)\nexcept Exception as e:\n    logging.error(f\"Failed to log step: {e}\")\n    # Continue workflow or retry\n</code></pre>"},{"location":"platform-status-db/advanced-usage/#next-steps","title":"Next Steps","text":"<ul> <li>API Reference: Complete method documentation</li> <li>Managing Devices: Device setup and configuration</li> <li>Managing Containers: Container tracking basics</li> </ul>"},{"location":"platform-status-db/api-reference/","title":"API Reference","text":"<p>This document provides a complete reference for the <code>StatusDBImplementation</code> class, which is the main API for interacting with Platform Status DB.</p>"},{"location":"platform-status-db/api-reference/#statusdbimplementation-class","title":"StatusDBImplementation Class","text":"<p>The <code>StatusDBImplementation</code> class implements the <code>StatusDBInterface</code> from the laborchestrator package, providing database operations for laboratory automation platforms.</p>"},{"location":"platform-status-db/api-reference/#import","title":"Import","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n</code></pre>"},{"location":"platform-status-db/api-reference/#initialization","title":"Initialization","text":"<pre><code>db = StatusDBImplementation(db_path=None)\n</code></pre> <p>Parameters: - <code>db_path</code> (str, optional): Path to the database directory. If not provided, uses the default Django database configuration.</p> <p>Returns: Instance of <code>StatusDBImplementation</code></p> <p>Example: <pre><code># Use default configuration\ndb = StatusDBImplementation()\n\n# Use custom path\ndb = StatusDBImplementation(db_path=\"/path/to/custom/db\")\n</code></pre></p>"},{"location":"platform-status-db/api-reference/#laboratory-configuration-methods","title":"Laboratory Configuration Methods","text":""},{"location":"platform-status-db/api-reference/#create_lab_from_config","title":"create_lab_from_config()","text":"<p>Creates laboratory devices and positions from a YAML configuration file.</p> <pre><code>db.create_lab_from_config(lab_config_file_path: str)\n</code></pre> <p>Parameters: - <code>lab_config_file_path</code> (str): Path to YAML configuration file</p> <p>Configuration File Format: <pre><code>sila_servers:\n  device_type_1:\n    DeviceName1:\n      capacity: 10\n      type: \"device_type\"\n  device_type_2:\n    DeviceName2:\n      capacity: 5\n      type: \"device_type\"\n</code></pre></p> <p>Example: <pre><code>db.create_lab_from_config(\"lab_config.yaml\")\n</code></pre></p> <p>See also: status_db_implementation.py:64</p>"},{"location":"platform-status-db/api-reference/#wipe_lab","title":"wipe_lab()","text":"<p>Removes all devices and marks all containers as removed. Use with caution!</p> <pre><code>db.wipe_lab()\n</code></pre> <p>Returns: None</p> <p>Example: <pre><code>db.wipe_lab()  # Clears entire laboratory configuration\n</code></pre></p> <p>See also: status_db_implementation.py:57</p>"},{"location":"platform-status-db/api-reference/#wipe_lara","title":"wipe_lara()","text":"<p>Alias for <code>wipe_lab()</code>. Deprecated, use <code>wipe_lab()</code> instead.</p> <pre><code>db.wipe_lara()\n</code></pre>"},{"location":"platform-status-db/api-reference/#device-methods","title":"Device Methods","text":""},{"location":"platform-status-db/api-reference/#get_all_positions","title":"get_all_positions()","text":"<p>Returns a list of all position indices for a given device.</p> <pre><code>db.get_all_positions(device: str) -&gt; List[int]\n</code></pre> <p>Parameters: - <code>device</code> (str): Name of the device (lara_name)</p> <p>Returns: List of integers representing position indices (0-indexed)</p> <p>Example: <pre><code>positions = db.get_all_positions(\"Hamilton_STAR\")\n# Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre></p> <p>See also: status_db_implementation.py:78</p>"},{"location":"platform-status-db/api-reference/#position_empty","title":"position_empty()","text":"<p>Checks if a specific position on a device is empty (no container or lid).</p> <pre><code>db.position_empty(device: str, pos: int) -&gt; bool\n</code></pre> <p>Parameters: - <code>device</code> (str): Name of the device - <code>pos</code> (int): Position index (0-indexed)</p> <p>Returns: <code>True</code> if position is empty, <code>False</code> if occupied</p> <p>Example: <pre><code>if db.position_empty(\"Hamilton_STAR\", 5):\n    print(\"Position is available\")\nelse:\n    print(\"Position is occupied\")\n</code></pre></p> <p>See also: status_db_implementation.py:115</p>"},{"location":"platform-status-db/api-reference/#container-methods","title":"Container Methods","text":""},{"location":"platform-status-db/api-reference/#add_container","title":"add_container()","text":"<p>Adds a new container to the database at its current position.</p> <pre><code>db.add_container(cont: structures.ContainerInfo)\n</code></pre> <p>Parameters: - <code>cont</code> (structures.ContainerInfo): Container information object from laborchestrator</p> <p>Returns: None</p> <p>Example: <pre><code>from laborchestrator import structures\n\ncontainer_info = structures.ContainerInfo(\n    name=\"Plate001\",\n    current_device=\"Hamilton_STAR\",\n    current_pos=0,\n    barcode=\"BC12345\",\n    lidded=True,\n    filled=True\n)\ndb.add_container(container_info)\n</code></pre></p> <p>See also: status_db_implementation.py:226</p>"},{"location":"platform-status-db/api-reference/#get_container_at_position","title":"get_container_at_position()","text":"<p>Retrieves container information at a specific position.</p> <pre><code>db.get_container_at_position(device: str, pos: int) -&gt; Optional[structures.ContainerInfo]\n</code></pre> <p>Parameters: - <code>device</code> (str): Name of the device - <code>pos</code> (int): Position index</p> <p>Returns: <code>ContainerInfo</code> object if container exists, <code>None</code> if position is empty</p> <p>Example: <pre><code>container = db.get_container_at_position(\"Hamilton_STAR\", 5)\nif container:\n    print(f\"Found: {container.barcode}\")\nelse:\n    print(\"Position is empty\")\n</code></pre></p> <p>See also: status_db_implementation.py:128</p>"},{"location":"platform-status-db/api-reference/#get_cont_info_by_barcode","title":"get_cont_info_by_barcode()","text":"<p>Retrieves container information by barcode.</p> <pre><code>db.get_cont_info_by_barcode(barcode: str) -&gt; structures.ContainerInfo\n</code></pre> <p>Parameters: - <code>barcode</code> (str): Barcode identifier</p> <p>Returns: <code>ContainerInfo</code> object</p> <p>Raises: May raise exception if container not found</p> <p>Example: <pre><code>container = db.get_cont_info_by_barcode(\"BC12345\")\nprint(f\"Container at: {container.current_device}[{container.current_pos}]\")\n</code></pre></p> <p>See also: status_db_implementation.py:207</p>"},{"location":"platform-status-db/api-reference/#moved_container","title":"moved_container()","text":"<p>Records a container movement from one position to another.</p> <pre><code>db.moved_container(\n    source_device: str,\n    source_pos: int,\n    target_device: str,\n    target_pos: int,\n    barcode: Optional[str] = None\n)\n</code></pre> <p>Parameters: - <code>source_device</code> (str): Source device name - <code>source_pos</code> (int): Source position index - <code>target_device</code> (str): Target device name - <code>target_pos</code> (int): Target position index - <code>barcode</code> (str, optional): Container barcode for verification (recommended if multiple containers at source)</p> <p>Returns: None</p> <p>Example: <pre><code>db.moved_container(\n    source_device=\"Hamilton_STAR\",\n    source_pos=0,\n    target_device=\"PlateReader\",\n    target_pos=0,\n    barcode=\"BC12345\"\n)\n</code></pre></p> <p>See also: status_db_implementation.py:149</p>"},{"location":"platform-status-db/api-reference/#remove_container","title":"remove_container()","text":"<p>Marks a container as removed from the platform (soft delete).</p> <pre><code>db.remove_container(cont: structures.ContainerInfo)\n</code></pre> <p>Parameters: - <code>cont</code> (structures.ContainerInfo): Container to remove</p> <p>Returns: None</p> <p>Example: <pre><code>container = db.get_cont_info_by_barcode(\"BC12345\")\ndb.remove_container(container)\n</code></pre></p> <p>See also: status_db_implementation.py:244</p>"},{"location":"platform-status-db/api-reference/#set_barcode","title":"set_barcode()","text":"<p>Updates the barcode of a container.</p> <pre><code>db.set_barcode(cont: structures.ContainerInfo)\n</code></pre> <p>Parameters: - <code>cont</code> (structures.ContainerInfo): Container with updated barcode</p> <p>Returns: None</p> <p>Example: <pre><code>container = db.get_container_at_position(\"Hamilton_STAR\", 0)\ncontainer.barcode = \"NEW_BC001\"\ndb.set_barcode(container)\n</code></pre></p> <p>See also: status_db_implementation.py:272</p>"},{"location":"platform-status-db/api-reference/#lid-management-methods","title":"Lid Management Methods","text":""},{"location":"platform-status-db/api-reference/#unlidded_container","title":"unlidded_container()","text":"<p>Records that a container's lid has been removed and placed at a specific location.</p> <pre><code>db.unlidded_container(\n    cont_info: structures.ContainerInfo,\n    lid_device: str,\n    lid_pos: int\n)\n</code></pre> <p>Parameters: - <code>cont_info</code> (structures.ContainerInfo): Container being unlidded - <code>lid_device</code> (str): Device where lid is placed - <code>lid_pos</code> (int): Position where lid is placed</p> <p>Returns: None</p> <p>Example: <pre><code>container = db.get_cont_info_by_barcode(\"BC12345\")\ndb.unlidded_container(\n    cont_info=container,\n    lid_device=\"Hamilton_STAR\",\n    lid_pos=10\n)\n</code></pre></p> <p>See also: status_db_implementation.py:177</p>"},{"location":"platform-status-db/api-reference/#lidded_container","title":"lidded_container()","text":"<p>Records that a container's lid has been replaced.</p> <pre><code>db.lidded_container(\n    cont_info: structures.ContainerInfo,\n    lid_device: Optional[str] = None,\n    lid_pos: Optional[int] = None\n)\n</code></pre> <p>Parameters: - <code>cont_info</code> (structures.ContainerInfo): Container being lidded - <code>lid_device</code> (str, optional): Device where lid was stored (for verification) - <code>lid_pos</code> (int, optional): Position where lid was stored (for verification)</p> <p>Returns: None</p> <p>Example: <pre><code>container = db.get_cont_info_by_barcode(\"BC12345\")\ndb.lidded_container(\n    cont_info=container,\n    lid_device=\"Hamilton_STAR\",\n    lid_pos=10\n)\n</code></pre></p> <p>See also: status_db_implementation.py:189</p>"},{"location":"platform-status-db/api-reference/#update_lid_position","title":"update_lid_position()","text":"<p>Updates the lid position information for a container.</p> <pre><code>db.update_lid_position(cont: structures.ContainerInfo)\n</code></pre> <p>Parameters: - <code>cont</code> (structures.ContainerInfo): Container with updated lid information</p> <p>Returns: None</p> <p>Example: <pre><code>container = db.get_cont_info_by_barcode(\"BC12345\")\ncontainer.lid_site = [\"LidStorage\", 5]\ncontainer.lidded = False\ndb.update_lid_position(container)\n</code></pre></p> <p>See also: status_db_implementation.py:280</p>"},{"location":"platform-status-db/api-reference/#process-and-experiment-methods","title":"Process and Experiment Methods","text":""},{"location":"platform-status-db/api-reference/#add_process_to_db","title":"add_process_to_db()","text":"<p>Adds a reusable process definition to the database.</p> <pre><code>db.add_process_to_db(name: str, src: str) -&gt; str\n</code></pre> <p>Parameters: - <code>name</code> (str): Name of the process - <code>src</code> (str): Source code or description of the process</p> <p>Returns: UUID string for the process</p> <p>Example: <pre><code>process_uuid = db.add_process_to_db(\n    name=\"Standard Assay\",\n    src=\"def standard_assay():\\n    ...\"\n)\nprint(f\"Process UUID: {process_uuid}\")\n</code></pre></p> <p>See also: status_db_implementation.py:83</p>"},{"location":"platform-status-db/api-reference/#get_available_processes","title":"get_available_processes()","text":"<p>Returns a list of all available processes in the database.</p> <pre><code>db.get_available_processes() -&gt; List[Tuple[str, str]]\n</code></pre> <p>Returns: List of tuples containing (process_name, process_uuid)</p> <p>Example: <pre><code>processes = db.get_available_processes()\nfor name, uuid in processes:\n    print(f\"{name}: {uuid}\")\n</code></pre></p> <p>See also: status_db_implementation.py:92</p>"},{"location":"platform-status-db/api-reference/#get_process","title":"get_process()","text":"<p>Retrieves the source code/description of a process by UUID.</p> <pre><code>db.get_process(process_id: str) -&gt; str\n</code></pre> <p>Parameters: - <code>process_id</code> (str): UUID of the process</p> <p>Returns: Source code or description string</p> <p>Example: <pre><code>process_code = db.get_process(\"123e4567-e89b-12d3-a456-426614174000\")\nprint(process_code)\n</code></pre></p> <p>See also: status_db_implementation.py:102</p>"},{"location":"platform-status-db/api-reference/#create_experiment","title":"create_experiment()","text":"<p>Creates a new experiment instance based on a process.</p> <pre><code>db.create_experiment(process_id: str) -&gt; str\n</code></pre> <p>Parameters: - <code>process_id</code> (str): UUID of the process to use</p> <p>Returns: UUID string for the experiment</p> <p>Example: <pre><code>experiment_uuid = db.create_experiment(process_uuid)\nprint(f\"Experiment UUID: {experiment_uuid}\")\n</code></pre></p> <p>See also: status_db_implementation.py:106</p>"},{"location":"platform-status-db/api-reference/#safe_step_to_db","title":"safe_step_to_db()","text":"<p>Saves a completed process step to the database.</p> <pre><code>db.safe_step_to_db(\n    step: structures.ProcessStep,\n    container_info: structures.ContainerInfo,\n    experiment_uuid: str\n)\n</code></pre> <p>Parameters: - <code>step</code> (structures.ProcessStep): The completed process step (must have start and finish times) - <code>container_info</code> (structures.ContainerInfo): Container involved in the step (can be None) - <code>experiment_uuid</code> (str): UUID of the experiment</p> <p>Returns: None</p> <p>Note: For <code>MoveStep</code> instances, creates a <code>MoveStep</code> database record. For other steps, creates a <code>ProcessStep</code> record.</p> <p>Example: <pre><code>from laborchestrator import structures\nfrom datetime import datetime\n\nstep = structures.ProcessStep(\n    name=\"Read Absorbance\",\n    main_device=structures.DeviceInfo(name=\"PlateReader\"),\n    data={\"fct\": \"absorbance\", \"wavelength\": 450}\n)\nstep.start = datetime.now()\n# ... perform operation ...\nstep.finish = datetime.now()\nstep.status = \"completed\"\n\ndb.safe_step_to_db(\n    step=step,\n    container_info=container,\n    experiment_uuid=experiment_uuid\n)\n</code></pre></p> <p>See also: status_db_implementation.py:368</p>"},{"location":"platform-status-db/api-reference/#duration-estimation-methods","title":"Duration Estimation Methods","text":""},{"location":"platform-status-db/api-reference/#get_estimated_duration","title":"get_estimated_duration()","text":"<p>Estimates the duration of a process step based on historical data.</p> <pre><code>db.get_estimated_duration(\n    step: structures.ProcessStep,\n    confidence: float = 0.95\n) -&gt; Optional[float]\n</code></pre> <p>Parameters: - <code>step</code> (structures.ProcessStep): The step to estimate - <code>confidence</code> (float): Confidence level (default 0.95)</p> <p>Returns: Estimated duration in seconds, or <code>None</code> if no historical data available</p> <p>Example: <pre><code>from laborchestrator import structures\n\nstep = structures.ProcessStep(\n    name=\"Read Absorbance\",\n    main_device=structures.DeviceInfo(name=\"PlateReader\"),\n    data={\"fct\": \"absorbance\", \"method\": \"450nm\"}\n)\n\nduration = db.get_estimated_duration(step)\nif duration:\n    print(f\"Estimated duration: {duration:.2f} seconds\")\nelse:\n    print(\"No historical data available\")\n</code></pre></p> <p>See also: status_db_implementation.py:296</p>"},{"location":"platform-status-db/api-reference/#get_estimated_durations","title":"get_estimated_durations()","text":"<p>Estimates durations for multiple process steps.</p> <pre><code>db.get_estimated_durations(\n    steps: List[structures.ProcessStep],\n    confidence: float = 0.95\n) -&gt; List[Optional[float]]\n</code></pre> <p>Parameters: - <code>steps</code> (List[structures.ProcessStep]): List of steps to estimate - <code>confidence</code> (float): Confidence level (default 0.95)</p> <p>Returns: List of estimated durations in seconds (None for steps without historical data)</p> <p>Example: <pre><code>steps = [step1, step2, step3]\ndurations = db.get_estimated_durations(steps)\n\nfor i, duration in enumerate(durations):\n    if duration:\n        print(f\"Step {i+1}: {duration:.2f}s\")\n    else:\n        print(f\"Step {i+1}: No estimate\")\n</code></pre></p> <p>See also: status_db_implementation.py:322</p>"},{"location":"platform-status-db/api-reference/#certificate-management-methods","title":"Certificate Management Methods","text":""},{"location":"platform-status-db/api-reference/#write_server_certificate","title":"write_server_certificate()","text":"<p>Stores an SSL/TLS certificate for a device.</p> <pre><code>db.write_server_certificate(device_name: str, cert: str) -&gt; None\n</code></pre> <p>Parameters: - <code>device_name</code> (str): Name of the device - <code>cert</code> (str): Certificate content (PEM format)</p> <p>Returns: None</p> <p>Example: <pre><code>with open(\"device_cert.pem\", \"r\") as f:\n    cert_content = f.read()\n\ndb.write_server_certificate(\"Hamilton_STAR\", cert_content)\n</code></pre></p> <p>See also: status_db_implementation.py:405</p>"},{"location":"platform-status-db/api-reference/#get_server_certificate","title":"get_server_certificate()","text":"<p>Retrieves the SSL/TLS certificate for a device.</p> <pre><code>db.get_server_certificate(device_name: str) -&gt; str\n</code></pre> <p>Parameters: - <code>device_name</code> (str): Name of the device</p> <p>Returns: Certificate content string, or None if not set</p> <p>Example: <pre><code>cert = db.get_server_certificate(\"Hamilton_STAR\")\nif cert:\n    with open(\"retrieved_cert.pem\", \"w\") as f:\n        f.write(cert)\n</code></pre></p> <p>See also: status_db_implementation.py:414</p>"},{"location":"platform-status-db/api-reference/#data-models","title":"Data Models","text":""},{"location":"platform-status-db/api-reference/#device","title":"Device","text":"<p>Represents a laboratory device.</p> <p>Fields: - <code>lara_name</code> (CharField): Unique device identifier - <code>num_slots</code> (IntegerField): Number of available positions - <code>lara_uri</code> (URLField): Network endpoint - <code>server_certificate</code> (TextField, nullable): SSL/TLS certificate</p> <p>See also: job_logs/models.py:4</p>"},{"location":"platform-status-db/api-reference/#position","title":"Position","text":"<p>Represents a position/slot on a device.</p> <p>Fields: - <code>device</code> (ForeignKey): Parent device - <code>slot_number</code> (IntegerField): Position index (0-indexed) - <code>deep_well_suited</code> (BooleanField): Whether position supports deep-well plates</p> <p>See also: job_logs/models.py:19</p>"},{"location":"platform-status-db/api-reference/#container","title":"Container","text":"<p>Represents a physical container (plate, tube, etc.).</p> <p>Fields: - <code>current_pos</code> (ForeignKey): Current position - <code>starting_pos</code> (ForeignKey): Original position - <code>barcode</code> (CharField): Barcode identifier - <code>lidded</code> (BooleanField): Whether lid is on - <code>lid_pos</code> (ForeignKey, nullable): Position of lid if removed - <code>removed</code> (BooleanField): Whether removed from platform - <code>labware_uuid</code> (UUIDField): Labware type identifier</p> <p>See also: job_logs/models.py:29</p>"},{"location":"platform-status-db/api-reference/#processstep","title":"ProcessStep","text":"<p>Represents a process step execution.</p> <p>Fields: - <code>start</code> (DateTimeField): Start time - <code>finish</code> (DateTimeField): Finish time - <code>executing_device</code> (ForeignKey): Device that executed the step - <code>container</code> (ForeignKey, nullable): Container involved - <code>experiment</code> (ForeignKey, nullable): Parent experiment - <code>process_name</code> (CharField): Name of the process - <code>is_simulation</code> (BooleanField): Whether this was a simulation - <code>parameters</code> (TextField): JSON string of parameters</p> <p>Methods: - <code>get_duration()</code>: Returns duration in seconds</p> <p>See also: job_logs/models.py:58</p>"},{"location":"platform-status-db/api-reference/#movestep","title":"MoveStep","text":"<p>Specialized ProcessStep for container movements.</p> <p>Inherits from: ProcessStep</p> <p>Additional Fields: - <code>origin</code> (ForeignKey): Source position - <code>destination</code> (ForeignKey): Target position - <code>lidded_before</code> (BooleanField): Lid status before move - <code>lidded_after</code> (BooleanField): Lid status after move - <code>barcode_read</code> (BooleanField): Whether barcode was read during move - <code>uri_format</code> (CharField): URI format used</p> <p>See also: job_logs/models.py:78</p>"},{"location":"platform-status-db/api-reference/#experiment","title":"Experiment","text":"<p>Represents an experiment execution.</p> <p>Fields: - <code>experiment_uuid</code> (UUIDField): Unique identifier - <code>process</code> (ForeignKey): Process definition used</p> <p>See also: job_logs/models.py:52</p>"},{"location":"platform-status-db/api-reference/#process","title":"Process","text":"<p>Represents a reusable process definition.</p> <p>Fields: - <code>name</code> (CharField): Process name - <code>pythonlab_description</code> (TextField): Source code or description - <code>process_uuid</code> (UUIDField): Unique identifier</p> <p>See also: job_logs/models.py:45</p>"},{"location":"platform-status-db/api-reference/#error-handling","title":"Error Handling","text":"<p>Most methods will log errors and warnings but may not raise exceptions. Check return values and logs for error details.</p> <p>Example error handling pattern: <pre><code>import logging\n\n# Enable logging\nlogging.basicConfig(level=logging.INFO)\n\n# Perform operations\ntry:\n    container = db.get_cont_info_by_barcode(\"BC12345\")\n    if container:\n        db.moved_container(\"Device1\", 0, \"Device2\", 0, \"BC12345\")\n    else:\n        logging.error(\"Container not found\")\nexcept Exception as e:\n    logging.error(f\"Operation failed: {e}\")\n</code></pre></p>"},{"location":"platform-status-db/api-reference/#next-steps","title":"Next Steps","text":"<ul> <li>Managing Devices: Device configuration guide</li> <li>Managing Containers: Container tracking guide</li> <li>Advanced Usage: Experiments and duration estimation</li> </ul>"},{"location":"platform-status-db/getting-started/","title":"Getting Started","text":"<p>This guide will help you install and set up Platform Status DB for your laboratory automation system.</p>"},{"location":"platform-status-db/getting-started/#installation","title":"Installation","text":""},{"location":"platform-status-db/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>pip package manager</li> <li>Git (for cloning the repository)</li> </ul>"},{"location":"platform-status-db/getting-started/#install-from-gitlab","title":"Install from GitLab","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://gitlab.com/OpenLabAutomation/lab-automation-packages/platform_status_db.git\ncd platform_status_db\n</code></pre> <ol> <li>Install the package:</li> </ol> <pre><code>pip install -e .\n</code></pre> <ol> <li>Install the laborchestrator dependency:</li> </ol> <pre><code>pip install --index-url https://gitlab.com/api/v4/projects/70366855/packages/pypi/simple \"laborchestrator&lt;0.3\"\n</code></pre>"},{"location":"platform-status-db/getting-started/#verify-installation","title":"Verify Installation","text":"<p>Check that the installation was successful:</p> <pre><code>python -c \"from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation; print('Installation successful!')\"\n</code></pre>"},{"location":"platform-status-db/getting-started/#initial-setup","title":"Initial Setup","text":""},{"location":"platform-status-db/getting-started/#1-initialize-the-database","title":"1. Initialize the Database","text":"<p>Apply Django migrations to create the database schema:</p> <pre><code>python src/platform_status_db/manage.py makemigrations\npython src/platform_status_db/manage.py migrate\n</code></pre> <p>This creates a SQLite database file at <code>src/platform_status_db/db.sqlite3</code>.</p>"},{"location":"platform-status-db/getting-started/#2-create-an-admin-user","title":"2. Create an Admin User","text":"<p>To access the Django admin interface, create a superuser:</p> <pre><code>python src/platform_status_db/manage.py createsuperuser\n</code></pre> <p>You'll be prompted to enter: - Username - Email address - Password (entered twice)</p>"},{"location":"platform-status-db/getting-started/#3-start-the-server","title":"3. Start the Server","text":"<p>Start the development server:</p> <pre><code>run_db_server\n</code></pre> <p>Or alternatively:</p> <pre><code>python src/platform_status_db/manage.py runserver\n</code></pre> <p>The server will start on <code>http://127.0.0.1:8000/</code> by default.</p>"},{"location":"platform-status-db/getting-started/#accessing-the-web-interface","title":"Accessing the Web Interface","text":""},{"location":"platform-status-db/getting-started/#admin-interface","title":"Admin Interface","text":"<p>Navigate to http://127.0.0.1:8000/admin/ and log in with the superuser credentials you created.</p> <p>From the admin interface, you can: - Add and manage devices - View containers and their locations - Browse process steps and experiments - Manually edit database records</p>"},{"location":"platform-status-db/getting-started/#job-logs-interface","title":"Job Logs Interface","text":"<p>Navigate to http://127.0.0.1:8000/job_logs/ to view: - Device list and status - Container locations - Process history - Movement tracking</p>"},{"location":"platform-status-db/getting-started/#configuring-your-laboratory","title":"Configuring Your Laboratory","text":""},{"location":"platform-status-db/getting-started/#option-1-using-a-configuration-file-recommended","title":"Option 1: Using a Configuration File (Recommended)","text":"<p>Create a YAML configuration file describing your laboratory setup:</p> <pre><code># lab_config.yaml\nsila_servers:\n  robotic_arms:\n    RoboticArm1:\n      capacity: 10\n      type: \"robot\"\n    RoboticArm2:\n      capacity: 8\n      type: \"robot\"\n\n  readers:\n    PlateReader1:\n      capacity: 1\n      type: \"reader\"\n    BarcodeReader:\n      capacity: 1\n      type: \"reader\"\n\n  incubators:\n    Incubator1:\n      capacity: 20\n      type: \"incubator\"\n</code></pre> <p>Then load it programmatically:</p> <pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\ndb = StatusDBImplementation()\ndb.create_lab_from_config(\"lab_config.yaml\")\n</code></pre>"},{"location":"platform-status-db/getting-started/#option-2-manual-configuration-via-admin-interface","title":"Option 2: Manual Configuration via Admin Interface","text":"<ol> <li>Go to http://127.0.0.1:8000/admin/</li> <li>Click on \"Devices\" under JOB_LOGS</li> <li>Click \"Add Device\" in the top right</li> <li>Fill in the device details:</li> <li>Lara name: Unique identifier for the device</li> <li>Num slots: Number of positions/slots available</li> <li>Lara uri: URL endpoint for the device (e.g., <code>http://192.168.1.100:50051</code>)</li> <li>Click \"Save\"</li> </ol> <p>Positions are automatically created based on the number of slots.</p>"},{"location":"platform-status-db/getting-started/#option-3-programmatic-configuration","title":"Option 3: Programmatic Configuration","text":"<pre><code>from platform_status_db.job_logs.models import Device, Position\n\n# Create a device\ndevice = Device.objects.create(\n    lara_name=\"RoboticArm1\",\n    num_slots=10,\n    lara_uri=\"http://192.168.1.100:50051\"\n)\n\n# Create positions (if not auto-created)\nfor i in range(device.num_slots):\n    Position.objects.create(\n        device=device,\n        slot_number=i,\n        deep_well_suited=False\n    )\n</code></pre>"},{"location":"platform-status-db/getting-started/#first-steps-with-the-api","title":"First Steps with the API","text":""},{"location":"platform-status-db/getting-started/#initialize-the-status-db","title":"Initialize the Status DB","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\n# Create instance\ndb = StatusDBImplementation()\n</code></pre>"},{"location":"platform-status-db/getting-started/#add-a-container","title":"Add a Container","text":"<pre><code>from laborchestrator import structures\n\ncontainer_info = structures.ContainerInfo(\n    name=\"TestPlate1\",\n    current_device=\"RoboticArm1\",\n    current_pos=0,\n    barcode=\"PLATE001\",\n    lidded=True,\n    filled=True\n)\n\ndb.add_container(container_info)\n</code></pre>"},{"location":"platform-status-db/getting-started/#check-if-a-position-is-empty","title":"Check if a Position is Empty","text":"<pre><code>is_empty = db.position_empty(device=\"RoboticArm1\", pos=0)\nprint(f\"Position is empty: {is_empty}\")  # False, we just added a container\n</code></pre>"},{"location":"platform-status-db/getting-started/#get-container-information","title":"Get Container Information","text":"<pre><code>container = db.get_container_at_position(device=\"RoboticArm1\", pos=0)\nprint(f\"Container barcode: {container.barcode}\")\nprint(f\"Container is lidded: {container.lidded}\")\n</code></pre>"},{"location":"platform-status-db/getting-started/#move-a-container","title":"Move a Container","text":"<pre><code>db.moved_container(\n    source_device=\"RoboticArm1\",\n    source_pos=0,\n    target_device=\"PlateReader1\",\n    target_pos=0,\n    barcode=\"PLATE001\"\n)\n</code></pre>"},{"location":"platform-status-db/getting-started/#configuration-options","title":"Configuration Options","text":""},{"location":"platform-status-db/getting-started/#database-settings","title":"Database Settings","text":"<p>By default, the system uses SQLite. To use a different database, edit <code>src/platform_status_db/larastatus/settings.py</code>:</p> <pre><code>DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": \"platform_status\",\n        \"USER\": \"dbuser\",\n        \"PASSWORD\": \"dbpassword\",\n        \"HOST\": \"localhost\",\n        \"PORT\": \"5432\",\n    }\n}\n</code></pre>"},{"location":"platform-status-db/getting-started/#timezone-configuration","title":"Timezone Configuration","text":"<p>The default timezone is <code>Europe/Berlin</code>. To change it, edit <code>settings.py</code>:</p> <pre><code>TIME_ZONE = \"UTC\"  # or any other timezone\n</code></pre>"},{"location":"platform-status-db/getting-started/#production-deployment","title":"Production Deployment","text":"<p>Important: The default settings are for development only. For production:</p> <ol> <li>Change <code>DEBUG = False</code> in <code>settings.py</code></li> <li>Set a secure <code>SECRET_KEY</code></li> <li>Configure <code>ALLOWED_HOSTS</code></li> <li>Use a production database (PostgreSQL, MySQL, etc.)</li> <li>Use a production WSGI server (Gunicorn, uWSGI)</li> <li>Set up static file serving</li> </ol> <p>See Django's deployment checklist for details.</p>"},{"location":"platform-status-db/getting-started/#testing-your-setup","title":"Testing Your Setup","text":"<p>Run the included tests to verify everything is working:</p> <pre><code>pytest\n</code></pre>"},{"location":"platform-status-db/getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Managing Devices: Learn how to add and configure devices</li> <li>Managing Containers: Understand container tracking and movement</li> <li>API Reference: Explore all available methods</li> <li>Advanced Usage: Work with experiments and process tracking</li> </ul>"},{"location":"platform-status-db/getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"platform-status-db/getting-started/#importerror-no-module-named-django","title":"ImportError: No module named 'django'","text":"<p>Make sure Django is installed: <pre><code>pip install django\n</code></pre></p>"},{"location":"platform-status-db/getting-started/#importerror-no-module-named-laborchestrator","title":"ImportError: No module named 'laborchestrator'","text":"<p>Install the laborchestrator package: <pre><code>pip install --index-url https://gitlab.com/api/v4/projects/70366855/packages/pypi/simple \"laborchestrator&lt;0.3\"\n</code></pre></p>"},{"location":"platform-status-db/getting-started/#database-migration-errors","title":"Database Migration Errors","text":"<p>If you encounter migration errors, try: <pre><code># Reset migrations (WARNING: This will delete all data)\nrm src/platform_status_db/db.sqlite3\npython src/platform_status_db/manage.py migrate\n</code></pre></p>"},{"location":"platform-status-db/getting-started/#server-wont-start","title":"Server Won't Start","text":"<p>Check if another process is using port 8000: <pre><code># Use a different port\npython src/platform_status_db/manage.py runserver 8001\n</code></pre></p>"},{"location":"platform-status-db/getting-started/#additional-resources","title":"Additional Resources","text":"<ul> <li>Django Documentation</li> <li>laborchestrator Documentation</li> <li>Project Repository</li> </ul>"},{"location":"platform-status-db/managing-containers/","title":"Managing Containers","text":"<p>Containers represent physical labware (plates, tubes, racks, etc.) that move through your laboratory automation platform. Platform Status DB tracks each container's location, barcode, lid status, and movement history.</p>"},{"location":"platform-status-db/managing-containers/#understanding-containers","title":"Understanding Containers","text":""},{"location":"platform-status-db/managing-containers/#container-model","title":"Container Model","text":"<p>A container in Platform Status DB has the following properties:</p> <ul> <li>current_pos: Current position on the platform (device + slot number)</li> <li>starting_pos: Original position where the container was first placed</li> <li>barcode: Unique barcode identifier (string)</li> <li>lidded: Whether the container currently has its lid on (boolean)</li> <li>lid_pos: Location of the lid if currently removed (can be null)</li> <li>removed: Whether the container has been removed from the platform (boolean)</li> <li>labware_uuid: UUID identifier for the labware type</li> </ul>"},{"location":"platform-status-db/managing-containers/#containerinfo-structure","title":"ContainerInfo Structure","text":"<p>When working with the API, you'll use the <code>ContainerInfo</code> structure from laborchestrator:</p> <pre><code>from laborchestrator import structures\n\ncontainer_info = structures.ContainerInfo(\n    name=\"MyPlate\",                    # Friendly name\n    current_device=\"Hamilton_STAR\",     # Device name\n    current_pos=5,                      # Slot number (0-indexed)\n    barcode=\"PLATE12345\",               # Barcode identifier\n    start_device=\"Hamilton_STAR\",       # Starting device (optional)\n    lidded=True,                        # Whether lid is on\n    filled=True,                        # Whether container has contents\n    lid_site=None                       # [device, pos] if lid is off, else None\n)\n</code></pre>"},{"location":"platform-status-db/managing-containers/#adding-containers-to-the-database","title":"Adding Containers to the Database","text":""},{"location":"platform-status-db/managing-containers/#basic-container-addition","title":"Basic Container Addition","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\nfrom laborchestrator import structures\n\ndb = StatusDBImplementation()\n\n# Create container info\ncontainer_info = structures.ContainerInfo(\n    name=\"Plate001\",\n    current_device=\"Hamilton_STAR\",\n    current_pos=0,\n    barcode=\"BC001\",\n    lidded=True,\n    filled=True\n)\n\n# Add to database\ndb.add_container(container_info)\n</code></pre> <p>What happens: - A <code>Container</code> record is created in the database - Both <code>current_pos</code> and <code>starting_pos</code> are set to the same position - The container is marked as not removed (<code>removed=False</code>)</p>"},{"location":"platform-status-db/managing-containers/#adding-multiple-containers","title":"Adding Multiple Containers","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\nfrom laborchestrator import structures\n\ndb = StatusDBImplementation()\n\n# Add containers to different positions\ncontainers = [\n    (\"PLATE001\", \"Hamilton_STAR\", 0),\n    (\"PLATE002\", \"Hamilton_STAR\", 1),\n    (\"PLATE003\", \"Incubator\", 0),\n    (\"PLATE004\", \"Incubator\", 1),\n]\n\nfor barcode, device, pos in containers:\n    container_info = structures.ContainerInfo(\n        name=f\"Sample_{barcode}\",\n        current_device=device,\n        current_pos=pos,\n        barcode=barcode,\n        lidded=True,\n        filled=True\n    )\n    db.add_container(container_info)\n    print(f\"Added {barcode} at {device}[{pos}]\")\n</code></pre>"},{"location":"platform-status-db/managing-containers/#adding-containers-via-django-orm","title":"Adding Containers via Django ORM","text":"<p>For direct database manipulation:</p> <pre><code>from platform_status_db.job_logs.models import Container, Position\n\n# Find the position\nposition = Position.objects.get(\n    device__lara_name=\"Hamilton_STAR\",\n    slot_number=5\n)\n\n# Create container\ncontainer = Container.objects.create(\n    current_pos=position,\n    starting_pos=position,\n    barcode=\"DIRECT_BC001\",\n    lidded=True,\n    labware_uuid=\"00000000-0000-0000-0000-000000000000\",\n    removed=False\n)\n</code></pre>"},{"location":"platform-status-db/managing-containers/#querying-containers","title":"Querying Containers","text":""},{"location":"platform-status-db/managing-containers/#get-container-by-barcode","title":"Get Container by Barcode","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\ndb = StatusDBImplementation()\n\n# Get container information\ncontainer = db.get_cont_info_by_barcode(\"BC001\")\n\nif container:\n    print(f\"Container {container.barcode}\")\n    print(f\"  Location: {container.current_device}[{container.current_pos}]\")\n    print(f\"  Lidded: {container.lidded}\")\n    print(f\"  Lid location: {container.lid_site}\")\nelse:\n    print(\"Container not found\")\n</code></pre>"},{"location":"platform-status-db/managing-containers/#get-container-at-position","title":"Get Container at Position","text":"<pre><code>db = StatusDBImplementation()\n\n# Check what's at a specific position\ncontainer = db.get_container_at_position(\n    device=\"Hamilton_STAR\",\n    pos=5\n)\n\nif container:\n    print(f\"Found container: {container.barcode}\")\nelse:\n    print(\"Position is empty\")\n</code></pre>"},{"location":"platform-status-db/managing-containers/#check-if-position-is-empty","title":"Check if Position is Empty","text":"<pre><code>db = StatusDBImplementation()\n\nif db.position_empty(device=\"Hamilton_STAR\", pos=5):\n    print(\"Position is available\")\nelse:\n    print(\"Position is occupied\")\n</code></pre>"},{"location":"platform-status-db/managing-containers/#query-all-containers","title":"Query All Containers","text":"<pre><code>from platform_status_db.job_logs.models import Container\n\n# Get all active containers (not removed)\nactive_containers = Container.objects.filter(removed=False)\n\nfor container in active_containers:\n    print(f\"{container.barcode} at {container.current_pos}\")\n\n# Get all containers (including removed)\nall_containers = Container.objects.all()\nprint(f\"Total containers ever tracked: {all_containers.count()}\")\n</code></pre>"},{"location":"platform-status-db/managing-containers/#query-containers-by-device","title":"Query Containers by Device","text":"<pre><code>from platform_status_db.job_logs.models import Container\n\n# Get all containers on a specific device\ndevice_name = \"Hamilton_STAR\"\ncontainers = Container.objects.filter(\n    current_pos__device__lara_name=device_name,\n    removed=False\n)\n\nprint(f\"Containers on {device_name}:\")\nfor container in containers:\n    print(f\"  {container.barcode} at position {container.current_pos.slot_number}\")\n</code></pre>"},{"location":"platform-status-db/managing-containers/#moving-containers","title":"Moving Containers","text":""},{"location":"platform-status-db/managing-containers/#basic-movement","title":"Basic Movement","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\ndb = StatusDBImplementation()\n\n# Move container from one position to another\ndb.moved_container(\n    source_device=\"Hamilton_STAR\",\n    source_pos=0,\n    target_device=\"PlateReader\",\n    target_pos=0,\n    barcode=\"BC001\"  # Optional but recommended if multiple containers at source\n)\n</code></pre> <p>What happens: - The container's <code>current_pos</code> is updated to the new position - The <code>starting_pos</code> remains unchanged (preserves origin) - Movement is logged (when integrated with process tracking)</p>"},{"location":"platform-status-db/managing-containers/#movement-without-barcode","title":"Movement Without Barcode","text":"<p>If you're certain there's only one container at the source position:</p> <pre><code>db.moved_container(\n    source_device=\"Hamilton_STAR\",\n    source_pos=0,\n    target_device=\"PlateReader\",\n    target_pos=0\n    # barcode parameter omitted\n)\n</code></pre> <p>Warning: If multiple containers are at the source position, this will raise an error. Always use barcode when possible.</p>"},{"location":"platform-status-db/managing-containers/#complex-movement-workflow","title":"Complex Movement Workflow","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\ndb = StatusDBImplementation()\n\n# 1. Check if source has a container\nsource_container = db.get_container_at_position(\"Hamilton_STAR\", 0)\nif not source_container:\n    print(\"No container at source position\")\n    exit(1)\n\n# 2. Check if destination is empty\nif not db.position_empty(\"PlateReader\", 0):\n    print(\"Destination position is occupied\")\n    exit(1)\n\n# 3. Perform the move\ndb.moved_container(\n    source_device=\"Hamilton_STAR\",\n    source_pos=0,\n    target_device=\"PlateReader\",\n    target_pos=0,\n    barcode=source_container.barcode\n)\n\n# 4. Verify the move\nmoved_container = db.get_container_at_position(\"PlateReader\", 0)\nprint(f\"Successfully moved {moved_container.barcode}\")\n</code></pre>"},{"location":"platform-status-db/managing-containers/#tracking-movement-history","title":"Tracking Movement History","text":"<p>Movement history is captured through <code>ProcessStep</code> and <code>MoveStep</code> records when you log process steps:</p> <pre><code>from laborchestrator import structures\nfrom datetime import datetime\n\n# Create a move step structure\nmove_step = structures.MoveStep(\n    name=\"Move to reader\",\n    main_device=structures.DeviceInfo(name=\"Hamilton_STAR\"),\n    origin_device=structures.DeviceInfo(name=\"Hamilton_STAR\"),\n    target_device=structures.DeviceInfo(name=\"PlateReader\"),\n    origin_pos=0,\n    destination_pos=0,\n    data={\"fct\": \"move\"}\n)\n\n# Set timing\nmove_step.start = datetime.now()\n# ... perform actual movement ...\nmove_step.finish = datetime.now()\nmove_step.status = \"completed\"\n\n# Log to database\ndb.safe_step_to_db(\n    step=move_step,\n    container_info=source_container,\n    experiment_uuid=experiment_uuid\n)\n</code></pre>"},{"location":"platform-status-db/managing-containers/#managing-lids","title":"Managing Lids","text":""},{"location":"platform-status-db/managing-containers/#remove-lid-unlidding","title":"Remove Lid (Unlidding)","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\ndb = StatusDBImplementation()\n\n# Get container info\ncontainer = db.get_cont_info_by_barcode(\"BC001\")\n\n# Unlid and place lid at a position\ndb.unlidded_container(\n    cont_info=container,\n    lid_device=\"Hamilton_STAR\",\n    lid_pos=10  # Lid storage position\n)\n\n# Verify\nupdated_container = db.get_cont_info_by_barcode(\"BC001\")\nprint(f\"Lidded: {updated_container.lidded}\")  # False\nprint(f\"Lid location: {updated_container.lid_site}\")  # [\"Hamilton_STAR\", 10]\n</code></pre>"},{"location":"platform-status-db/managing-containers/#replace-lid-lidding","title":"Replace Lid (Lidding)","text":"<pre><code>db = StatusDBImplementation()\n\n# Get container info\ncontainer = db.get_cont_info_by_barcode(\"BC001\")\n\n# Put lid back on (optionally verify lid location)\ndb.lidded_container(\n    cont_info=container,\n    lid_device=\"Hamilton_STAR\",  # Optional verification\n    lid_pos=10                    # Optional verification\n)\n\n# Verify\nupdated_container = db.get_cont_info_by_barcode(\"BC001\")\nprint(f\"Lidded: {updated_container.lidded}\")  # True\nprint(f\"Lid location: {updated_container.lid_site}\")  # None\n</code></pre>"},{"location":"platform-status-db/managing-containers/#update-lid-position","title":"Update Lid Position","text":"<p>If the lid is moved while removed:</p> <pre><code>db = StatusDBImplementation()\n\ncontainer = db.get_cont_info_by_barcode(\"BC001\")\n\n# Update lid position\ncontainer.lid_site = [\"LidStorage\", 0]\ncontainer.lidded = False\n\ndb.update_lid_position(container)\n</code></pre>"},{"location":"platform-status-db/managing-containers/#updating-container-information","title":"Updating Container Information","text":""},{"location":"platform-status-db/managing-containers/#update-barcode","title":"Update Barcode","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\ndb = StatusDBImplementation()\n\n# Get container\ncontainer = db.get_container_at_position(\"Hamilton_STAR\", 0)\n\n# Update barcode\ncontainer.barcode = \"NEW_BC001\"\ndb.set_barcode(container)\n</code></pre>"},{"location":"platform-status-db/managing-containers/#update-container-via-django-orm","title":"Update Container via Django ORM","text":"<pre><code>from platform_status_db.job_logs.models import Container\n\n# Get container\ncontainer = Container.objects.get(barcode=\"BC001\", removed=False)\n\n# Update properties\ncontainer.barcode = \"UPDATED_BC001\"\ncontainer.lidded = False\ncontainer.save()\n</code></pre>"},{"location":"platform-status-db/managing-containers/#removing-containers","title":"Removing Containers","text":""},{"location":"platform-status-db/managing-containers/#soft-delete-recommended","title":"Soft Delete (Recommended)","text":"<p>Mark a container as removed without deleting its history:</p> <pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\ndb = StatusDBImplementation()\n\n# Get container info\ncontainer = db.get_cont_info_by_barcode(\"BC001\")\n\n# Remove from platform\ndb.remove_container(container)\n\n# Container is marked as removed=True but stays in database\n# History is preserved for auditing\n</code></pre>"},{"location":"platform-status-db/managing-containers/#check-removed-status","title":"Check Removed Status","text":"<pre><code>from platform_status_db.job_logs.models import Container\n\ncontainer = Container.objects.get(barcode=\"BC001\")\nif container.removed:\n    print(\"Container has been removed from platform\")\nelse:\n    print(\"Container is active on platform\")\n</code></pre>"},{"location":"platform-status-db/managing-containers/#hard-delete-not-recommended","title":"Hard Delete (Not Recommended)","text":"<p>Completely delete a container record:</p> <pre><code>from platform_status_db.job_logs.models import Container\n\ncontainer = Container.objects.get(barcode=\"BC001\")\ncontainer.delete()  # WARNING: Permanently deletes all history\n</code></pre>"},{"location":"platform-status-db/managing-containers/#remove-all-containers-from-a-device","title":"Remove All Containers from a Device","text":"<pre><code>from platform_status_db.job_logs.models import Container, Position\n\ndevice_name = \"Hamilton_STAR\"\npositions = Position.objects.filter(device__lara_name=device_name)\n\nfor position in positions:\n    containers = Container.objects.filter(\n        current_pos=position,\n        removed=False\n    )\n    for container in containers:\n        container.removed = True\n        container.save()\n</code></pre>"},{"location":"platform-status-db/managing-containers/#common-workflows","title":"Common Workflows","text":""},{"location":"platform-status-db/managing-containers/#workflow-1-load-containers-onto-platform","title":"Workflow 1: Load Containers onto Platform","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\nfrom laborchestrator import structures\n\ndb = StatusDBImplementation()\n\n# Define containers to load\ncontainers_to_load = [\n    (\"SAMPLE_01\", \"Hamilton_STAR\", 0),\n    (\"SAMPLE_02\", \"Hamilton_STAR\", 1),\n    (\"SAMPLE_03\", \"Hamilton_STAR\", 2),\n    (\"CONTROL_01\", \"Hamilton_STAR\", 3),\n]\n\nfor barcode, device, pos in containers_to_load:\n    # Check position is empty\n    if not db.position_empty(device, pos):\n        print(f\"ERROR: Position {device}[{pos}] is occupied\")\n        continue\n\n    # Add container\n    container_info = structures.ContainerInfo(\n        name=barcode,\n        current_device=device,\n        current_pos=pos,\n        barcode=barcode,\n        lidded=True,\n        filled=True\n    )\n    db.add_container(container_info)\n    print(f\"Loaded {barcode} at {device}[{pos}]\")\n</code></pre>"},{"location":"platform-status-db/managing-containers/#workflow-2-container-processing-pipeline","title":"Workflow 2: Container Processing Pipeline","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\ndb = StatusDBImplementation()\n\nbarcode = \"SAMPLE_01\"\n\n# 1. Start at liquid handler\ncontainer = db.get_cont_info_by_barcode(barcode)\nprint(f\"Container at: {container.current_device}[{container.current_pos}]\")\n\n# 2. Move to plate reader\ndb.moved_container(\n    source_device=container.current_device,\n    source_pos=container.current_pos,\n    target_device=\"PlateReader\",\n    target_pos=0,\n    barcode=barcode\n)\nprint(\"Moved to plate reader\")\n\n# 3. Move to incubator\ndb.moved_container(\n    source_device=\"PlateReader\",\n    source_pos=0,\n    target_device=\"Incubator\",\n    target_pos=5,\n    barcode=barcode\n)\nprint(\"Moved to incubator\")\n\n# 4. Return to liquid handler\ndb.moved_container(\n    source_device=\"Incubator\",\n    source_pos=5,\n    target_device=\"Hamilton_STAR\",\n    target_pos=10,\n    barcode=barcode\n)\nprint(\"Returned to liquid handler\")\n\n# 5. Unload from platform\ncontainer = db.get_cont_info_by_barcode(barcode)\ndb.remove_container(container)\nprint(\"Container removed from platform\")\n</code></pre>"},{"location":"platform-status-db/managing-containers/#workflow-3-lid-management-during-processing","title":"Workflow 3: Lid Management During Processing","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\ndb = StatusDBImplementation()\n\nbarcode = \"SAMPLE_01\"\ncontainer = db.get_cont_info_by_barcode(barcode)\n\n# 1. Remove lid before processing\nprint(f\"Container lidded: {container.lidded}\")\ndb.unlidded_container(\n    cont_info=container,\n    lid_device=\"Hamilton_STAR\",\n    lid_pos=15  # Lid storage position\n)\nprint(\"Lid removed and stored\")\n\n# 2. Perform processing (container remains unlidded)\n# ... processing steps ...\n\n# 3. Replace lid after processing\ncontainer = db.get_cont_info_by_barcode(barcode)  # Refresh\ndb.lidded_container(\n    cont_info=container,\n    lid_device=\"Hamilton_STAR\",\n    lid_pos=15\n)\nprint(\"Lid replaced\")\n</code></pre>"},{"location":"platform-status-db/managing-containers/#workflow-4-platform-status-report","title":"Workflow 4: Platform Status Report","text":"<pre><code>from platform_status_db.job_logs.models import Container, Device\n\nprint(\"=== PLATFORM STATUS REPORT ===\\n\")\n\n# Get all devices\ndevices = Device.objects.all()\n\nfor device in devices:\n    print(f\"\\n{device.lara_name} ({device.num_slots} positions)\")\n    print(\"-\" * 50)\n\n    # Get containers on this device\n    containers = Container.objects.filter(\n        current_pos__device=device,\n        removed=False\n    )\n\n    if not containers:\n        print(\"  No containers\")\n    else:\n        for container in containers:\n            pos = container.current_pos.slot_number\n            lid_status = \"lidded\" if container.lidded else \"unlidded\"\n            print(f\"  [{pos:2d}] {container.barcode} ({lid_status})\")\n\n            if not container.lidded and container.lid_pos:\n                lid_loc = f\"{container.lid_pos.device.lara_name}[{container.lid_pos.slot_number}]\"\n                print(f\"       Lid at: {lid_loc}\")\n\n# Summary statistics\ntotal_containers = Container.objects.filter(removed=False).count()\ntotal_removed = Container.objects.filter(removed=True).count()\n\nprint(f\"\\n=== SUMMARY ===\")\nprint(f\"Active containers: {total_containers}\")\nprint(f\"Removed containers: {total_removed}\")\nprint(f\"Total tracked: {total_containers + total_removed}\")\n</code></pre>"},{"location":"platform-status-db/managing-containers/#best-practices","title":"Best Practices","text":""},{"location":"platform-status-db/managing-containers/#barcode-management","title":"Barcode Management","text":"<ul> <li>Always use unique barcodes for each container</li> <li>Use barcode parameter in <code>moved_container()</code> when multiple containers could be at source</li> <li>Validate barcodes before adding containers</li> <li>Maintain a barcode naming convention (e.g., <code>PROJ_SAMPLE_001</code>)</li> </ul>"},{"location":"platform-status-db/managing-containers/#container-lifecycle","title":"Container Lifecycle","text":"<ol> <li>Add: Use <code>add_container()</code> when placing on platform</li> <li>Track: Use <code>moved_container()</code> for all movements</li> <li>Remove: Use <code>remove_container()</code> when unloading</li> <li>Query: Use <code>get_cont_info_by_barcode()</code> for current status</li> </ol>"},{"location":"platform-status-db/managing-containers/#error-handling","title":"Error Handling","text":"<p>Always check positions and containers before operations:</p> <pre><code># Before adding\nif not db.position_empty(device, pos):\n    raise ValueError(\"Position occupied\")\n\n# Before moving\nsource_container = db.get_container_at_position(source_device, source_pos)\nif not source_container:\n    raise ValueError(\"No container at source\")\n\nif not db.position_empty(target_device, target_pos):\n    raise ValueError(\"Target position occupied\")\n</code></pre>"},{"location":"platform-status-db/managing-containers/#data-integrity","title":"Data Integrity","text":"<ul> <li>Keep <code>starting_pos</code> unchanged (preserves container origin)</li> <li>Use soft delete (<code>removed=True</code>) instead of hard delete</li> <li>Log all movements with process steps for full audit trail</li> <li>Verify container location after movements in critical workflows</li> </ul>"},{"location":"platform-status-db/managing-containers/#troubleshooting","title":"Troubleshooting","text":""},{"location":"platform-status-db/managing-containers/#container-not-found","title":"Container Not Found","text":"<pre><code>container = db.get_cont_info_by_barcode(\"BC001\")\nif not container:\n    # Check if it was removed\n    from platform_status_db.job_logs.models import Container\n    try:\n        cont = Container.objects.get(barcode=\"BC001\")\n        if cont.removed:\n            print(\"Container was removed from platform\")\n    except Container.DoesNotExist:\n        print(\"Container never existed in database\")\n</code></pre>"},{"location":"platform-status-db/managing-containers/#multiple-containers-at-position","title":"Multiple Containers at Position","text":"<pre><code>from platform_status_db.job_logs.models import Container, Position\n\nposition = Position.objects.get(device__lara_name=\"Hamilton_STAR\", slot_number=0)\ncontainers = Container.objects.filter(current_pos=position, removed=False)\n\nif containers.count() &gt; 1:\n    print(f\"ERROR: {containers.count()} containers at same position!\")\n    for cont in containers:\n        print(f\"  - {cont.barcode}\")\n</code></pre>"},{"location":"platform-status-db/managing-containers/#next-steps","title":"Next Steps","text":"<ul> <li>API Reference: Complete method reference</li> <li>Advanced Usage: Experiments and process tracking</li> <li>Managing Devices: Device configuration and management</li> </ul>"},{"location":"platform-status-db/managing-devices/","title":"Managing Devices","text":"<p>Devices represent the physical equipment in your laboratory automation platform, such as robotic arms, plate readers, incubators, and liquid handlers. Each device has multiple positions (slots) where containers can be placed.</p>"},{"location":"platform-status-db/managing-devices/#understanding-devices-and-positions","title":"Understanding Devices and Positions","text":""},{"location":"platform-status-db/managing-devices/#device-model","title":"Device Model","text":"<p>A device in Platform Status DB represents a piece of laboratory equipment with the following properties:</p> <ul> <li>lara_name (string): Unique identifier for the device</li> <li>num_slots (integer): Number of available positions/slots</li> <li>lara_uri (URL): Network endpoint for the device (e.g., <code>http://192.168.1.100:50051</code>)</li> <li>server_certificate (text, optional): SSL/TLS certificate for secure communication</li> </ul>"},{"location":"platform-status-db/managing-devices/#position-model","title":"Position Model","text":"<p>Each device has multiple positions (slots) where containers can be placed:</p> <ul> <li>device: Reference to the parent device</li> <li>slot_number (integer): Zero-indexed position number (0 to num_slots-1)</li> <li>deep_well_suited (boolean): Whether the position can accommodate deep-well plates</li> </ul> <p>When you create a device, positions are typically created automatically based on the <code>num_slots</code> value.</p>"},{"location":"platform-status-db/managing-devices/#adding-devices","title":"Adding Devices","text":""},{"location":"platform-status-db/managing-devices/#method-1-using-a-configuration-file-recommended","title":"Method 1: Using a Configuration File (Recommended)","text":"<p>The recommended approach is to define your laboratory layout in a YAML configuration file:</p> <pre><code># lab_config.yaml\nsila_servers:\n  robotic_arms:\n    Hamilton_STAR:\n      capacity: 15\n      type: \"liquid_handler\"\n    UR5_Arm:\n      capacity: 8\n      type: \"robot\"\n\n  readers:\n    Tecan_Infinite:\n      capacity: 1\n      type: \"plate_reader\"\n    Zebra_Barcode:\n      capacity: 1\n      type: \"barcode_reader\"\n\n  incubators:\n    Liconic_STX:\n      capacity: 44\n      type: \"incubator\"\n    ThermoFisher_Shaker:\n      capacity: 4\n      type: \"shaker_incubator\"\n\n  storage:\n    ColdStorage:\n      capacity: 100\n      type: \"refrigerator\"\n</code></pre> <p>Load the configuration:</p> <pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\ndb = StatusDBImplementation()\ndb.create_lab_from_config(\"lab_config.yaml\")\n</code></pre> <p>How it works: The <code>create_lab_from_config</code> method parses the YAML file and creates a <code>Device</code> entry for each device listed. For each device, it automatically creates <code>Position</code> objects numbered from 0 to <code>capacity-1</code>.</p> <p>Note: The configuration file structure follows the laborchestrator convention with a <code>sila_servers</code> top-level key, grouping devices by type (though the grouping is just for organization).</p>"},{"location":"platform-status-db/managing-devices/#method-2-using-the-django-admin-interface","title":"Method 2: Using the Django Admin Interface","text":"<ol> <li>Navigate to http://127.0.0.1:8000/admin/</li> <li>Log in with your admin credentials</li> <li>Under \"JOB_LOGS\", click on \"Devices\"</li> <li>Click \"Add Device\" button</li> </ol> <p>Fill in the form: - Lara name: Enter a unique identifier (e.g., \"Hamilton_STAR\") - Num slots: Enter the number of positions (e.g., 15) - Lara uri: Enter the device endpoint (e.g., \"http://192.168.1.50:50051\") - Server certificate: Leave blank unless using SSL/TLS</p> <p>Click \"Save\" to create the device.</p> <p>Creating Positions: After saving the device, you'll need to manually create positions: 1. In the admin interface, click on \"Positions\" 2. Click \"Add Position\" and select the device 3. Set the slot number (starting from 0) 4. Set \"Deep well suited\" if applicable 5. Repeat for all positions</p>"},{"location":"platform-status-db/managing-devices/#method-3-programmatic-creation","title":"Method 3: Programmatic Creation","text":"<p>For integration into automated setup scripts:</p> <pre><code>from platform_status_db.job_logs.models import Device, Position\n\n# Create a device\ndevice = Device.objects.create(\n    lara_name=\"Hamilton_STAR\",\n    num_slots=15,\n    lara_uri=\"http://192.168.1.50:50051\"\n)\n\n# Create positions\nfor i in range(device.num_slots):\n    Position.objects.create(\n        device=device,\n        slot_number=i,\n        deep_well_suited=(i &gt;= 10)  # Example: Last 5 positions support deep wells\n    )\n\nprint(f\"Created device {device.lara_name} with {device.num_slots} positions\")\n</code></pre>"},{"location":"platform-status-db/managing-devices/#method-4-using-django-shell","title":"Method 4: Using Django Shell","text":"<p>For interactive testing and debugging:</p> <pre><code>python src/platform_status_db/manage.py shell\n</code></pre> <pre><code>from platform_status_db.job_logs.models import Device, Position\n\n# Create device\ndevice = Device.objects.create(\n    lara_name=\"Tecan_Infinite\",\n    num_slots=1,\n    lara_uri=\"http://192.168.1.51:50051\"\n)\n\n# Create position\nPosition.objects.create(device=device, slot_number=0, deep_well_suited=False)\n</code></pre>"},{"location":"platform-status-db/managing-devices/#querying-devices","title":"Querying Devices","text":""},{"location":"platform-status-db/managing-devices/#get-all-devices","title":"Get All Devices","text":"<pre><code>from platform_status_db.job_logs.models import Device\n\n# Get all devices\nall_devices = Device.objects.all()\nfor device in all_devices:\n    print(f\"{device.lara_name}: {device.num_slots} slots\")\n</code></pre>"},{"location":"platform-status-db/managing-devices/#get-a-specific-device","title":"Get a Specific Device","text":"<pre><code># By name\ndevice = Device.objects.get(lara_name=\"Hamilton_STAR\")\nprint(f\"URI: {device.lara_uri}\")\n\n# Handle device not found\ntry:\n    device = Device.objects.get(lara_name=\"NonExistent\")\nexcept Device.DoesNotExist:\n    print(\"Device not found\")\n</code></pre>"},{"location":"platform-status-db/managing-devices/#get-device-positions","title":"Get Device Positions","text":"<p>Using the StatusDBImplementation API:</p> <pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\ndb = StatusDBImplementation()\npositions = db.get_all_positions(\"Hamilton_STAR\")\nprint(f\"Available positions: {positions}\")  # [0, 1, 2, 3, ...]\n</code></pre> <p>Using Django ORM:</p> <pre><code>from platform_status_db.job_logs.models import Device, Position\n\ndevice = Device.objects.get(lara_name=\"Hamilton_STAR\")\npositions = Position.objects.filter(device=device)\n\nfor pos in positions:\n    print(f\"Position {pos.slot_number}: deep_well={pos.deep_well_suited}\")\n</code></pre>"},{"location":"platform-status-db/managing-devices/#check-position-availability","title":"Check Position Availability","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\ndb = StatusDBImplementation()\n\n# Check if a position is empty\nis_empty = db.position_empty(device=\"Hamilton_STAR\", pos=5)\nif is_empty:\n    print(\"Position 5 is available\")\nelse:\n    print(\"Position 5 is occupied\")\n</code></pre>"},{"location":"platform-status-db/managing-devices/#updating-devices","title":"Updating Devices","text":""},{"location":"platform-status-db/managing-devices/#update-device-properties","title":"Update Device Properties","text":"<pre><code>from platform_status_db.job_logs.models import Device\n\ndevice = Device.objects.get(lara_name=\"Hamilton_STAR\")\ndevice.lara_uri = \"http://192.168.1.60:50051\"  # New IP address\ndevice.save()\n</code></pre>"},{"location":"platform-status-db/managing-devices/#update-via-admin-interface","title":"Update via Admin Interface","text":"<ol> <li>Go to the admin interface at http://127.0.0.1:8000/admin/</li> <li>Click on \"Devices\" under JOB_LOGS</li> <li>Click on the device name you want to edit</li> <li>Modify the fields</li> <li>Click \"Save\"</li> </ol>"},{"location":"platform-status-db/managing-devices/#add-more-positions-to-existing-device","title":"Add More Positions to Existing Device","text":"<pre><code>from platform_status_db.job_logs.models import Device, Position\n\ndevice = Device.objects.get(lara_name=\"Hamilton_STAR\")\n\n# Update capacity\nold_capacity = device.num_slots\ndevice.num_slots = 20  # Increase from 15 to 20\ndevice.save()\n\n# Add new positions\nfor i in range(old_capacity, device.num_slots):\n    Position.objects.create(\n        device=device,\n        slot_number=i,\n        deep_well_suited=False\n    )\n</code></pre>"},{"location":"platform-status-db/managing-devices/#server-certificates","title":"Server Certificates","text":"<p>For secure communication with devices using SSL/TLS:</p>"},{"location":"platform-status-db/managing-devices/#store-a-certificate","title":"Store a Certificate","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\ndb = StatusDBImplementation()\n\nwith open(\"device_cert.pem\", \"r\") as f:\n    cert_content = f.read()\n\ndb.write_server_certificate(\"Hamilton_STAR\", cert_content)\n</code></pre>"},{"location":"platform-status-db/managing-devices/#retrieve-a-certificate","title":"Retrieve a Certificate","text":"<pre><code>cert = db.get_server_certificate(\"Hamilton_STAR\")\nif cert:\n    with open(\"retrieved_cert.pem\", \"w\") as f:\n        f.write(cert)\n</code></pre>"},{"location":"platform-status-db/managing-devices/#removing-devices","title":"Removing Devices","text":""},{"location":"platform-status-db/managing-devices/#soft-delete-remove-all-containers","title":"Soft Delete: Remove All Containers","text":"<p>If you want to clear all containers from a device without deleting it:</p> <pre><code>from platform_status_db.job_logs.models import Container, Position\n\n# Get all positions for the device\npositions = Position.objects.filter(device__lara_name=\"Hamilton_STAR\")\n\n# Mark all containers at these positions as removed\nfor position in positions:\n    containers = Container.objects.filter(current_pos=position, removed=False)\n    for container in containers:\n        container.removed = True\n        container.save()\n</code></pre>"},{"location":"platform-status-db/managing-devices/#hard-delete-remove-device-completely","title":"Hard Delete: Remove Device Completely","text":"<p>Warning: This will delete all associated positions and container history!</p> <pre><code>from platform_status_db.job_logs.models import Device\n\ndevice = Device.objects.get(lara_name=\"Hamilton_STAR\")\ndevice.delete()  # Also deletes all associated positions (cascade)\n</code></pre>"},{"location":"platform-status-db/managing-devices/#wipe-entire-laboratory","title":"Wipe Entire Laboratory","text":"<p>To reset all devices and containers:</p> <pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\ndb = StatusDBImplementation()\ndb.wipe_lab()  # Removes all devices and marks all containers as removed\n</code></pre>"},{"location":"platform-status-db/managing-devices/#best-practices","title":"Best Practices","text":""},{"location":"platform-status-db/managing-devices/#device-naming","title":"Device Naming","text":"<ul> <li>Use descriptive, unique names: <code>Hamilton_STAR_01</code>, not <code>Robot1</code></li> <li>Include model information when you have multiple similar devices</li> <li>Use consistent naming conventions across your lab</li> </ul>"},{"location":"platform-status-db/managing-devices/#capacity-planning","title":"Capacity Planning","text":"<ul> <li>Set <code>num_slots</code> to match the physical device capacity</li> <li>Don't overestimate capacity - it's better to be accurate</li> <li>Consider reserving positions for calibration or maintenance</li> </ul>"},{"location":"platform-status-db/managing-devices/#position-numbering","title":"Position Numbering","text":"<ul> <li>Positions are zero-indexed (0 to num_slots-1)</li> <li>Maintain consistency with device's native position numbering</li> <li>Document any position number mappings if device uses different indexing</li> </ul>"},{"location":"platform-status-db/managing-devices/#uri-configuration","title":"URI Configuration","text":"<ul> <li>Use static IP addresses for devices, not DHCP</li> <li>Include the correct port number</li> <li>Test connectivity before adding to database</li> <li>Example formats:</li> <li>HTTP: <code>http://192.168.1.50:50051</code></li> <li>HTTPS: <code>https://device.lab.local:443</code></li> <li>gRPC: <code>grpc://192.168.1.50:50052</code></li> </ul>"},{"location":"platform-status-db/managing-devices/#deep-well-support","title":"Deep Well Support","text":"<ul> <li>Mark positions as <code>deep_well_suited=True</code> only if they physically support it</li> <li>Consider height restrictions and compatibility</li> <li>Document which positions support special labware types</li> </ul>"},{"location":"platform-status-db/managing-devices/#common-patterns","title":"Common Patterns","text":""},{"location":"platform-status-db/managing-devices/#initialize-lab-from-scratch","title":"Initialize Lab from Scratch","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\n# Create clean database\ndb = StatusDBImplementation()\ndb.wipe_lab()\n\n# Load from configuration\ndb.create_lab_from_config(\"production_lab_config.yaml\")\n</code></pre>"},{"location":"platform-status-db/managing-devices/#audit-device-configuration","title":"Audit Device Configuration","text":"<pre><code>from platform_status_db.job_logs.models import Device, Position\n\nprint(\"Laboratory Device Inventory\")\nprint(\"=\" * 50)\n\nfor device in Device.objects.all():\n    positions = Position.objects.filter(device=device)\n    deep_well_count = positions.filter(deep_well_suited=True).count()\n\n    print(f\"\\n{device.lara_name}\")\n    print(f\"  URI: {device.lara_uri}\")\n    print(f\"  Total positions: {device.num_slots}\")\n    print(f\"  Deep-well positions: {deep_well_count}\")\n    print(f\"  Has certificate: {'Yes' if device.server_certificate else 'No'}\")\n</code></pre>"},{"location":"platform-status-db/managing-devices/#check-device-occupancy","title":"Check Device Occupancy","text":"<pre><code>from platform_status_db.larastatus.status_db_implementation import StatusDBImplementation\n\ndb = StatusDBImplementation()\ndevice_name = \"Hamilton_STAR\"\n\npositions = db.get_all_positions(device_name)\nempty_positions = [pos for pos in positions if db.position_empty(device_name, pos)]\noccupied_positions = [pos for pos in positions if not db.position_empty(device_name, pos)]\n\nprint(f\"Device: {device_name}\")\nprint(f\"Empty positions: {empty_positions}\")\nprint(f\"Occupied positions: {occupied_positions}\")\nprint(f\"Utilization: {len(occupied_positions)}/{len(positions)} ({len(occupied_positions)/len(positions)*100:.1f}%)\")\n</code></pre>"},{"location":"platform-status-db/managing-devices/#next-steps","title":"Next Steps","text":"<ul> <li>Managing Containers: Learn how to add and track containers</li> <li>API Reference: Complete method reference</li> <li>Advanced Usage: Experiments and process tracking</li> </ul>"},{"location":"pythonlab/builtin_services/","title":"Built-in Service Resources","text":"<p>This document describes the service resources available in PythonLab.</p>"},{"location":"pythonlab/builtin_services/#overview","title":"Overview","text":"<p>PythonLab provides several built-in <code>ServiceResource</code> implementations representing common laboratory equipment. These can be used directly in your processes or serve as examples for creating custom services.</p>"},{"location":"pythonlab/builtin_services/#location","title":"Location","text":"<p>All built-in services are in: <code>/home/dsmits/projects/osla/pythonLab/pythonlab/resources/services/</code></p>"},{"location":"pythonlab/builtin_services/#available-services","title":"Available Services","text":""},{"location":"pythonlab/builtin_services/#1-incubatorserviceresource","title":"1. IncubatorServiceResource","text":"<p>File: <code>incubation.py</code></p> <p>Represents an incubator for temperature-controlled incubation.</p>"},{"location":"pythonlab/builtin_services/#methods","title":"Methods","text":"<pre><code>def incubate(self, labware: LabwareResource, duration: int,\n            temperature: float, shaking_frequency: int = 0, **kwargs)\n</code></pre> <p>Incubate labware at specified temperature.</p> <p>Parameters: - <code>labware</code>: Container to incubate - <code>duration</code>: Time in seconds - <code>temperature</code>: Temperature in Kelvin - <code>shaking_frequency</code>: Shaking speed in RPM (default: 0)</p> <p>Example: <pre><code># In process():\nself.incubator.incubate(\n    self.plate,\n    duration=3600,        # 1 hour\n    temperature=310,      # 37\u00b0C (310K)\n    shaking_frequency=200 # 200 RPM\n)\n</code></pre></p>"},{"location":"pythonlab/builtin_services/#2-moverserviceresource","title":"2. MoverServiceResource","text":"<p>File: <code>moving.py</code></p> <p>Represents a robotic arm or automated moving system.</p>"},{"location":"pythonlab/builtin_services/#methods_1","title":"Methods","text":"<pre><code>def move(self, labware: LabwareResource, target_loc: ServiceResource,\n        lidded: bool = True, **kwargs)\n</code></pre> <p>Move labware to a target location.</p> <p>Parameters: - <code>labware</code>: Container to move - <code>target_loc</code>: Target ServiceResource (device) - <code>lidded</code>: Whether labware has lid during move (default: True)</p> <p>Example: <pre><code># Move plate to incubator (with lid)\nself.mover.move(self.plate, target_loc=self.incubator, lidded=True)\n\n# Move plate to reader (remove lid)\nself.mover.move(self.plate, target_loc=self.reader, lidded=False)\n</code></pre></p> <pre><code>def read_barcode(self, labware: LabwareResource, **kwargs)\n</code></pre> <p>Scan barcode on labware during handling.</p> <p>Parameters: - <code>labware</code>: Container to scan</p> <p>Example: <pre><code># Scan barcode during handling\nself.mover.read_barcode(self.plate)\n</code></pre></p>"},{"location":"pythonlab/builtin_services/#3-centrifugeserviceresource","title":"3. CentrifugeServiceResource","text":"<p>File: <code>centrifugation.py</code></p> <p>Represents a centrifuge for separating samples.</p>"},{"location":"pythonlab/builtin_services/#methods_2","title":"Methods","text":"<pre><code>def centrifuge(self, labwares: list, duration: int, rpm: int, **kwargs)\n</code></pre> <p>Centrifuge one or more containers.</p> <p>Parameters: - <code>labwares</code>: List of LabwareResource objects - <code>duration</code>: Centrifugation time in seconds - <code>rpm</code>: Revolutions per minute</p> <p>Example: <pre><code># Centrifuge multiple plates\nself.centrifuge.centrifuge(\n    labwares=[self.plate1, self.plate2, self.plate3],\n    duration=600,    # 10 minutes\n    rpm=4000\n)\n</code></pre></p>"},{"location":"pythonlab/builtin_services/#4-platereaderserviceresource","title":"4. PlateReaderServiceResource","text":"<p>File: <code>analysis.py</code></p> <p>Represents a microplate reader for absorbance/fluorescence measurements.</p>"},{"location":"pythonlab/builtin_services/#methods_3","title":"Methods","text":"<pre><code>def single_read(self, labware: LabwareResource, wavelengths=None,\n               temperature=305, method='single_read', **kwargs)\n</code></pre> <p>Perform a single absorbance/fluorescence reading.</p> <p>Parameters: - <code>labware</code>: Plate to read - <code>wavelengths</code>: List of wavelengths in nm (optional) - <code>temperature</code>: Reading temperature in Kelvin (default: 305) - <code>method</code>: Method identifier (default: 'single_read')</p> <p>Returns: Runtime variable representing measurement data</p> <p>Example: <pre><code># Single wavelength\nabs_600 = self.reader.single_read(\n    self.plate,\n    wavelengths=[600],\n    temperature=305\n)\n\n# Multiple wavelengths\nabs_multi = self.reader.single_read(\n    self.plate,\n    wavelengths=[600, 660],\n    method='multi_wavelength'\n)\n</code></pre></p> <pre><code>def run_kinetic(self, labware: LabwareResource, wavelength: int,\n               interval: int, reads: int, temperature=305, **kwargs)\n</code></pre> <p>Perform kinetic (time-series) measurements.</p> <p>Parameters: - <code>labware</code>: Plate to read - <code>wavelength</code>: Wavelength in nm - <code>interval</code>: Time between reads in seconds - <code>reads</code>: Number of reads to perform - <code>temperature</code>: Reading temperature in Kelvin (default: 305)</p> <p>Returns: Runtime variable representing time-series data</p> <p>Example: <pre><code># Read every 60 seconds for 10 reads\nkinetic_data = self.reader.run_kinetic(\n    self.plate,\n    wavelength=600,\n    interval=60,\n    reads=10,\n    temperature=310\n)\n</code></pre></p> <pre><code>def run_series(self, labware: LabwareResource, protocols: List[str], **kwargs)\n</code></pre> <p>Run a series of predefined protocols.</p> <p>Parameters: - <code>labware</code>: Plate to read - <code>protocols</code>: List of protocol identifiers</p> <p>Returns: Runtime variable representing protocol results</p> <p>Example: <pre><code># Run multiple protocols\nresults = self.reader.run_series(\n    self.plate,\n    protocols=['protocol_A', 'protocol_B', 'protocol_C']\n)\n</code></pre></p>"},{"location":"pythonlab/builtin_services/#5-labwarestorageresource","title":"5. LabwareStorageResource","text":"<p>File: <code>labware_storage.py</code></p> <p>Represents a storage location for labware (hotel, stack, etc.).</p>"},{"location":"pythonlab/builtin_services/#properties","title":"Properties","text":"<pre><code>@property\ndef next_free_position(self) -&gt; int\n</code></pre> <p>Auto-incrementing position counter for storing labware.</p>"},{"location":"pythonlab/builtin_services/#methods_4","title":"Methods","text":"<pre><code>def eject(self, labware: LabwareResource, **kwargs)\n</code></pre> <p>Remove labware from storage.</p> <p>Parameters: - <code>labware</code>: Container to eject</p> <p>Example: <pre><code># Eject plate from storage\nself.storage.eject(self.plate)\n</code></pre></p> <pre><code>def store(self, labware: LabwareResource, position: Optional[int] = None, **kwargs)\n</code></pre> <p>Store labware at specified or next available position.</p> <p>Parameters: - <code>labware</code>: Container to store - <code>position</code>: Storage position (optional, uses next_free_position if None)</p> <p>Example: <pre><code># Store at next free position\nself.storage.store(self.plate)\n\n# Store at specific position\nself.storage.store(self.plate, position=5)\n</code></pre></p>"},{"location":"pythonlab/builtin_services/#setting-starting-positions","title":"Setting Starting Positions","text":"<pre><code># In init_service_resources():\nfor i, plate in enumerate(self.plates):\n    plate.set_start_position(\n        self.storage,\n        self.storage.next_free_position\n    )\n</code></pre>"},{"location":"pythonlab/builtin_services/#6-barcodereaderserviceresource","title":"6. BarcodeReaderServiceResource","text":"<p>File: <code>barcode.py</code></p> <p>Represents a standalone barcode scanner.</p> <p>Note: For barcode reading during movement, use <code>MoverServiceResource.read_barcode()</code>.</p>"},{"location":"pythonlab/builtin_services/#7-liquidhandlingserviceresource","title":"7. LiquidHandlingServiceResource","text":"<p>File: <code>liquid_handling.py</code></p> <p>Represents liquid handlers (pipetting robots).</p>"},{"location":"pythonlab/builtin_services/#methods_5","title":"Methods","text":"<pre><code>def transfer(self, source: LabwareResource, dest: LabwareResource,\n            volume: float, **kwargs)\n</code></pre> <p>Transfer liquid between containers.</p> <p>Parameters: - <code>source</code>: Source container - <code>dest</code>: Destination container - <code>volume</code>: Volume in microliters</p> <p>Example: <pre><code># Transfer 100 \u00b5L\nself.liquid_handler.transfer(\n    source=self.reagent_trough,\n    dest=self.sample_plate,\n    volume=100.0\n)\n</code></pre></p>"},{"location":"pythonlab/builtin_services/#8-washerdispenserserviceresource","title":"8. WasherDispenserServiceResource","text":"<p>File: <code>washer_dispenser.py</code></p> <p>Represents a plate washer/dispenser.</p>"},{"location":"pythonlab/builtin_services/#methods_6","title":"Methods","text":"<pre><code>def wash(self, labware: LabwareResource, cycles: int = 3, **kwargs)\n</code></pre> <p>Wash a plate.</p> <p>Parameters: - <code>labware</code>: Plate to wash - <code>cycles</code>: Number of wash cycles (default: 3)</p> <p>Example: <pre><code># Wash plate with 3 cycles\nself.washer.wash(self.plate, cycles=3)\n</code></pre></p> <pre><code>def dispense(self, labware: LabwareResource, volume: float,\n            reagent: str = None, **kwargs)\n</code></pre> <p>Dispense liquid into plate.</p> <p>Parameters: - <code>labware</code>: Target plate - <code>volume</code>: Volume in microliters - <code>reagent</code>: Reagent identifier (optional)</p> <p>Example: <pre><code># Dispense 200 \u00b5L of media\nself.dispenser.dispense(\n    self.plate,\n    volume=200.0,\n    reagent='growth_media'\n)\n</code></pre></p>"},{"location":"pythonlab/builtin_services/#9-thermalcyclerserviceresource","title":"9. ThermalCyclerServiceResource","text":"<p>File: <code>thermal_cycler.py</code></p> <p>Represents a PCR thermal cycler.</p>"},{"location":"pythonlab/builtin_services/#methods_7","title":"Methods","text":"<pre><code>def run_pcr(self, labware: LabwareResource, cycles: int,\n           denaturation_temp: float, annealing_temp: float,\n           extension_temp: float, **kwargs)\n</code></pre> <p>Run a PCR protocol.</p> <p>Parameters: - <code>labware</code>: PCR plate - <code>cycles</code>: Number of PCR cycles - <code>denaturation_temp</code>: Denaturation temperature in Kelvin - <code>annealing_temp</code>: Annealing temperature in Kelvin - <code>extension_temp</code>: Extension temperature in Kelvin</p> <p>Example: <pre><code># Standard PCR protocol\nself.thermal_cycler.run_pcr(\n    self.pcr_plate,\n    cycles=35,\n    denaturation_temp=368,  # 95\u00b0C\n    annealing_temp=328,     # 55\u00b0C\n    extension_temp=345      # 72\u00b0C\n)\n</code></pre></p>"},{"location":"pythonlab/builtin_services/#10-shakerserviceresource","title":"10. ShakerServiceResource","text":"<p>File: <code>shaker.py</code></p> <p>Represents a plate shaker.</p>"},{"location":"pythonlab/builtin_services/#methods_8","title":"Methods","text":"<pre><code>def shake(self, labware: LabwareResource, duration: int,\n         frequency: int, **kwargs)\n</code></pre> <p>Shake a plate at specified frequency.</p> <p>Parameters: - <code>labware</code>: Plate to shake - <code>duration</code>: Shaking time in seconds - <code>frequency</code>: Shaking frequency in RPM</p> <p>Example: <pre><code># Shake for 5 minutes at 300 RPM\nself.shaker.shake(\n    self.plate,\n    duration=300,\n    frequency=300\n)\n</code></pre></p>"},{"location":"pythonlab/builtin_services/#11-sealerserviceresource","title":"11. SealerServiceResource","text":"<p>File: <code>sealer.py</code></p> <p>Represents a plate sealer.</p>"},{"location":"pythonlab/builtin_services/#methods_9","title":"Methods","text":"<pre><code>def seal(self, labware: LabwareResource, seal_type: str = 'foil', **kwargs)\n</code></pre> <p>Seal a plate.</p> <p>Parameters: - <code>labware</code>: Plate to seal - <code>seal_type</code>: Type of seal (default: 'foil')</p> <p>Example: <pre><code># Seal with foil\nself.sealer.seal(self.plate, seal_type='foil')\n\n# Seal with film\nself.sealer.seal(self.plate, seal_type='film')\n</code></pre></p> <pre><code>def deseal(self, labware: LabwareResource, **kwargs)\n</code></pre> <p>Remove seal from plate.</p> <p>Parameters: - <code>labware</code>: Plate to deseal</p> <p>Example: <pre><code># Remove seal\nself.sealer.deseal(self.plate)\n</code></pre></p>"},{"location":"pythonlab/builtin_services/#12-microscopeserviceresource","title":"12. MicroscopeServiceResource","text":"<p>File: <code>microscope.py</code></p> <p>Represents an automated microscope.</p>"},{"location":"pythonlab/builtin_services/#methods_10","title":"Methods","text":"<pre><code>def capture_image(self, labware: LabwareResource, magnification: int,\n                 channels: List[str], **kwargs)\n</code></pre> <p>Capture microscopy images.</p> <p>Parameters: - <code>labware</code>: Container to image - <code>magnification</code>: Objective magnification (e.g., 10, 40, 100) - <code>channels</code>: List of imaging channels (e.g., ['brightfield', 'DAPI', 'GFP'])</p> <p>Returns: Runtime variable representing image data</p> <p>Example: <pre><code># Capture brightfield and fluorescence\nimages = self.microscope.capture_image(\n    self.plate,\n    magnification=40,\n    channels=['brightfield', 'GFP', 'RFP']\n)\n</code></pre></p>"},{"location":"pythonlab/builtin_services/#13-humanserviceresource","title":"13. HumanServiceResource","text":"<p>File: <code>human.py</code></p> <p>Represents manual human intervention steps.</p>"},{"location":"pythonlab/builtin_services/#methods_11","title":"Methods","text":"<pre><code>def manual_step(self, labware: LabwareResource, instruction: str,\n               estimated_duration: int, **kwargs)\n</code></pre> <p>Request human intervention.</p> <p>Parameters: - <code>labware</code>: Container requiring manual handling - <code>instruction</code>: Instructions for operator - <code>estimated_duration</code>: Estimated time for step in seconds</p> <p>Example: <pre><code># Manual colony picking\nself.human.manual_step(\n    self.plate,\n    instruction=\"Pick 24 colonies and transfer to new plate\",\n    estimated_duration=900  # 15 minutes\n)\n</code></pre></p>"},{"location":"pythonlab/builtin_services/#14-cameraserviceresource","title":"14. CameraServiceResource","text":"<p>File: <code>camera.py</code></p> <p>Represents a camera for documentation/imaging.</p>"},{"location":"pythonlab/builtin_services/#methods_12","title":"Methods","text":"<pre><code>def take_photo(self, labware: LabwareResource, **kwargs)\n</code></pre> <p>Take a photograph of labware.</p> <p>Parameters: - <code>labware</code>: Container to photograph</p> <p>Returns: Runtime variable representing image</p> <p>Example: <pre><code># Document plate state\nphoto = self.camera.take_photo(self.plate)\n</code></pre></p>"},{"location":"pythonlab/builtin_services/#15-helloworldserviceresource","title":"15. HelloWorldServiceResource","text":"<p>File: <code>hello_world.py</code></p> <p>Example/template service for testing and demonstration.</p>"},{"location":"pythonlab/builtin_services/#methods_13","title":"Methods","text":"<pre><code>def say_hello(self, labware: LabwareResource, message: str = \"Hello\", **kwargs)\n</code></pre> <p>Simple test operation.</p> <p>Example: <pre><code># Test operation\nself.hello.say_hello(self.plate, message=\"Hello World\")\n</code></pre></p>"},{"location":"pythonlab/builtin_services/#creating-custom-services","title":"Creating Custom Services","text":"<p>Use built-in services as templates for creating custom services:</p> <pre><code>from pythonlab.resource import ServiceResource, LabwareResource\n\nclass MyCustomService(ServiceResource):\n    \"\"\"Custom laboratory equipment.\"\"\"\n\n    def my_operation(self, labware: LabwareResource,\n                    param1: float, param2: int, **kwargs):\n        \"\"\"\n        Custom operation on labware.\n\n        Args:\n            labware: Container to process\n            param1: First parameter\n            param2: Second parameter\n            **kwargs: Additional metadata\n        \"\"\"\n        # Update kwargs with required metadata\n        kwargs.update(dict(\n            fct='my_operation',           # REQUIRED: operation name\n            duration=120,                  # REQUIRED: duration in seconds\n            param1=param1,                 # Include all parameters\n            param2=param2\n        ))\n\n        # Add process step\n        self.proc.add_process_step(self, [labware], **kwargs)\n\n        # Optional: return for runtime variable\n        # If this operation produces data, return here\n</code></pre>"},{"location":"pythonlab/builtin_services/#best-practices-for-custom-services","title":"Best Practices for Custom Services","text":"<ol> <li> <p>Always include <code>fct</code> and <code>duration</code> in kwargs <pre><code>kwargs.update(dict(fct='operation_name', duration=60))\n</code></pre></p> </li> <li> <p>Document parameters clearly</p> </li> <li>Use docstrings with Args, Returns sections</li> <li> <p>Specify units (seconds, Kelvin, microliters, etc.)</p> </li> <li> <p>Pass labware as list <pre><code>self.proc.add_process_step(self, [labware], **kwargs)\n</code></pre></p> </li> <li> <p>Use meaningful operation names <pre><code>fct='incubate'  # Good\nfct='op1'       # Bad\n</code></pre></p> </li> <li> <p>Include all operation parameters in kwargs <pre><code>kwargs.update(dict(\n    fct='incubate',\n    duration=duration,\n    temperature=temperature,\n    shaking_frequency=shaking_frequency  # Include even optional params\n))\n</code></pre></p> </li> <li> <p>Return for runtime variables</p> </li> <li>If operation produces data used in decisions, add return statement</li> <li> <p>Parser will create variable node</p> </li> <li> <p>Mark movement operations <pre><code>self.proc.add_process_step(self, [labware], is_movement=True, **kwargs)\n</code></pre></p> </li> </ol>"},{"location":"pythonlab/builtin_services/#usage-example","title":"Usage Example","text":"<p>Complete process using multiple services:</p> <pre><code>from pythonlab.process import PLProcess\nfrom pythonlab.resource import LabwareResource\nfrom pythonlab.resources.services.incubation import IncubatorServiceResource\nfrom pythonlab.resources.services.moving import MoverServiceResource\nfrom pythonlab.resources.services.analysis import PlateReaderServiceResource\nfrom pythonlab.resources.services.labware_storage import LabwareStorageResource\n\nclass CompleteProcess(PLProcess):\n    def create_resources(self):\n        # Create services\n        self.storage = LabwareStorageResource(proc=self, name=\"Hotel_1\")\n        self.mover = MoverServiceResource(proc=self, name=\"RobotArm\")\n        self.incubator = IncubatorServiceResource(proc=self, name=\"Incubator_37C\")\n        self.reader = PlateReaderServiceResource(proc=self, name=\"Reader_1\")\n\n        # Create labware\n        self.plates = [\n            LabwareResource(proc=self, name=f\"Plate_{i}\", lidded=True)\n            for i in range(3)\n        ]\n\n    def init_service_resources(self):\n        super().init_service_resources()\n\n        # Set starting positions\n        for plate in self.plates:\n            plate.set_start_position(\n                self.storage,\n                self.storage.next_free_position\n            )\n\n    def process(self):\n        # Process each plate\n        for plate in self.plates:\n            # Move to incubator\n            self.mover.move(plate, target_loc=self.incubator, lidded=True)\n\n            # Incubate\n            self.incubator.incubate(\n                plate,\n                duration=7200,      # 2 hours\n                temperature=310     # 37\u00b0C\n            )\n\n            # Move to reader\n            self.mover.move(plate, target_loc=self.reader, lidded=False)\n\n            # Measure\n            absorbance = self.reader.single_read(\n                plate,\n                wavelengths=[600],\n                temperature=305\n            )\n\n            # Return to storage\n            self.mover.move(plate, target_loc=self.storage, lidded=True)\n            self.storage.store(plate)\n</code></pre>"},{"location":"pythonlab/builtin_services/#summary","title":"Summary","text":"<p>PythonLab provides a rich set of built-in services covering common laboratory automation needs: - Incubation - Temperature control - Movement - Robotic handling - Centrifugation - Sample separation - Analysis - Spectroscopy and imaging - Storage - Labware management - Liquid Handling - Pipetting and dispensing - Thermal Cycling - PCR - Washing/Sealing - Plate preparation - Imaging - Microscopy and documentation - Manual Steps - Human intervention</p> <p>These services can be used directly or serve as templates for custom equipment implementations.</p>"},{"location":"pythonlab/examples/","title":"Example Processes","text":"<p>This document provides complete examples of PLProcessReader-compliant processes, from simple to complex.</p>"},{"location":"pythonlab/examples/#basic-physics-process","title":"Basic Physics Process","text":"<p>This minimal example demonstrates: - Creating a custom ServiceResource - Defining runtime variables - Computing derived values</p>"},{"location":"pythonlab/examples/#code","title":"Code","text":"<pre><code>from pythonlab.resource import ServiceResource, LabwareResource\nfrom pythonlab.process import PLProcess\n\nclass VoltMeterServiceResource(ServiceResource):\n    \"\"\"Custom service for voltage/current measurement.\"\"\"\n\n    def measure_amperage(self, cont: LabwareResource, **kwargs):\n        \"\"\"\n        Measure electric current through a conductor.\n\n        Args:\n            cont: Conductor to measure (wire, circuit, etc.)\n\n        Returns:\n            Runtime variable representing current in Amperes\n        \"\"\"\n        kwargs.update(dict(\n            fct='meas_current',\n            duration=1  # 1 second measurement\n        ))\n        self.proc.add_process_step(self, [cont], **kwargs)\n\n    def measure_voltage(self, cont: LabwareResource, **kwargs):\n        \"\"\"\n        Measure voltage across a conductor.\n\n        Args:\n            cont: Conductor to measure\n\n        Returns:\n            Runtime variable representing voltage in Volts\n        \"\"\"\n        kwargs.update(dict(\n            fct='meas_voltage',\n            duration=1  # 1 second measurement\n        ))\n        self.proc.add_process_step(self, [cont], **kwargs)\n\n\nclass PhysicsMiniProcess(PLProcess):\n    \"\"\"\n    Minimal physics experiment: measure voltage and current, calculate resistance.\n\n    Demonstrates Ohm's law: R = U / I\n    \"\"\"\n\n    def create_resources(self):\n        # Create measurement device\n        self.voltmeter = VoltMeterServiceResource(proc=self, name=\"MyVoltmeter\")\n\n        # Create test subject (wire)\n        self.wire = LabwareResource(proc=self, name=\"Wire\")\n\n    def init_service_resources(self):\n        super().init_service_resources()\n\n    def compute_resistance(self, u, i):\n        \"\"\"\n        Calculate resistance from voltage and current.\n\n        Args:\n            u: Voltage in Volts\n            i: Current in Amperes\n\n        Returns:\n            Resistance in Ohms\n        \"\"\"\n        return u / i\n\n    def process(self):\n        # Measure current (runtime variable)\n        I = self.voltmeter.measure_amperage(self.wire)\n\n        # Measure voltage (runtime variable)\n        U = self.voltmeter.measure_voltage(self.wire)\n\n        # Compute resistance (computation node)\n        R = self.compute_resistance(U, I)\n</code></pre>"},{"location":"pythonlab/examples/#resulting-workflow","title":"Resulting Workflow","text":"<pre><code>graph LR\n    Wire[\"Wire&lt;br/&gt;(labware node)\"]\n    Wire --&gt; measure_amperage[measure_amperage]\n    Wire --&gt; measure_voltage[measure_voltage]\n    measure_amperage --&gt; I[\"I&lt;br/&gt;(variable)\"]\n    measure_voltage --&gt; U[\"U&lt;br/&gt;(variable)\"]\n    I --&gt; compute_resistance[compute_resistance]\n    U --&gt; compute_resistance\n    compute_resistance --&gt; R[\"R&lt;br/&gt;(computation)\"]</code></pre>  Hold \"Alt\" / \"Option\" to enable pan &amp; zoom"},{"location":"pythonlab/examples/#key-concepts","title":"Key Concepts","text":"<ul> <li>Custom ServiceResource: VoltMeterServiceResource defines two operations</li> <li>Runtime variables: I and U are values from measurements</li> <li>Computation node: R is derived from runtime variables</li> <li>Simple workflow: Sequential measurements followed by calculation</li> </ul>"},{"location":"pythonlab/examples/#running-the-example","title":"Running the Example","text":"<pre><code>from pythonlab.pythonlab_reader import PLProcessReader\n\n# Parse the process\nsimulator = PLProcessReader.parse_process(PhysicsMiniProcess())\n\n# Visualize\nsimulator.visualize_workflow_graph()\n\n# Check nodes\nprint(f\"Nodes: {simulator.workflow.number_of_nodes()}\")  # 5 nodes\nprint(f\"Edges: {simulator.workflow.number_of_edges()}\")  # 4 edges\n</code></pre>"},{"location":"pythonlab/examples/#simple-bioprocess","title":"Simple Bioprocess","text":"<p>A basic biological process with incubation and measurement.</p>"},{"location":"pythonlab/examples/#code_1","title":"Code","text":"<pre><code>from pythonlab.process import PLProcess\nfrom pythonlab.resource import LabwareResource\nfrom pythonlab.resources.services.incubation import IncubatorServiceResource\nfrom pythonlab.resources.services.moving import MoverServiceResource\nfrom pythonlab.resources.services.analysis import PlateReaderServiceResource\nfrom pythonlab.resources.services.labware_storage import LabwareStorageResource\n\n\nclass SimpleBioProcess(PLProcess):\n    \"\"\"\n    Basic bioprocess: incubate sample, measure absorbance, return to storage.\n    \"\"\"\n\n    def create_resources(self):\n        # Create services\n        self.storage = LabwareStorageResource(proc=self, name=\"Hotel_1\")\n        self.mover = MoverServiceResource(proc=self, name=\"RobotArm\")\n        self.incubator = IncubatorServiceResource(proc=self, name=\"Incubator_37C\")\n        self.reader = PlateReaderServiceResource(proc=self, name=\"PlateReader\")\n\n        # Create labware\n        self.plate = LabwareResource(proc=self, name=\"SamplePlate\", lidded=True)\n\n    def init_service_resources(self):\n        super().init_service_resources()\n\n        # Plate starts in storage\n        self.plate.set_start_position(self.storage, position=1)\n\n    def process(self):\n        # Move to incubator\n        self.mover.move(self.plate, target_loc=self.incubator, lidded=True)\n\n        # Incubate for 2 hours at 37\u00b0C\n        self.incubator.incubate(\n            self.plate,\n            duration=7200,      # 2 hours = 7200 seconds\n            temperature=310,    # 37\u00b0C = 310 Kelvin\n            shaking_frequency=200\n        )\n\n        # Move to reader (remove lid)\n        self.mover.move(self.plate, target_loc=self.reader, lidded=False)\n\n        # Measure absorbance at 600nm\n        absorbance = self.reader.single_read(\n            self.plate,\n            wavelengths=[600],\n            temperature=305\n        )\n\n        # Return to storage (with lid)\n        self.mover.move(self.plate, target_loc=self.storage, lidded=True)\n        self.storage.store(self.plate, position=1)\n</code></pre>"},{"location":"pythonlab/examples/#resulting-workflow_1","title":"Resulting Workflow","text":"<pre><code>graph LR\n    SamplePlate[\"SamplePlate&lt;br/&gt;(labware, origin=Hotel_1, pos=1)\"]\n    SamplePlate --&gt; move1[\"move to Incubator_37C&lt;br/&gt;(duration=20s)\"]\n    move1 --&gt; incubate[\"incubate&lt;br/&gt;(duration=7200s, temp=310K, shaking=200rpm)\"]\n    incubate --&gt; move2[\"move to PlateReader&lt;br/&gt;(duration=20s, lidded=False)\"]\n    move2 --&gt; read[\"single_read&lt;br/&gt;(duration=30s, wavelength=600nm)\"]\n    read --&gt; absorbance[\"absorbance&lt;br/&gt;(variable)\"]\n    absorbance --&gt; move3[\"move to Hotel_1&lt;br/&gt;(duration=20s, lidded=True)\"]\n    move3 --&gt; store[\"store&lt;br/&gt;(duration=10s, position=1)\"]</code></pre>  Hold \"Alt\" / \"Option\" to enable pan &amp; zoom"},{"location":"pythonlab/examples/#key-concepts_1","title":"Key Concepts","text":"<ul> <li>Movement operations: Use MoverServiceResource to move between devices</li> <li>Lid management: Track whether labware is lidded during operations</li> <li>Starting position: Plate begins in storage</li> <li>Linear workflow: No branching, just sequential operations</li> </ul>"},{"location":"pythonlab/examples/#runtime-decision-process","title":"Runtime Decision Process","text":"<p>Demonstrates runtime conditional branching based on measurements.</p>"},{"location":"pythonlab/examples/#code_2","title":"Code","text":"<pre><code>from pythonlab.process import PLProcess\nfrom pythonlab.resource import LabwareResource\nfrom pythonlab.resources.services.incubation import IncubatorServiceResource\nfrom pythonlab.resources.services.moving import MoverServiceResource\nfrom pythonlab.resources.services.analysis import PlateReaderServiceResource\nfrom pythonlab.resources.services.labware_storage import LabwareStorageResource\nfrom random import random\n\n\nclass RuntimeDecisionProcess(PLProcess):\n    \"\"\"\n    Demonstrates runtime decision-making:\n    - Incubate sample\n    - Measure absorbance\n    - If OD &lt; 0.6, continue incubation\n    - Return to storage\n    \"\"\"\n\n    def create_resources(self):\n        # Create services\n        self.storage = LabwareStorageResource(proc=self, name=\"LabwareStorage_200\")\n        self.incubator = IncubatorServiceResource(proc=self, name=\"Incubator1\")\n        self.mover = MoverServiceResource(proc=self, name=\"MoverPool\")\n        self.reader = PlateReaderServiceResource(proc=self, name=\"ReaderPool\")\n\n        # Create labware\n        self.labwares = [\n            LabwareResource(proc=self, name=f\"cont_{i}\", lidded=True)\n            for i in range(2)\n        ]\n\n    def init_service_resources(self):\n        super().init_service_resources()\n\n        # Set starting positions\n        for cont in self.labwares:\n            cont.set_start_position(\n                self.storage,\n                self.storage.next_free_position\n            )\n\n    def average(self, absorbance_data):\n        \"\"\"\n        Compute average absorbance.\n\n        In real execution, this would process measurement data.\n        During parsing, this creates a computation node.\n        \"\"\"\n        return sum(absorbance_data) / len(absorbance_data)\n\n    def process(self):\n        cont1 = self.labwares[0]\n        incubation_duration = 80  # Short duration for demo\n\n        # Move to incubator\n        self.mover.move(cont1, target_loc=self.incubator, lidded=True)\n\n        # Initial incubation\n        self.incubator.incubate(\n            cont1,\n            duration=incubation_duration,\n            temperature=310\n        )\n\n        # Move to reader for measurement\n        self.mover.move(cont1, target_loc=self.reader, lidded=False)\n\n        # Measure absorbance (runtime variable)\n        absorb = self.reader.single_read(\n            cont1,\n            method='211001_single_well_600'\n        )\n\n        # Compute average (computation node)\n        avg_abs = self.average(absorb)\n\n        # RUNTIME DECISION: based on measurement result\n        if avg_abs &lt; 0.6:\n            # Low density - need more incubation\n            self.mover.move(cont1, target_loc=self.incubator, lidded=True)\n            self.incubator.incubate(\n                cont1,\n                duration=incubation_duration,\n                temperature=310\n            )\n\n        # If branch continues here automatically\n\n        # Return to storage\n        self.mover.move(cont1, target_loc=self.storage, lidded=True)\n        self.storage.store(cont1)\n</code></pre>"},{"location":"pythonlab/examples/#resulting-workflow_2","title":"Resulting Workflow","text":"<pre><code>graph LR\n    cont_0[\"cont_0&lt;br/&gt;(labware)\"]\n    cont_0 --&gt; move1[move to Incubator1]\n    move1 --&gt; incubate1[\"incubate&lt;br/&gt;(80s)\"]\n    incubate1 --&gt; move2[move to ReaderPool]\n    move2 --&gt; read[single_read]\n    read --&gt; absorb[\"absorb&lt;br/&gt;(variable)\"]\n    absorb --&gt; compute[\"compute avg\"]\n    compute --&gt; avg_abs[\"avg_abs&lt;br/&gt;(computation)\"]\n    avg_abs --&gt; if_node{\"if avg_abs &lt; 0.6&lt;br/&gt;(if_node)\"}\n    if_node --&gt;|True| move3[move to Incubator1]\n    if_node --&gt;|False| merge[merge point]\n    move3 --&gt; incubate2[\"incubate&lt;br/&gt;(80s)\"]\n    incubate2 --&gt; merge\n    merge --&gt; move4[move to LabwareStorage_200]\n    move4 --&gt; store[store]</code></pre>  Hold \"Alt\" / \"Option\" to enable pan &amp; zoom"},{"location":"pythonlab/examples/#key-concepts_2","title":"Key Concepts","text":"<ul> <li>Runtime variable: <code>absorb</code> from measurement</li> <li>Computation: <code>avg_abs</code> derived from runtime variable</li> <li>If-node: Decision point with both branches in graph</li> <li>Optional branch: True branch adds extra incubation</li> <li>Convergence: Both branches merge before final storage</li> </ul>"},{"location":"pythonlab/examples/#running-the-example_1","title":"Running the Example","text":"<pre><code>simulator = PLProcessReader.parse_process(RuntimeDecisionProcess())\n\n# Find the if-node\nif_nodes = [\n    (nid, data) for nid, data in simulator.workflow.nodes(data=True)\n    if data['type'] == 'if_node'\n]\n\nprint(f\"If-nodes: {len(if_nodes)}\")  # 1 if-node\nprint(f\"Condition: {if_nodes[0][1]['name']}\")  # \"if avg_abs &lt; 0.6\"\n</code></pre>"},{"location":"pythonlab/examples/#growth-and-centrifugation-process","title":"Growth and Centrifugation Process","text":"<p>Source: <code>tests/test_data/growth_centrifugation_process.py</code></p> <p>Complex process with loops, multiple devices, and parallel operations.</p>"},{"location":"pythonlab/examples/#code_3","title":"Code","text":"<pre><code>from pythonlab.process import PLProcess\nfrom pythonlab.resource import LabwareResource\nfrom pythonlab.resources.services.incubation import IncubatorServiceResource\nfrom pythonlab.resources.services.moving import MoverServiceResource\nfrom pythonlab.resources.services.analysis import PlateReaderServiceResource\nfrom pythonlab.resources.services.centrifugation import CentrifugeServiceResource\nfrom pythonlab.resources.services.labware_storage import LabwareStorageResource\n\n\nclass GrowthCentrifugationProcess(PLProcess):\n    \"\"\"\n    Complex bioprocess demonstrating:\n    - Multiple samples (4 plates)\n    - Barcode scanning\n    - Different incubation times\n    - Centrifugation of multiple plates\n    - Multiple measurement points\n    \"\"\"\n\n    def create_resources(self):\n        # Create services\n        self.storage = LabwareStorageResource(proc=self, name=\"LabwareStorage_200\")\n        self.incubator = IncubatorServiceResource(proc=self, name=\"Incubator1\")\n        self.mover = MoverServiceResource(proc=self, name=\"MoverArm\")\n        self.reader = PlateReaderServiceResource(proc=self, name=\"MTPSpectroPhotometer\")\n        self.centrifuge = CentrifugeServiceResource(proc=self, name=\"Centrifuge\")\n\n        # Create 4 experimental plates\n        self.labwares = [\n            LabwareResource(\n                proc=self,\n                name=f\"expr_cont_{i}\",\n                lidded=True,\n                filled=False\n            )\n            for i in range(4)\n        ]\n\n    def init_service_resources(self):\n        super().init_service_resources()\n\n        # All plates start in storage\n        for cont in self.labwares:\n            cont.set_start_position(\n                self.storage,\n                self.storage.next_free_position\n            )\n\n    def process(self):\n        # Step 1: Scan all barcodes\n        for cont in self.labwares:\n            self.mover.read_barcode(cont)\n\n        # Step 2: Move all plates to incubator\n        for cont in self.labwares:\n            self.mover.move(cont, target_loc=self.incubator, lidded=True)\n\n        # Step 3: Different incubation protocols for different plates\n        cont1, cont2, cont3, cont4 = self.labwares\n\n        # First two plates: 30 minute incubation\n        self.incubator.incubate(cont1, duration=1800, temperature=310)\n        self.incubator.incubate(cont2, duration=1800, temperature=310)\n\n        # Measure first plate\n        self.mover.move(cont1, target_loc=self.reader, lidded=False)\n        self.reader.single_read(\n            cont1,\n            wavelengths=[600, 660],\n            method='multi_wavelength_protocol'\n        )\n\n        # Last two plates: 1 hour incubation\n        self.incubator.incubate(cont3, duration=3600, temperature=310)\n        self.incubator.incubate(cont4, duration=3600, temperature=310)\n\n        # Step 4: Centrifuge all plates together\n        self.centrifuge.centrifuge(\n            labwares=self.labwares,\n            duration=1200,   # 20 minutes\n            rpm=50           # Low speed\n        )\n\n        # Step 5: Final measurements for all plates\n        for cont in self.labwares:\n            self.mover.move(cont, target_loc=self.reader, lidded=False)\n            self.reader.single_read(\n                cont,\n                wavelengths=[600, 660],\n                method='final_measurement'\n            )\n\n        # Step 6: Return all to storage\n        for cont in self.labwares:\n            self.mover.move(cont, target_loc=self.storage, lidded=True)\n            self.storage.store(cont)\n</code></pre>"},{"location":"pythonlab/examples/#workflow-highlights","title":"Workflow Highlights","text":"<pre><code>graph LR\n    storage[\"4 plates in storage\"]\n    storage --&gt; barcode[\"barcode scanning loop&lt;br/&gt;(4 operations)\"]\n    barcode --&gt; move_all[\"move all to incubator&lt;br/&gt;(4 operations)\"]\n    move_all --&gt; incubate0[\"incubate cont_0&lt;br/&gt;(1800s)\"]\n    move_all --&gt; incubate1[\"incubate cont_1&lt;br/&gt;(1800s)\"]\n    move_all --&gt; incubate2[\"incubate cont_2&lt;br/&gt;(3600s)\"]\n    move_all --&gt; incubate3[\"incubate cont_3&lt;br/&gt;(3600s)\"]\n    incubate0 --&gt; move_reader[\"move to reader\"]\n    move_reader --&gt; measure0[\"measure cont_0\"]\n    incubate1 --&gt; centrifuge\n    incubate2 --&gt; centrifuge\n    incubate3 --&gt; centrifuge\n    measure0 --&gt; centrifuge[\"centrifuge ALL plates&lt;br/&gt;(1200s, rpm=50)\"]\n    centrifuge --&gt; measure_loop[\"measurement loop&lt;br/&gt;for all plates\"]\n    measure_loop --&gt; return[\"return all to storage\"]</code></pre>  Hold \"Alt\" / \"Option\" to enable pan &amp; zoom"},{"location":"pythonlab/examples/#key-concepts_3","title":"Key Concepts","text":"<ul> <li>Loop unrolling: For loops create separate nodes for each iteration</li> <li>Multiple labware: Some operations involve multiple containers</li> <li>Parallel operations: Some steps can potentially run in parallel</li> <li>Centrifuge: Single operation on multiple containers</li> <li>Different protocols: Different incubation times for different samples</li> </ul>"},{"location":"pythonlab/examples/#complex-multi-decision-process","title":"Complex Multi-Decision Process","text":"<p>A more advanced example with multiple runtime decision points.</p>"},{"location":"pythonlab/examples/#code_4","title":"Code","text":"<pre><code>from pythonlab.process import PLProcess\nfrom pythonlab.resource import LabwareResource\nfrom pythonlab.resources.services.incubation import IncubatorServiceResource\nfrom pythonlab.resources.services.moving import MoverServiceResource\nfrom pythonlab.resources.services.analysis import PlateReaderServiceResource\nfrom pythonlab.resources.services.labware_storage import LabwareStorageResource\n\n\nclass ComplexDecisionProcess(PLProcess):\n    \"\"\"\n    Advanced process with multiple decision points:\n    - Screen multiple samples\n    - Make different decisions for each based on measurements\n    - Hierarchical decisions (if-elif-else pattern)\n    \"\"\"\n\n    def create_resources(self):\n        # Services\n        self.storage = LabwareStorageResource(proc=self, name=\"Storage\")\n        self.mover = MoverServiceResource(proc=self, name=\"Mover\")\n        self.incubator = IncubatorServiceResource(proc=self, name=\"Incubator\")\n        self.reader = PlateReaderServiceResource(proc=self, name=\"Reader\")\n\n        # Multiple sample plates\n        self.plates = [\n            LabwareResource(proc=self, name=f\"Sample_{i}\", lidded=True)\n            for i in range(3)\n        ]\n\n    def init_service_resources(self):\n        super().init_service_resources()\n\n        for plate in self.plates:\n            plate.set_start_position(\n                self.storage,\n                self.storage.next_free_position\n            )\n\n    def calculate_density(self, absorbance):\n        \"\"\"Convert absorbance to cell density.\"\"\"\n        return absorbance * 1.2  # Simplified conversion\n\n    def calculate_ratio(self, abs1, abs2):\n        \"\"\"Calculate ratio of two absorbances.\"\"\"\n        return abs1 / abs2\n\n    def process(self):\n        # Process each plate with runtime decisions\n        for plate in self.plates:\n            # Initial growth phase\n            self.mover.move(plate, target_loc=self.incubator)\n            self.incubator.incubate(plate, duration=3600, temperature=310)\n\n            # Initial measurement\n            self.mover.move(plate, target_loc=self.reader, lidded=False)\n            abs_600 = self.reader.single_read(plate, wavelengths=[600])\n            density = self.calculate_density(abs_600)\n\n            # HIERARCHICAL DECISION TREE\n            if density &lt; 0.3:\n                # Low density - long incubation\n                self.mover.move(plate, target_loc=self.incubator, lidded=True)\n                self.incubator.incubate(plate, duration=7200, temperature=310)\n\n            elif density &lt; 0.7:\n                # Medium density - short incubation\n                self.mover.move(plate, target_loc=self.incubator, lidded=True)\n                self.incubator.incubate(plate, duration=3600, temperature=310)\n\n            else:\n                # High density - measure at multiple wavelengths\n                abs_660 = self.reader.single_read(plate, wavelengths=[660])\n                ratio = self.calculate_ratio(abs_600, abs_660)\n\n                # NESTED DECISION\n                if ratio &gt; 1.5:\n                    # High ratio - additional processing\n                    self.mover.move(plate, target_loc=self.incubator, lidded=True)\n                    self.incubator.incubate(plate, duration=1800, temperature=315)\n\n            # Final measurement (all branches converge here)\n            self.mover.move(plate, target_loc=self.reader, lidded=False)\n            final_abs = self.reader.single_read(plate, wavelengths=[600, 660])\n\n            # Return to storage\n            self.mover.move(plate, target_loc=self.storage, lidded=True)\n            self.storage.store(plate)\n</code></pre>"},{"location":"pythonlab/examples/#workflow-structure","title":"Workflow Structure","text":"<pre><code>graph LR\n    start[\"For each plate\"]\n    start --&gt; incubate1[\"incubate&lt;br/&gt;(3600s)\"]\n    incubate1 --&gt; measure600[\"measure 600nm\"]\n    measure600 --&gt; abs_600[\"abs_600&lt;br/&gt;(variable)\"]\n    abs_600 --&gt; calc_density[\"calculate density\"]\n    calc_density --&gt; density[\"density&lt;br/&gt;(computation)\"]\n    density --&gt; if1{\"if density &lt; 0.3\"}\n    if1 --&gt;|True| incubate_long[\"incubate&lt;br/&gt;(7200s)\"]\n    if1 --&gt;|False| if2{\"if density &lt; 0.7\"}\n    if2 --&gt;|True| incubate_med[\"incubate&lt;br/&gt;(3600s)\"]\n    if2 --&gt;|False| measure660[\"measure 660nm\"]\n    measure660 --&gt; abs_660[\"abs_660&lt;br/&gt;(variable)\"]\n    abs_660 --&gt; calc_ratio[\"calculate ratio\"]\n    calc_ratio --&gt; ratio[\"ratio&lt;br/&gt;(computation)\"]\n    ratio --&gt; if3{\"if ratio &gt; 1.5\"}\n    if3 --&gt;|True| incubate_short[\"incubate&lt;br/&gt;(1800s)\"]\n    if3 --&gt;|False| merge\n    incubate_long --&gt; merge[merge point]\n    incubate_med --&gt; merge\n    incubate_short --&gt; merge\n    merge --&gt; final_measure[\"final measurement\"]\n    final_measure --&gt; storage[storage]</code></pre>  Hold \"Alt\" / \"Option\" to enable pan &amp; zoom"},{"location":"pythonlab/examples/#key-concepts_4","title":"Key Concepts","text":"<ul> <li>Loop with decisions: Each iteration has runtime branching</li> <li>If-elif-else: Multiple exclusive branches</li> <li>Nested decisions: Decision within a branch</li> <li>Multiple measurements: Different wavelengths based on conditions</li> <li>Convergence: All branches merge before final measurement</li> </ul>"},{"location":"pythonlab/examples/#running-examples","title":"Running Examples","text":""},{"location":"pythonlab/examples/#parse-and-analyze","title":"Parse and Analyze","text":"<pre><code>from pythonlab.pythonlab_reader import PLProcessReader\n\n# Parse any of the examples\nsimulator = PLProcessReader.parse_process(GrowthCentrifugationProcess())\n\n# Get statistics\nprint(f\"Total nodes: {simulator.workflow.number_of_nodes()}\")\nprint(f\"Total edges: {simulator.workflow.number_of_edges()}\")\n\n# Count node types\nfrom collections import Counter\nnode_types = Counter(\n    data['type'] for _, data in simulator.workflow.nodes(data=True)\n)\nprint(f\"Node type counts: {dict(node_types)}\")\n\n# Find operations\noperations = [\n    data['name'] for _, data in simulator.workflow.nodes(data=True)\n    if data['type'] == 'operation'\n]\nprint(f\"Operations: {operations}\")\n</code></pre>"},{"location":"pythonlab/examples/#visualize","title":"Visualize","text":"<pre><code># Built-in visualization\nsimulator.visualize_workflow_graph(show=True)\n</code></pre>"},{"location":"pythonlab/examples/#export-graph","title":"Export Graph","text":"<pre><code>import networkx as nx\n\n# Export to GraphML (for Cytoscape, yEd, etc.)\nnx.write_graphml(simulator.workflow, \"workflow.graphml\")\n\n# Export to JSON\nimport json\nfrom networkx.readwrite import json_graph\n\ngraph_json = json_graph.node_link_data(simulator.workflow)\nwith open(\"workflow.json\", \"w\") as f:\n    json.dump(graph_json, f, indent=2)\n\n# Export to DOT (for Graphviz)\nnx.drawing.nx_pydot.write_dot(simulator.workflow, \"workflow.dot\")\n</code></pre>"},{"location":"pythonlab/examples/#calculate-critical-path","title":"Calculate Critical Path","text":"<pre><code>import networkx as nx\n\n# Ensure all nodes have duration\nfor node in simulator.workflow.nodes():\n    if 'duration' not in simulator.workflow.nodes[node]:\n        simulator.workflow.nodes[node]['duration'] = 0\n\n# Find longest path (critical path)\ntry:\n    critical_path = nx.dag_longest_path(\n        simulator.workflow,\n        weight='duration'\n    )\n\n    # Calculate total time\n    total_time = sum(\n        simulator.workflow.nodes[n].get('duration', 0)\n        for n in critical_path\n    )\n\n    print(f\"Critical path: {critical_path}\")\n    print(f\"Minimum execution time: {total_time} seconds\")\n    print(f\"                     = {total_time / 60:.1f} minutes\")\n    print(f\"                     = {total_time / 3600:.2f} hours\")\n\nexcept nx.NetworkXException as e:\n    print(f\"Error calculating critical path: {e}\")\n</code></pre>"},{"location":"pythonlab/processes_quickstart/","title":"Quick Start Guide: Writing Processes","text":"<p>This is a condensed quick-start guide. For detailed information, see writing_processes.</p>"},{"location":"pythonlab/processes_quickstart/#the-3-required-methods","title":"The 3 Required Methods","text":"<p>Every PLProcess must implement:</p> <pre><code>from pythonlab.process import PLProcess\n\nclass YourProcess(PLProcess):\n\n    def create_resources(self):\n        \"\"\"Create all devices and labware\"\"\"\n        # Create ServiceResources (devices)\n        # Create LabwareResources (containers)\n        # Resources auto-register with the process\n\n    def init_service_resources(self):\n        \"\"\"Initialize devices and set starting positions\"\"\"\n        super().init_service_resources()  # Always call this!\n        # Set labware starting positions\n\n    def process(self):\n        \"\"\"Define the workflow\"\"\"\n        # Call methods on ServiceResources\n        # This gets parsed into a workflow graph\n</code></pre>"},{"location":"pythonlab/processes_quickstart/#minimal-complete-example","title":"Minimal Complete Example","text":"<pre><code>from pythonlab.process import PLProcess\nfrom pythonlab.resource import ServiceResource, LabwareResource\nfrom pythonlab.pythonlab_reader import PLProcessReader\n\n\n# 1. Define a custom service (device)\nclass MyIncubator(ServiceResource):\n    def incubate(self, labware, duration, temperature, **kwargs):\n        kwargs.update(dict(\n            fct='incubate',           # REQUIRED: operation name\n            duration=duration,         # REQUIRED: time in seconds\n            temperature=temperature    # Include all parameters\n        ))\n        self.proc.add_process_step(self, [labware], **kwargs)\n\n\n# 2. Define your process\nclass SimpleProcess(PLProcess):\n\n    def create_resources(self):\n        # Create device\n        self.incubator = MyIncubator(proc=self, name=\"Incubator1\")\n        # Create labware\n        self.plate = LabwareResource(proc=self, name=\"Plate1\")\n\n    def init_service_resources(self):\n        super().init_service_resources()  # Don't forget this!\n\n    def process(self):\n        # Define workflow\n        self.incubator.incubate(\n            self.plate,\n            duration=3600,    # 1 hour\n            temperature=310   # 37\u00b0C in Kelvin\n        )\n\n\n# 3. Parse and use\nsimulator = PLProcessReader.parse_process(SimpleProcess())\nsimulator.visualize_workflow_graph()\nprint(f\"Nodes: {simulator.workflow.number_of_nodes()}\")\n</code></pre>"},{"location":"pythonlab/processes_quickstart/#serviceresource-pattern","title":"ServiceResource Pattern","text":"<p>When creating device operations:</p> <pre><code>class MyDevice(ServiceResource):\n    def my_operation(self, labware: LabwareResource, param1, **kwargs):\n        # 1. Update kwargs with metadata\n        kwargs.update(dict(\n            fct='my_operation',      # Operation name (REQUIRED)\n            duration=60,             # Duration in seconds (REQUIRED)\n            param1=param1            # Include all parameters\n        ))\n\n        # 2. Call add_process_step\n        self.proc.add_process_step(\n            self,                    # The device\n            [labware],               # List of containers\n            **kwargs\n        )\n\n        # 3. Optional: return for runtime variable\n        # If this operation produces data that will be used in\n        # decisions, add a return statement here\n</code></pre>"},{"location":"pythonlab/processes_quickstart/#runtime-variables-and-decisions","title":"Runtime Variables and Decisions","text":""},{"location":"pythonlab/processes_quickstart/#creating-runtime-variables","title":"Creating Runtime Variables","text":"<p>Variables from device operations are \"runtime variables\":</p> <pre><code>def process(self):\n    # This creates a runtime variable\n    measurement = self.reader.measure(self.plate, wavelengths=[600])\n\n    # Computations using runtime variables create computation nodes\n    avg = self.calculate_average(measurement)\n\n    # Decisions using runtime variables create if-nodes\n    if avg &gt; 0.6:\n        # Both branches will be in the graph\n        self.mover.move(self.plate, target_loc=self.storage)\n    else:\n        self.incubator.incubate(self.plate, duration=3600, temperature=310)\n</code></pre>"},{"location":"pythonlab/processes_quickstart/#compile-time-vs-runtime","title":"Compile-Time vs Runtime","text":"<pre><code># COMPILE-TIME (evaluated during parsing)\nplate_count = 3\nif plate_count &gt; 2:\n    # Only this branch will be in graph\n    self.process_three_plates()\n\n# RUNTIME (both branches in graph)\nmeasurement = self.reader.measure(plate)\nif measurement &gt; 0.6:\n    # Both branches will be in graph\n    self.continue_growth()\nelse:\n    self.harvest()\n</code></pre>"},{"location":"pythonlab/processes_quickstart/#control-flow","title":"Control Flow","text":""},{"location":"pythonlab/processes_quickstart/#for-loops-unrolled-during-parsing","title":"For Loops (Unrolled During Parsing)","text":"<pre><code># Valid - known list\nfor plate in self.plates:\n    self.incubator.incubate(plate, duration=3600, temperature=310)\n\n# Valid - known range\nfor i in range(5):\n    self.process_plate(self.plates[i])\n\n# INVALID - runtime variable\ncount = self.counter.count_samples()\nfor i in range(count):  # ERROR: Can't iterate over runtime variable\n    self.process_sample(i)\n</code></pre>"},{"location":"pythonlab/processes_quickstart/#if-elif-else","title":"If-Elif-Else","text":"<pre><code># Compile-time\nif self.plate_type == \"96-well\":\n    volume = 200\nelif self.plate_type == \"384-well\":\n    volume = 50\n\n# Runtime\nmeasurement = self.reader.measure(plate)\nif measurement &lt; 0.3:\n    self.incubate_long()\nelif measurement &lt; 0.7:\n    self.incubate_short()\nelse:\n    self.harvest()\n</code></pre>"},{"location":"pythonlab/processes_quickstart/#common-patterns","title":"Common Patterns","text":""},{"location":"pythonlab/processes_quickstart/#movement-between-devices","title":"Movement Between Devices","text":"<pre><code>from pythonlab.resources.services.moving import MoverServiceResource\n\ndef create_resources(self):\n    self.mover = MoverServiceResource(proc=self, name=\"RobotArm\")\n    self.incubator = IncubatorServiceResource(proc=self, name=\"Incubator\")\n    self.reader = PlateReaderServiceResource(proc=self, name=\"Reader\")\n    self.plate = LabwareResource(proc=self, name=\"Plate1\", lidded=True)\n\ndef process(self):\n    # Move to incubator (with lid)\n    self.mover.move(self.plate, target_loc=self.incubator, lidded=True)\n\n    # Incubate\n    self.incubator.incubate(self.plate, duration=3600, temperature=310)\n\n    # Move to reader (remove lid)\n    self.mover.move(self.plate, target_loc=self.reader, lidded=False)\n\n    # Measure\n    self.reader.single_read(self.plate, wavelengths=[600])\n</code></pre>"},{"location":"pythonlab/processes_quickstart/#setting-starting-positions","title":"Setting Starting Positions","text":"<pre><code>def init_service_resources(self):\n    super().init_service_resources()  # Always call first!\n\n    # Set where labware starts\n    self.plate.set_start_position(self.storage, position=1)\n\n    # Or use auto-incrementing positions\n    for plate in self.plates:\n        plate.set_start_position(\n            self.storage,\n            self.storage.next_free_position\n        )\n</code></pre>"},{"location":"pythonlab/processes_quickstart/#multiple-labware-operations","title":"Multiple Labware Operations","text":"<pre><code>from pythonlab.resources.services.centrifugation import CentrifugeServiceResource\n\ndef create_resources(self):\n    self.centrifuge = CentrifugeServiceResource(proc=self, name=\"Centrifuge\")\n    self.plates = [LabwareResource(proc=self, name=f\"Plate_{i}\")\n                   for i in range(3)]\n\ndef process(self):\n    # Centrifuge multiple plates together\n    self.centrifuge.centrifuge(\n        labwares=self.plates,      # List of labware\n        duration=600,\n        rpm=4000\n    )\n</code></pre>"},{"location":"pythonlab/processes_quickstart/#barcode-scanning","title":"Barcode Scanning","text":"<pre><code>def process(self):\n    # Scan all plates\n    for plate in self.plates:\n        self.mover.read_barcode(plate)\n</code></pre>"},{"location":"pythonlab/processes_quickstart/#built-in-services-quick-reference","title":"Built-in Services Quick Reference","text":"<pre><code>from pythonlab.resources.services.incubation import IncubatorServiceResource\nfrom pythonlab.resources.services.moving import MoverServiceResource\nfrom pythonlab.resources.services.analysis import PlateReaderServiceResource\nfrom pythonlab.resources.services.centrifugation import CentrifugeServiceResource\nfrom pythonlab.resources.services.labware_storage import LabwareStorageResource\n\n# Incubator\nself.incubator.incubate(plate, duration=3600, temperature=310, shaking_frequency=200)\n\n# Mover\nself.mover.move(plate, target_loc=self.incubator, lidded=True)\nself.mover.read_barcode(plate)\n\n# Plate Reader\nabs_data = self.reader.single_read(plate, wavelengths=[600, 660])\nkinetic = self.reader.run_kinetic(plate, wavelength=600, interval=60, reads=10)\n\n# Centrifuge\nself.centrifuge.centrifuge(labwares=[plate1, plate2], duration=600, rpm=4000)\n\n# Storage\nself.storage.store(plate, position=5)\nself.storage.eject(plate)\n</code></pre> <p>See builtin_services.md for complete reference.</p>"},{"location":"pythonlab/processes_quickstart/#common-mistakes-to-avoid","title":"Common Mistakes to Avoid","text":""},{"location":"pythonlab/processes_quickstart/#1-forgetting-super-in-init_service_resources","title":"1. Forgetting super() in init_service_resources()","text":"<pre><code># WRONG\ndef init_service_resources(self):\n    self.plate.set_start_position(self.storage, position=1)\n\n# CORRECT\ndef init_service_resources(self):\n    super().init_service_resources()  # Always call this!\n    self.plate.set_start_position(self.storage, position=1)\n</code></pre>"},{"location":"pythonlab/processes_quickstart/#2-missing-fct-or-duration-in-serviceresource","title":"2. Missing 'fct' or 'duration' in ServiceResource","text":"<pre><code># WRONG\ndef my_operation(self, labware, **kwargs):\n    self.proc.add_process_step(self, [labware], **kwargs)\n\n# CORRECT\ndef my_operation(self, labware, **kwargs):\n    kwargs.update(dict(\n        fct='my_operation',\n        duration=60\n    ))\n    self.proc.add_process_step(self, [labware], **kwargs)\n</code></pre>"},{"location":"pythonlab/processes_quickstart/#3-creating-resources-in-process","title":"3. Creating Resources in process()","text":"<pre><code># WRONG\ndef process(self):\n    new_plate = LabwareResource(proc=self, name=\"New\")  # Don't do this!\n\n# CORRECT\ndef create_resources(self):\n    self.all_plates = [...]  # Create all resources here\n\ndef process(self):\n    for plate in self.all_plates:  # Just use them\n        ...\n</code></pre>"},{"location":"pythonlab/processes_quickstart/#4-forgetting-to-pass-labware-as-list","title":"4. Forgetting to Pass Labware as List","text":"<pre><code># WRONG\nself.proc.add_process_step(self, labware, **kwargs)\n\n# CORRECT\nself.proc.add_process_step(self, [labware], **kwargs)\n</code></pre>"},{"location":"pythonlab/processes_quickstart/#parsing-and-using","title":"Parsing and Using","text":"<pre><code>from pythonlab.pythonlab_reader import PLProcessReader\n\n# Parse from instance\nsimulator = PLProcessReader.parse_process(MyProcess())\n\n# Parse from file\nsimulator = PLProcessReader.parse_process_from_file_path(\"my_process.py\")\n\n# Parse from source code string\nwith open(\"my_process.py\") as f:\n    source = f.read()\nsimulator = PLProcessReader.parse_process_from_source_code(source)\n\n# Visualize\nsimulator.visualize_workflow_graph()\n\n# Access graph\ngraph = simulator.workflow  # NetworkX DiGraph\n\n# Get nodes\nfor node_id, data in graph.nodes(data=True):\n    print(f\"{node_id}: {data['type']} - {data['name']}\")\n\n# Get edges\nfor source, target, data in graph.edges(data=True):\n    print(f\"{source} -&gt; {target}\")\n</code></pre>"},{"location":"pythonlab/processes_quickstart/#next-steps","title":"Next Steps","text":"<ol> <li>Try the minimal example above</li> <li>Read complete examples in examples.md</li> <li>Study the detailed guide in writing_processes.md</li> <li>Explore built-in services in builtin_services.md</li> <li>Understand workflow graphs in workflow_graph.md</li> </ol>"},{"location":"pythonlab/processes_quickstart/#complete-template","title":"Complete Template","text":"<p>Copy and adapt this template:</p> <pre><code>from pythonlab.process import PLProcess\nfrom pythonlab.resource import ServiceResource, LabwareResource\nfrom pythonlab.pythonlab_reader import PLProcessReader\n\n\nclass MyCustomService(ServiceResource):\n    \"\"\"Your custom device.\"\"\"\n\n    def my_operation(self, labware: LabwareResource, param1, **kwargs):\n        kwargs.update(dict(\n            fct='my_operation',\n            duration=60,\n            param1=param1\n        ))\n        self.proc.add_process_step(self, [labware], **kwargs)\n\n\nclass MyProcess(PLProcess):\n    \"\"\"Your process description.\"\"\"\n\n    def create_resources(self):\n        # Create devices\n        self.device = MyCustomService(proc=self, name=\"Device1\")\n\n        # Create labware\n        self.labware = LabwareResource(proc=self, name=\"Container1\")\n\n    def init_service_resources(self):\n        super().init_service_resources()\n\n        # Set starting positions\n        self.labware.set_start_position(self.device, position=0)\n\n    def process(self):\n        # Define workflow\n        self.device.my_operation(self.labware, param1=100)\n\n\n# Parse and use\nif __name__ == \"__main__\":\n    simulator = PLProcessReader.parse_process(MyProcess())\n    simulator.visualize_workflow_graph()\n    print(f\"Workflow has {simulator.workflow.number_of_nodes()} nodes\")\n</code></pre>"},{"location":"pythonlab/processes_quickstart/#help-and-documentation","title":"Help and Documentation","text":"<ul> <li>Full Documentation Index</li> <li>Detailed Guide</li> <li>Examples</li> <li>Built-in Services</li> <li>Workflow Graph</li> <li>Main README</li> </ul>"},{"location":"pythonlab/workflow_graph/","title":"Workflow Graph Structure","text":"<p>This document explains the structure of the workflow graph created by <code>PLProcessReader</code>.</p>"},{"location":"pythonlab/workflow_graph/#overview","title":"Overview","text":"<p>The workflow graph is a NetworkX DiGraph (directed graph) that represents the laboratory process as a directed acyclic graph (DAG). Each node represents an operation, labware, variable, or decision point, and edges represent dependencies and data flow.</p>"},{"location":"pythonlab/workflow_graph/#graph-structure","title":"Graph Structure","text":"<pre><code>simulator = PLProcessReader.parse_process(MyProcess())\nworkflow_graph = simulator.workflow  # nx.DiGraph instance\n</code></pre>"},{"location":"pythonlab/workflow_graph/#node-types","title":"Node Types","text":"<p>The workflow graph contains several types of nodes:</p>"},{"location":"pythonlab/workflow_graph/#1-labware-nodes","title":"1. Labware Nodes","text":"<p>Represent starting points for containers in the workflow.</p> <pre><code>{\n    'type': 'labware',\n    'name': 'SamplePlate_1',\n    'origin_pos': 5,                    # Starting position\n    'origin': 'LabwareStorage_1',       # Starting location name\n    'origin_type': &lt;class&gt;,              # ServiceResource class\n    'lidded': True,                     # Whether container has lid\n    'plate_type': '96-well',            # Custom metadata\n    # ... additional kwargs from LabwareResource\n}\n</code></pre> <p>Properties: - Created for each <code>LabwareResource</code> with a starting position - Serve as entry points in the graph - No incoming edges - Outgoing edges to first operations involving this labware</p>"},{"location":"pythonlab/workflow_graph/#2-operation-nodes","title":"2. Operation Nodes","text":"<p>Represent laboratory operations (incubation, measurement, movement, etc.).</p> <pre><code>{\n    'type': 'operation',\n    'name': 'incubate SamplePlate_1',\n    'cont_names': ['SamplePlate_1'],    # Labware involved\n    'device_type': &lt;class&gt;,              # ServiceResource class\n    'fct': 'incubate',                  # Function/operation name\n    'duration': 3600,                    # Time to execute (seconds)\n    'temperature': 310,                  # Operation-specific parameters\n    'shaking_frequency': 0,\n    'executor': [&lt;service_instance&gt;],   # Device(s) that can execute\n    'wait_to_start_costs': 0,           # Cost per second of waiting\n    # ... additional kwargs from add_process_step()\n}\n</code></pre> <p>Properties: - Created when ServiceResource methods are called - Always include <code>fct</code> and <code>duration</code> - <code>cont_names</code> lists all labware participating - Incoming edges from previous operations on same labware - Outgoing edges to next operations on same labware</p> <p>Special Case: Movement Operations <pre><code>{\n    'type': 'operation',\n    'name': 'move SamplePlate_1',\n    'fct': 'move',\n    'is_movement': True,                 # Flag for movement operations\n    'target': 'Incubator_1',            # Target location\n    'lidded': True,                     # Lid state during move\n    # ...\n}\n</code></pre></p>"},{"location":"pythonlab/workflow_graph/#3-variable-nodes","title":"3. Variable Nodes","text":"<p>Represent runtime outputs from operations.</p> <pre><code>{\n    'type': 'variable',\n    'name': 'measurement_result',\n    'var_name': 'measurement_result'\n}\n</code></pre> <p>Properties: - Created when a ServiceResource method returns a value - Represent data that is only known at execution time - Incoming edges from the operation that produces them - Outgoing edges to computations or decisions that use them</p> <p>Example: <pre><code># In process():\nabsorbance = self.reader.measure_absorbance(plate, wavelengths=[600])\n# Creates a variable node with name 'absorbance'\n</code></pre></p>"},{"location":"pythonlab/workflow_graph/#4-computation-nodes","title":"4. Computation Nodes","text":"<p>Represent derived values computed from runtime variables.</p> <pre><code>{\n    'type': 'computation',\n    'name': 'average_calculation',\n    'var_name': 'avg_abs',\n    'function': &lt;callable&gt;               # Python function to execute\n}\n</code></pre> <p>Properties: - Created when computations use runtime variables - <code>function</code> is a Python callable that performs the computation - Incoming edges from variable/computation nodes used in calculation - Outgoing edges to operations or decisions that use the result</p> <p>Example: <pre><code># In process():\nabsorbance = self.reader.measure_absorbance(plate, wavelengths=[600])\navg = self.calculate_average(absorbance)\n# Creates computation node with function=calculate_average\n</code></pre></p>"},{"location":"pythonlab/workflow_graph/#5-if-decision-nodes","title":"5. If-Decision Nodes","text":"<p>Represent runtime conditional branches.</p> <pre><code>{\n    'type': 'if_node',\n    'name': 'if avg_abs &gt; 0.6',\n    'function': &lt;callable&gt;,              # Decision function (returns bool)\n    'true_dummy': 15,                    # Node ID of true branch entry\n    'false_dummy': 16,                   # Node ID of false branch entry\n}\n</code></pre> <p>Properties: - Created when if-statements depend on runtime variables - <code>function</code> evaluates the condition at runtime - <code>true_dummy</code> and <code>false_dummy</code> point to dummy nodes (later contracted) - Both branches are included in the graph - Scheduler/executor decides which branch to take</p> <p>Example: <pre><code># In process():\nmeasurement = self.reader.measure_absorbance(plate, wavelengths=[600])\navg = self.calculate_average(measurement)\n\nif avg &gt; 0.6:\n    # True branch\n    self.mover.move(plate, target_loc=self.storage)\nelse:\n    # False branch\n    self.incubator.incubate(plate, duration=3600, temperature=310)\n\n# Creates if_node with both branches\n</code></pre></p>"},{"location":"pythonlab/workflow_graph/#6-dummy-nodes","title":"6. Dummy Nodes","text":"<p>Temporary nodes used during parsing for control flow. These are removed from the final graph.</p> <pre><code>{\n    'type': 'dummy',\n    'name': 'true_dummy',               # or 'false_dummy' or 'break_dummy'\n    'cur_state': {...},                 # State snapshot (for break nodes)\n    'if_nodes': []                      # List of if_nodes (for break tracking)\n}\n</code></pre> <p>Properties: - Used internally during graph construction - Mark branch entry points and convergence points - Contracted away by <code>contract_dummys()</code> before graph is returned - Final graph should contain no dummy nodes</p>"},{"location":"pythonlab/workflow_graph/#edge-structure","title":"Edge Structure","text":"<p>Edges connect nodes and represent dependencies and data flow.</p>"},{"location":"pythonlab/workflow_graph/#edge-attributes","title":"Edge Attributes","text":"<pre><code>{\n    'cont_name': 'SamplePlate_1',       # Labware connecting the operations\n    'label': '',                         # Optional step label\n    'wait_cost': 0,                     # Cost per second for waiting\n    'max_wait': float('inf'),           # Maximum time before next step\n    'min_wait': None,                   # Minimum time before next step\n    'sub_tree': True,                   # True/False for if-node branches\n}\n</code></pre>"},{"location":"pythonlab/workflow_graph/#types-of-edges","title":"Types of Edges","text":"<ol> <li>Sequential Operation Edges</li> <li>Connect operations that share labware</li> <li> <p>Represent temporal dependencies    <pre><code># operation_A -&gt; operation_B\n# (same labware, must execute in order)\n</code></pre></p> </li> <li> <p>Variable Dependency Edges</p> </li> <li>Connect operations to variable nodes they produce</li> <li> <p>Connect variables to computations that use them    <pre><code># operation -&gt; variable\n# variable -&gt; computation\n# computation -&gt; if_node\n</code></pre></p> </li> <li> <p>Control Flow Edges</p> </li> <li>Connect if_nodes to branch dummies</li> <li> <p>Marked with <code>sub_tree=True</code> or <code>sub_tree=False</code> <pre><code># if_node -&gt; true_dummy (sub_tree=True)\n# if_node -&gt; false_dummy (sub_tree=False)\n</code></pre></p> </li> <li> <p>Labware Initialization Edges</p> </li> <li>Connect labware nodes to first operations    <pre><code># labware_node -&gt; first_operation\n</code></pre></li> </ol>"},{"location":"pythonlab/workflow_graph/#graph-properties","title":"Graph Properties","text":""},{"location":"pythonlab/workflow_graph/#directed-acyclic-graph-dag","title":"Directed Acyclic Graph (DAG)","text":"<p>The workflow graph is a DAG: - Directed: Edges have direction (A \u2192 B means A must happen before B) - Acyclic: No cycles (no infinite loops)</p> <p>This property allows: - Topological sorting (valid execution order) - Critical path analysis (longest path = minimum time) - Parallel execution identification (independent branches)</p>"},{"location":"pythonlab/workflow_graph/#multiple-roots","title":"Multiple Roots","text":"<p>The graph may have multiple root nodes: - Labware nodes (one per starting container) - Variable nodes for data inputs</p>"},{"location":"pythonlab/workflow_graph/#multiple-leaves","title":"Multiple Leaves","text":"<p>The graph may have multiple leaf nodes: - Final operations - Variable nodes for data outputs</p>"},{"location":"pythonlab/workflow_graph/#accessing-graph-data","title":"Accessing Graph Data","text":""},{"location":"pythonlab/workflow_graph/#iterating-over-nodes","title":"Iterating Over Nodes","text":"<pre><code># All nodes\nfor node_id, node_data in simulator.workflow.nodes(data=True):\n    print(f\"Node {node_id}: {node_data['type']} - {node_data['name']}\")\n\n# Filter by type\noperation_nodes = [\n    (nid, data) for nid, data in simulator.workflow.nodes(data=True)\n    if data['type'] == 'operation'\n]\n\n# Get specific node\nnode_data = simulator.workflow.nodes[node_id]\nprint(f\"Duration: {node_data.get('duration', 'N/A')}\")\n</code></pre>"},{"location":"pythonlab/workflow_graph/#iterating-over-edges","title":"Iterating Over Edges","text":"<pre><code># All edges\nfor source, target, edge_data in simulator.workflow.edges(data=True):\n    print(f\"{source} -&gt; {target}: {edge_data['cont_name']}\")\n\n# Filter by labware\nplate1_edges = [\n    (s, t, data) for s, t, data in simulator.workflow.edges(data=True)\n    if data['cont_name'] == 'SamplePlate_1'\n]\n\n# Get specific edge\nedge_data = simulator.workflow.edges[source_id, target_id]\nprint(f\"Max wait: {edge_data['max_wait']}\")\n</code></pre>"},{"location":"pythonlab/workflow_graph/#graph-analysis","title":"Graph Analysis","text":"<pre><code>import networkx as nx\n\n# Check if graph is DAG\nassert nx.is_directed_acyclic_graph(simulator.workflow)\n\n# Topological sort (valid execution order)\nexecution_order = list(nx.topological_sort(simulator.workflow))\n\n# Critical path (longest path by duration)\n# First, create weight attribute for operations\nfor node_id, node_data in simulator.workflow.nodes(data=True):\n    simulator.workflow.nodes[node_id]['weight'] = node_data.get('duration', 0)\n\ncritical_path = nx.dag_longest_path(simulator.workflow, weight='weight')\ntotal_time = sum(\n    simulator.workflow.nodes[n].get('duration', 0)\n    for n in critical_path\n)\nprint(f\"Minimum process time: {total_time} seconds ({total_time/60:.1f} minutes)\")\n\n# Find all paths between two nodes\nall_paths = list(nx.all_simple_paths(\n    simulator.workflow,\n    source=start_node,\n    target=end_node\n))\n\n# Identify parallel branches (nodes with no path between them)\nfor node1 in operation_nodes:\n    for node2 in operation_nodes:\n        if node1 != node2:\n            has_path = nx.has_path(simulator.workflow, node1, node2)\n            if not has_path and not nx.has_path(simulator.workflow, node2, node1):\n                print(f\"{node1} and {node2} can execute in parallel\")\n</code></pre>"},{"location":"pythonlab/workflow_graph/#visualization","title":"Visualization","text":""},{"location":"pythonlab/workflow_graph/#built-in-visualization","title":"Built-in Visualization","text":"<pre><code># Generate and display graphviz visualization\nsimulator.visualize_workflow_graph(show=True)\n\n# Save to file\nsimulator.visualize_workflow_graph(show=False)\n# Saves to 'workflow_graph.png' or similar\n</code></pre>"},{"location":"pythonlab/workflow_graph/#custom-visualization-with-networkx","title":"Custom Visualization with NetworkX","text":"<pre><code>import matplotlib.pyplot as plt\nimport networkx as nx\n\n# Basic plot\npos = nx.spring_layout(simulator.workflow)\nnx.draw(simulator.workflow, pos, with_labels=True, node_color='lightblue')\nplt.show()\n\n# Color-coded by node type\nnode_colors = {\n    'labware': 'lightgreen',\n    'operation': 'lightblue',\n    'variable': 'yellow',\n    'computation': 'orange',\n    'if_node': 'red'\n}\n\ncolors = [\n    node_colors.get(data['type'], 'gray')\n    for _, data in simulator.workflow.nodes(data=True)\n]\n\npos = nx.spring_layout(simulator.workflow)\nnx.draw(simulator.workflow, pos, node_color=colors, with_labels=True)\nplt.show()\n</code></pre>"},{"location":"pythonlab/workflow_graph/#graphviz-visualization","title":"Graphviz Visualization","text":"<pre><code>import pygraphviz as pgv\n\n# Create graphviz graph\nG = pgv.AGraph(directed=True)\n\nfor node_id, node_data in simulator.workflow.nodes(data=True):\n    label = f\"{node_data['name']}\\n{node_data['type']}\"\n    G.add_node(node_id, label=label, shape='box')\n\nfor source, target, edge_data in simulator.workflow.edges(data=True):\n    label = edge_data.get('cont_name', '')\n    G.add_edge(source, target, label=label)\n\nG.layout(prog='dot')\nG.draw('workflow.png')\n</code></pre>"},{"location":"pythonlab/workflow_graph/#example-graph-walkthrough","title":"Example Graph Walkthrough","text":"<p>Consider this simple process:</p> <pre><code>class SimpleProcess(PLProcess):\n    def create_resources(self):\n        self.incubator = IncubatorService(proc=self, name=\"Inc1\")\n        self.reader = ReaderService(proc=self, name=\"Reader1\")\n        self.mover = MoverService(proc=self, name=\"Mover1\")\n        self.plate = LabwareResource(proc=self, name=\"Plate1\", lidded=True)\n\n    def init_service_resources(self):\n        super().init_service_resources()\n        self.plate.set_start_position(self.incubator, position=1)\n\n    def process(self):\n        self.incubator.incubate(self.plate, duration=3600, temperature=310)\n        self.mover.move(self.plate, target_loc=self.reader, lidded=False)\n        abs_value = self.reader.measure(self.plate, wavelengths=[600])\n        avg = self.average(abs_value)\n\n        if avg &gt; 0.6:\n            self.mover.move(self.plate, target_loc=self.storage)\n        else:\n            self.incubator.incubate(self.plate, duration=1800, temperature=310)\n</code></pre> <p>Resulting Graph:</p> <pre><code>Nodes:\n[0] type=labware, name=\"Plate1\", origin=\"Inc1\", origin_pos=1\n[1] type=operation, name=\"incubate Plate1\", fct=\"incubate\", duration=3600, temperature=310\n[2] type=operation, name=\"move Plate1\", fct=\"move\", duration=20, target=\"Reader1\"\n[3] type=operation, name=\"measure Plate1\", fct=\"measure\", duration=30, wavelengths=[600]\n[4] type=variable, name=\"abs_value\"\n[5] type=computation, name=\"average\", var_name=\"avg\", function=&lt;average&gt;\n[6] type=if_node, name=\"if avg &gt; 0.6\", function=&lt;lambda&gt;\n[7] type=operation, name=\"move Plate1\" (to storage), fct=\"move\", duration=20\n[8] type=operation, name=\"incubate Plate1\", fct=\"incubate\", duration=1800, temperature=310\n\nEdges:\n[0] -&gt; [1]: cont_name=\"Plate1\" (labware to first operation)\n[1] -&gt; [2]: cont_name=\"Plate1\" (incubate to move)\n[2] -&gt; [3]: cont_name=\"Plate1\" (move to measure)\n[3] -&gt; [4]: (operation produces variable)\n[4] -&gt; [5]: (variable used in computation)\n[5] -&gt; [6]: (computation used in decision)\n[6] -&gt; [7]: sub_tree=True (if true, move to storage)\n[6] -&gt; [8]: sub_tree=False (if false, continue incubation)\n</code></pre> <p>Visualization:</p> <pre><code>      [Plate1]\n         \u2502\n         \u25bc\n    [incubate 3600s]\n         \u2502\n         \u25bc\n    [move to reader]\n         \u2502\n         \u25bc\n     [measure]\n         \u2502\n         \u25bc\n    [abs_value var]\n         \u2502\n         \u25bc\n    [compute avg]\n         \u2502\n         \u25bc\n   [if avg &gt; 0.6]\n      \u2571       \u2572\n   True      False\n    \u2571           \u2572\n[move to      [incubate\n storage]      1800s]\n</code></pre>"},{"location":"pythonlab/workflow_graph/#graph-metadata-usage","title":"Graph Metadata Usage","text":"<p>The workflow graph metadata is used by:</p> <ol> <li>Schedulers: Determine optimal execution order considering:</li> <li>Duration of each operation</li> <li>Wait costs and constraints (max_wait, min_wait)</li> <li>Device availability</li> <li> <p>Parallel execution opportunities</p> </li> <li> <p>Executors: Execute the workflow by:</p> </li> <li>Following topological order</li> <li>Evaluating if-node decisions at runtime</li> <li> <p>Invoking device operations with parameters</p> </li> <li> <p>Analyzers: Analyze the workflow for:</p> </li> <li>Total execution time (critical path)</li> <li>Resource utilization</li> <li>Bottlenecks</li> <li> <p>Optimization opportunities</p> </li> <li> <p>Visualizers: Display the workflow for:</p> </li> <li>Process understanding</li> <li>Validation</li> <li>Documentation</li> <li>Debugging</li> </ol>"},{"location":"pythonlab/workflow_graph/#summary","title":"Summary","text":"<p>The workflow graph is a rich data structure that: - Represents laboratory processes as DAGs - Contains multiple node types (labware, operations, variables, decisions) - Encodes dependencies, timing, and constraints in edges - Supports analysis, scheduling, execution, and visualization - Is generated automatically by parsing PLProcess definitions</p> <p>Understanding the graph structure enables advanced usage of PythonLab for process optimization, scheduling, and automation.</p>"},{"location":"pythonlab/writing_processes/","title":"Writing PLProcessReader-Compliant Processes","text":"<p>This guide provides comprehensive instructions for writing processes that comply with the <code>PLProcessReader</code> parsing system. A quickstart guide is available as well.</p>"},{"location":"pythonlab/writing_processes/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction</li> <li>The PLProcess Interface</li> <li>Step-by-Step Tutorial</li> <li>Service Resources</li> <li>Runtime Variables and Decisions</li> <li>Control Flow</li> <li>Best Practices</li> <li>Common Pitfalls</li> <li>Advanced Topics</li> </ol>"},{"location":"pythonlab/writing_processes/#introduction","title":"Introduction","text":"<p>A PLProcessReader-compliant process is a Python class that: 1. Inherits from <code>PLProcess</code> 2. Implements three required abstract methods 3. Describes a workflow that can be parsed into a graph 4. Follows specific patterns for control flow and variable management</p> <p>The <code>PLProcessReader</code> analyzes your process code and converts it into a workflow graph (NetworkX DiGraph) that represents the sequence of operations, dependencies, and decision points.</p>"},{"location":"pythonlab/writing_processes/#the-plprocess-interface","title":"The PLProcess Interface","text":""},{"location":"pythonlab/writing_processes/#required-abstract-methods","title":"Required Abstract Methods","text":"<p>Every PLProcess subclass must implement three methods:</p> <pre><code>from pythonlab.process import PLProcess\nfrom abc import abstractmethod\n\nclass YourProcess(PLProcess):\n\n    @abstractmethod\n    def create_resources(self):\n        \"\"\"\n        Create and initialize all resources used in the process.\n\n        This method is called during __init__. Resources automatically\n        register themselves with the process when instantiated.\n\n        You should create:\n        - ServiceResource instances (devices)\n        - LabwareResource instances (containers)\n        - SubstanceResource instances (chemicals/materials)\n        - DataResource instances (data inputs/outputs)\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def init_service_resources(self):\n        \"\"\"\n        Initialize service resources.\n\n        Called after create_resources(). Typically:\n        1. Call super().init_service_resources() to invoke init() on each service\n        2. Set starting positions for labware\n        3. Configure device-specific settings\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def process(self):\n        \"\"\"\n        Define the workflow.\n\n        This method body is parsed (NOT executed during parsing) by PLProcessReader.\n        Write it in imperative Python syntax describing the workflow steps.\n\n        Key points:\n        - Call methods on ServiceResource objects to add operations\n        - Use variables to capture outputs from devices\n        - Use control flow (if/for) to structure the workflow\n        - The parser will convert this into a workflow graph\n        \"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"pythonlab/writing_processes/#optional-overrides","title":"Optional Overrides","text":"<p>You can optionally override:</p> <pre><code>def add_process_step(self, service: ServiceResource,\n                    labware: List[LabwareResource],\n                    is_movement: bool = False, **kwargs):\n    \"\"\"\n    Called whenever a ServiceResource method is invoked.\n\n    During parsing, PLProcessSimulator.add_process_step() is called instead,\n    which builds the workflow graph.\n\n    In a non-parsed PLProcess, you could override this to track steps,\n    log operations, etc.\n    \"\"\"\n    pass\n\ndef set_starting_position(self, resource: LabwareResource,\n                         device: ServiceResource, position: int):\n    \"\"\"\n    Called when labware starting position is set.\n    Override to customize behavior.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"pythonlab/writing_processes/#step-by-step-tutorial","title":"Step-by-Step Tutorial","text":"<p>Let's build a complete process from scratch.</p>"},{"location":"pythonlab/writing_processes/#step-1-import-required-classes","title":"Step 1: Import Required Classes","text":"<pre><code>from pythonlab.process import PLProcess\nfrom pythonlab.resource import (\n    ServiceResource,\n    LabwareResource,\n    SubstanceResource,\n    DataResource,\n    DataDirection\n)\n</code></pre>"},{"location":"pythonlab/writing_processes/#step-2-create-custom-service-resources","title":"Step 2: Create Custom Service Resources","text":"<p>Services represent laboratory equipment. Each operation on a device is a method that calls <code>add_process_step()</code>.</p> <pre><code>class IncubatorService(ServiceResource):\n    \"\"\"Represents an incubator device.\"\"\"\n\n    def incubate(self, labware: LabwareResource, duration: int,\n                temperature: float, shaking_frequency: int = 0, **kwargs):\n        \"\"\"\n        Incubate labware at specified conditions.\n\n        Args:\n            labware: The container to incubate\n            duration: Time in seconds\n            temperature: Temperature in Kelvin\n            shaking_frequency: RPM for shaking (default 0)\n            **kwargs: Additional metadata\n        \"\"\"\n        # Update kwargs with operation metadata\n        kwargs.update(dict(\n            fct='incubate',              # Function name\n            duration=duration,            # Time to execute\n            temperature=temperature,      # Process parameter\n            shaking_frequency=shaking_frequency\n        ))\n        # Add this operation to the workflow\n        self.proc.add_process_step(self, [labware], **kwargs)\n\n\nclass PlateReaderService(ServiceResource):\n    \"\"\"Represents a microplate reader.\"\"\"\n\n    def measure_absorbance(self, labware: LabwareResource,\n                          wavelengths: list, **kwargs):\n        \"\"\"\n        Measure absorbance at specified wavelengths.\n\n        Args:\n            labware: Plate to read\n            wavelengths: List of wavelengths in nm\n            **kwargs: Additional metadata\n\n        Returns:\n            Variable representing measurement data (parsed as runtime variable)\n        \"\"\"\n        kwargs.update(dict(\n            fct='measure_absorbance',\n            duration=30,                  # Assume 30 seconds to read\n            wavelengths=wavelengths\n        ))\n        self.proc.add_process_step(self, [labware], **kwargs)\n\n\nclass MoverService(ServiceResource):\n    \"\"\"Represents a robotic arm or moving system.\"\"\"\n\n    def move(self, labware: LabwareResource, target_loc: ServiceResource,\n            lidded: bool = True, **kwargs):\n        \"\"\"\n        Move labware to a target location.\n\n        Args:\n            labware: Container to move\n            target_loc: Target ServiceResource (device location)\n            lidded: Whether labware should have lid during move\n            **kwargs: Additional metadata\n        \"\"\"\n        kwargs.update(dict(\n            fct='move',\n            duration=20,                  # Assume 20 seconds to move\n            target=target_loc.name,\n            lidded=lidded\n        ))\n        self.proc.add_process_step(self, [labware], is_movement=True, **kwargs)\n</code></pre> <p>Key Pattern for ServiceResource Methods: 1. Accept labware and operation parameters 2. Update <code>kwargs</code> with operation metadata (fct name, duration, parameters) 3. Call <code>self.proc.add_process_step(self, [labware], **kwargs)</code></p>"},{"location":"pythonlab/writing_processes/#step-3-define-your-process-class","title":"Step 3: Define Your Process Class","text":"<pre><code>class MyBioProcess(PLProcess):\n    \"\"\"\n    Example bioprocess: incubate samples, measure absorbance,\n    make decisions based on results.\n    \"\"\"\n\n    def __init__(self, priority=10):\n        \"\"\"\n        Initialize the process.\n\n        Args:\n            priority: Process priority (0 = highest)\n        \"\"\"\n        super().__init__(priority=priority)\n</code></pre>"},{"location":"pythonlab/writing_processes/#step-4-implement-create_resources","title":"Step 4: Implement create_resources()","text":"<pre><code>    def create_resources(self):\n        \"\"\"Create all resources needed for this process.\"\"\"\n\n        # Create service resources (devices)\n        self.incubator = IncubatorService(proc=self, name=\"Incubator_1\")\n        self.reader = PlateReaderService(proc=self, name=\"PlateReader_1\")\n        self.mover = MoverService(proc=self, name=\"RobotArm_1\")\n\n        # Create labware resources (containers)\n        self.sample_plates = [\n            LabwareResource(\n                proc=self,\n                name=f\"SamplePlate_{i}\",\n                lidded=True,              # Has a lid\n                plate_type=\"96-well\"      # Additional metadata\n            )\n            for i in range(3)             # 3 plates\n        ]\n\n        # Create substance resources (optional)\n        self.growth_media = SubstanceResource(\n            proc=self,\n            name=\"LB_Media\",\n            volume_ml=100\n        )\n\n        # Create data resources (optional)\n        self.measurement_output = DataResource(\n            proc=self,\n            name=\"AbsorbanceData\",\n            direction=DataDirection.data_out\n        )\n</code></pre> <p>Important: Resources auto-register with the process during <code>__init__</code>, so just creating them is sufficient.</p>"},{"location":"pythonlab/writing_processes/#step-5-implement-init_service_resources","title":"Step 5: Implement init_service_resources()","text":"<pre><code>    def init_service_resources(self):\n        \"\"\"Initialize services and set starting positions.\"\"\"\n\n        # Always call super to invoke init() on all services\n        super().init_service_resources()\n\n        # Set starting positions for labware\n        for i, plate in enumerate(self.sample_plates):\n            # Plates start at the mover location at positions 1, 2, 3\n            plate.set_start_position(self.mover, position=i+1)\n</code></pre>"},{"location":"pythonlab/writing_processes/#step-6-implement-process","title":"Step 6: Implement process()","text":"<p>This is where you describe the workflow.</p> <pre><code>    def process(self):\n        \"\"\"Define the workflow.\"\"\"\n\n        # Get references to plates for readability\n        plate1, plate2, plate3 = self.sample_plates\n\n        # Step 1: Move all plates to incubator\n        for plate in self.sample_plates:\n            self.mover.move(plate, target_loc=self.incubator, lidded=True)\n\n        # Step 2: Incubate first batch\n        self.incubator.incubate(plate1, duration=3600, temperature=310)\n        self.incubator.incubate(plate2, duration=3600, temperature=310)\n\n        # Step 3: Move first plate to reader\n        self.mover.move(plate1, target_loc=self.reader, lidded=False)\n\n        # Step 4: Measure absorbance (returns runtime variable)\n        absorbance = self.reader.measure_absorbance(\n            plate1,\n            wavelengths=[600, 660]\n        )\n\n        # Step 5: Make runtime decision based on measurement\n        avg_abs = self.compute_average(absorbance)\n\n        if avg_abs &lt; 0.5:\n            # Low density - continue incubation\n            self.mover.move(plate1, target_loc=self.incubator, lidded=True)\n            self.incubator.incubate(plate1, duration=1800, temperature=310)\n        else:\n            # High density - proceed to next step\n            self.mover.move(plate1, target_loc=self.reader, lidded=False)\n\n        # Step 6: Process remaining plates\n        for plate in [plate2, plate3]:\n            self.mover.move(plate, target_loc=self.reader, lidded=False)\n            self.reader.measure_absorbance(plate, wavelengths=[600, 660])\n\n    def compute_average(self, data):\n        \"\"\"\n        Helper function for computing average.\n\n        Since this uses a runtime variable (data), it will be parsed\n        as a computation node in the workflow graph.\n        \"\"\"\n        # In real execution, this would process the data\n        # During parsing, this creates a computation node\n        pass\n</code></pre>"},{"location":"pythonlab/writing_processes/#step-7-parse-and-visualize","title":"Step 7: Parse and Visualize","text":"<pre><code>from pythonlab.pythonlab_reader import PLProcessReader\n\n# Parse the process\nsimulator = PLProcessReader.parse_process(MyBioProcess())\n\n# Visualize the workflow graph\nsimulator.visualize_workflow_graph()\n\n# Access the graph\nprint(f\"Number of nodes: {simulator.workflow.number_of_nodes()}\")\nprint(f\"Number of edges: {simulator.workflow.number_of_edges()}\")\n\n# Inspect nodes\nfor node_id, node_data in simulator.workflow.nodes(data=True):\n    print(f\"Node {node_id}: {node_data['type']} - {node_data['name']}\")\n\n# Inspect edges\nfor source, target, edge_data in simulator.workflow.edges(data=True):\n    print(f\"Edge {source} -&gt; {target}: {edge_data}\")\n</code></pre>"},{"location":"pythonlab/writing_processes/#service-resources","title":"Service Resources","text":""},{"location":"pythonlab/writing_processes/#anatomy-of-a-service-method","title":"Anatomy of a Service Method","text":"<pre><code>def operation_name(self, labware: LabwareResource,\n                  param1, param2, **kwargs):\n    \"\"\"\n    Template for service method.\n\n    Args:\n        labware: Container(s) involved in operation\n        param1, param2: Operation-specific parameters\n        **kwargs: Additional metadata\n\n    Returns:\n        Optional: Variable representing output (for runtime variables)\n    \"\"\"\n    # 1. Update kwargs with operation metadata\n    kwargs.update(dict(\n        fct='operation_name',      # REQUIRED: Function name\n        duration=60,                # REQUIRED: Duration in seconds\n        param1=param1,              # Include all parameters\n        param2=param2\n    ))\n\n    # 2. Call add_process_step\n    self.proc.add_process_step(\n        self,                       # The service performing the operation\n        [labware],                  # List of labware involved\n        is_movement=False,          # True only for movement operations\n        **kwargs                    # Operation metadata\n    )\n\n    # 3. Optionally return (creates runtime variable)\n    # If this method returns, the parser treats it as a runtime variable\n</code></pre>"},{"location":"pythonlab/writing_processes/#required-metadata-in-kwargs","title":"Required Metadata in kwargs","text":"<ul> <li>fct (str): Function/operation name</li> <li>duration (int): Time to execute in seconds</li> </ul>"},{"location":"pythonlab/writing_processes/#optional-metadata","title":"Optional Metadata","text":"<ul> <li>executor (list): List of specific devices that can execute this (if multiple available)</li> <li>wait_to_start_costs (float): Cost per second of waiting before starting</li> <li>Any operation-specific parameters: temperature, rpm, wavelengths, etc.</li> </ul>"},{"location":"pythonlab/writing_processes/#multiple-labware-example","title":"Multiple Labware Example","text":"<p>Some operations involve multiple containers:</p> <pre><code>class CentrifugeService(ServiceResource):\n    def centrifuge(self, labwares: list, duration: int, rpm: int, **kwargs):\n        \"\"\"\n        Centrifuge multiple containers simultaneously.\n\n        Args:\n            labwares: List of LabwareResource objects\n            duration: Centrifugation time in seconds\n            rpm: Revolutions per minute\n        \"\"\"\n        kwargs.update(dict(\n            fct='centrifuge',\n            duration=duration,\n            rpm=rpm\n        ))\n        # Pass list of all labware involved\n        self.proc.add_process_step(self, labwares, **kwargs)\n\n# Usage in process():\nself.centrifuge.centrifuge(\n    labwares=[plate1, plate2, plate3],\n    duration=600,\n    rpm=4000\n)\n</code></pre>"},{"location":"pythonlab/writing_processes/#runtime-variables-and-decisions","title":"Runtime Variables and Decisions","text":""},{"location":"pythonlab/writing_processes/#what-are-runtime-variables","title":"What are Runtime Variables?","text":"<p>Runtime variables are values that are only known during process execution (not during parsing). They come from: 1. Device measurements (e.g., absorbance readings) 2. Sensor outputs 3. User inputs during execution 4. Computations based on other runtime variables</p>"},{"location":"pythonlab/writing_processes/#creating-runtime-variables","title":"Creating Runtime Variables","text":"<p>A variable becomes \"runtime\" when it's assigned from a ServiceResource method call:</p> <pre><code># Runtime variable - value from device\nmeasurement = self.reader.measure_absorbance(plate, wavelengths=[600])\n\n# Runtime variable - value from sensor\ntemperature = self.sensor.read_temperature(device)\n\n# Compile-time variable - value known during parsing\nstatic_value = 100\nloop_count = 5\n</code></pre>"},{"location":"pythonlab/writing_processes/#computations-on-runtime-variables","title":"Computations on Runtime Variables","text":"<p>When you compute a value based on runtime variables, the parser creates a computation node:</p> <pre><code># measurement is runtime variable\nmeasurement = self.reader.measure_absorbance(plate, wavelengths=[600])\n\n# avg is derived from runtime variable -&gt; becomes computation node\navg = self.calculate_average(measurement)\n\n# ratio is derived from runtime variable -&gt; becomes computation node\nratio = avg / 0.6\n\n# decision uses runtime variable -&gt; creates if_node with both branches\nif avg &gt; 0.5:\n    # True branch\n    self.mover.move(plate, target_loc=self.storage)\nelse:\n    # False branch\n    self.mover.move(plate, target_loc=self.incubator)\n</code></pre>"},{"location":"pythonlab/writing_processes/#runtime-decisions-if-statements","title":"Runtime Decisions (if-statements)","text":"<p>The parser distinguishes between compile-time and runtime conditionals:</p>"},{"location":"pythonlab/writing_processes/#compile-time-conditionals","title":"Compile-Time Conditionals","text":"<p>Condition can be evaluated during parsing:</p> <pre><code>plate_count = 3  # Known during parsing\n\nif plate_count &gt; 2:\n    # Only this branch will be in the workflow graph\n    self.incubator.incubate(plate3, duration=3600, temperature=310)\nelse:\n    # This branch will NOT be in the graph\n    pass\n</code></pre> <p>Result: Parser evaluates the condition, includes only the true branch.</p>"},{"location":"pythonlab/writing_processes/#runtime-conditionals","title":"Runtime Conditionals","text":"<p>Condition depends on runtime variables:</p> <pre><code># measurement is runtime variable\nmeasurement = self.reader.measure_absorbance(plate, wavelengths=[600])\navg = self.calculate_average(measurement)\n\nif avg &gt; 0.6:\n    # True branch - included in graph\n    self.mover.move(plate, target_loc=self.storage)\nelse:\n    # False branch - also included in graph\n    self.mover.move(plate, target_loc=self.incubator)\n</code></pre> <p>Result: Parser creates an if_node with: - A decision function (evaluating <code>avg &gt; 0.6</code>) - A true branch (dummy node \u2192 move to storage) - A false branch (dummy node \u2192 move to incubator)</p> <p>Both branches are present in the graph. The scheduler/executor will decide which branch to take during execution.</p>"},{"location":"pythonlab/writing_processes/#workflow-graph-structure-for-runtime-decisions","title":"Workflow Graph Structure for Runtime Decisions","text":"<pre><code>        [measurement operation]\n                 \u2502\n                 \u25bc\n        [computation: avg]\n                 \u2502\n                 \u25bc\n          [if_node: avg &gt; 0.6]\n            \u2571            \u2572\n           \u2571              \u2572\n    [true_dummy]      [false_dummy]\n          \u2502                 \u2502\n          \u25bc                 \u25bc\n    [move to storage]  [move to incubator]\n          \u2502                 \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                   \u25bc\n            [convergence point]\n</code></pre>"},{"location":"pythonlab/writing_processes/#control-flow","title":"Control Flow","text":""},{"location":"pythonlab/writing_processes/#for-loops","title":"For Loops","text":"<p>For loops are unrolled during parsing. The iterable must be known at compile time.</p>"},{"location":"pythonlab/writing_processes/#valid-for-loops","title":"Valid For Loops","text":"<pre><code># Iterate over known list of labware\nfor plate in self.sample_plates:\n    self.mover.move(plate, target_loc=self.incubator)\n    self.incubator.incubate(plate, duration=3600, temperature=310)\n\n# Iterate over range\nfor i in range(5):\n    self.reader.measure_absorbance(self.plates[i], wavelengths=[600])\n\n# Iterate over known values\nfor temperature in [300, 310, 320]:\n    self.incubator.incubate(plate, duration=1800, temperature=temperature)\n</code></pre> <p>Result: Parser unrolls the loop, creating separate nodes for each iteration.</p>"},{"location":"pythonlab/writing_processes/#invalid-for-loops","title":"Invalid For Loops","text":"<pre><code># INVALID - runtime_count is runtime variable\nruntime_count = self.counter.count_samples(plate)\nfor i in range(runtime_count):  # ERROR: Can't iterate over runtime variable\n    self.process_sample(i)\n</code></pre>"},{"location":"pythonlab/writing_processes/#break-statements","title":"Break Statements","text":"<p>You can use <code>break</code> to exit loops early:</p> <pre><code>for plate in self.sample_plates:\n    measurement = self.reader.measure_absorbance(plate, wavelengths=[600])\n    avg = self.calculate_average(measurement)\n\n    if avg &gt; threshold:\n        break  # Creates a break node\n\n    self.incubator.incubate(plate, duration=3600, temperature=310)\n</code></pre> <p>The parser creates a break node that connects to the loop exit point.</p>"},{"location":"pythonlab/writing_processes/#if-elif-else","title":"If-Elif-Else","text":"<pre><code># Compile-time if-elif-else\nif plate_type == \"96-well\":\n    volume = 200\nelif plate_type == \"384-well\":\n    volume = 50\nelse:\n    volume = 100\n\n# Runtime if-elif-else\nmeasurement = self.reader.measure_absorbance(plate, wavelengths=[600])\navg = self.calculate_average(measurement)\n\nif avg &lt; 0.3:\n    # Low density\n    self.incubator.incubate(plate, duration=7200, temperature=310)\nelif avg &lt; 0.7:\n    # Medium density\n    self.incubator.incubate(plate, duration=3600, temperature=310)\nelse:\n    # High density - no additional incubation\n    self.mover.move(plate, target_loc=self.storage)\n</code></pre>"},{"location":"pythonlab/writing_processes/#best-practices","title":"Best practices","text":""},{"location":"pythonlab/writing_processes/#1-set-starting-positions","title":"1. Set Starting Positions","text":"<p>Always set starting positions for labware to provide context:</p> <pre><code>def init_service_resources(self):\n    super().init_service_resources()\n\n    for i, plate in enumerate(self.sample_plates):\n        plate.set_start_position(self.storage, position=i+1)\n</code></pre>"},{"location":"pythonlab/writing_processes/#2-use-labware-constraints","title":"2. Use Labware Constraints","text":"<p>For time-sensitive operations:</p> <pre><code># Maximum 30 minutes between steps\nplate.max_wait(duration=1800)\n\n# Minimum 10 minutes before next step\nplate.min_wait(duration=600)\n\n# Cost per second of waiting (for scheduling optimization)\nplate.wait_cost(cost=0.1)\n</code></pre>"},{"location":"pythonlab/writing_processes/#advanced-topics","title":"Advanced Topics","text":""},{"location":"pythonlab/writing_processes/#dynamic-labware-resources","title":"Dynamic Labware Resources","text":"<p>For labware selected at runtime:</p> <pre><code>from pythonlab.resource import DynamicLabwareResource\n\ndef create_resources(self):\n    # Dynamic labware - usage order determined at runtime\n    self.reagent_trough = DynamicLabwareResource(\n        proc=self,\n        name=\"ReagentTrough\",\n        outside_cost=5  # Cost when not actively used (e.g., cooling cost)\n    )\n</code></pre>"},{"location":"pythonlab/writing_processes/#priority-management","title":"Priority Management","text":"<p>Control execution order:</p> <pre><code># High priority process (0 = highest)\ncritical_process = MyCriticalProcess(priority=0)\n\n# Normal priority\nnormal_process = MyNormalProcess(priority=10)\n\n# Low priority\nbackground_process = MyBackgroundProcess(priority=20)\n</code></pre>"},{"location":"pythonlab/writing_processes/#labware-with-priority","title":"Labware with Priority","text":"<pre><code># High priority sample\npriority_sample = LabwareResource(\n    proc=self,\n    name=\"UrgentSample\",\n    priority=0  # Process this first\n)\n\n# Normal priority\nnormal_sample = LabwareResource(\n    proc=self,\n    name=\"NormalSample\",\n    priority=None  # Default priority\n)\n</code></pre>"},{"location":"pythonlab/writing_processes/#process-order-preservation","title":"Process Order Preservation","text":"<p>If sample order must be maintained:</p> <pre><code>def __init__(self):\n    super().__init__()\n    self.preserve_order = True  # Samples processed in order\n</code></pre>"},{"location":"pythonlab/writing_processes/#data-resources","title":"Data Resources","text":"<p>Track data inputs and outputs:</p> <pre><code>from pythonlab.resource import DataResource, DataDirection, DataType\n\ndef create_resources(self):\n    # Input data\n    self.protocol_config = DataResource(\n        proc=self,\n        name=\"ProtocolConfig\",\n        direction=DataDirection.data_in,\n        data_type=DataType.structured_data\n    )\n\n    # Output data\n    self.measurement_results = DataResource(\n        proc=self,\n        name=\"Results\",\n        direction=DataDirection.data_out,\n        data_type=DataType.data_stream\n    )\n</code></pre>"},{"location":"pythonlab/writing_processes/#complex-graph-structures","title":"Complex Graph Structures","text":"<p>For advanced workflows with multiple decision points:</p> <pre><code>def process(self):\n    # Initial processing\n    for plate in self.sample_plates:\n        self.mover.move(plate, target_loc=self.incubator)\n        self.incubator.incubate(plate, duration=3600, temperature=310)\n\n    # Multiple runtime decision points\n    for plate in self.sample_plates:\n        measurement = self.reader.measure_absorbance(plate, wavelengths=[600])\n        density = self.calculate_density(measurement)\n\n        # Decision tree\n        if density &lt; 0.3:\n            # Low density - long incubation\n            self.incubator.incubate(plate, duration=7200, temperature=310)\n        elif density &lt; 0.7:\n            # Medium density - short incubation\n            self.incubator.incubate(plate, duration=3600, temperature=310)\n        else:\n            # High density - measure again\n            second_measurement = self.reader.measure_absorbance(\n                plate, wavelengths=[600, 660]\n            )\n            avg = self.calculate_average(second_measurement)\n\n            if avg &gt; 1.0:\n                # Very high - store immediately\n                self.mover.move(plate, target_loc=self.storage)\n            else:\n                # High - one more short incubation\n                self.incubator.incubate(plate, duration=1800, temperature=310)\n</code></pre>"},{"location":"pythonlab/writing_processes/#accessing-workflow-graph-details","title":"Accessing Workflow Graph Details","text":"<p>After parsing:</p> <pre><code>simulator = PLProcessReader.parse_process(MyProcess())\n\n# Get all operation nodes\noperation_nodes = [\n    (node_id, data)\n    for node_id, data in simulator.workflow.nodes(data=True)\n    if data['type'] == 'operation'\n]\n\n# Get all if-decision nodes\nif_nodes = [\n    (node_id, data)\n    for node_id, data in simulator.workflow.nodes(data=True)\n    if data['type'] == 'if_node'\n]\n\n# Get critical path (longest path through graph)\nimport networkx as nx\nlongest_path = nx.dag_longest_path(simulator.workflow, weight='duration')\n\n# Total process time (sum of longest path)\ntotal_time = sum(\n    simulator.workflow.nodes[node].get('duration', 0)\n    for node in longest_path\n)\nprint(f\"Minimum process time: {total_time} seconds\")\n</code></pre>"},{"location":"pythonlab/writing_processes/#summary","title":"Summary","text":"<p>To write a PLProcessReader-compliant process:</p> <ol> <li>Subclass PLProcess and implement three abstract methods</li> <li>Create ServiceResources with methods that call <code>add_process_step()</code></li> <li>Create all resources in <code>create_resources()</code></li> <li>Initialize services and set starting positions in <code>init_service_resources()</code></li> <li>Define workflow in <code>process()</code> using imperative syntax</li> <li>Use runtime variables for device outputs and measurements</li> <li>Use control flow (if/for) to structure the workflow</li> <li>Parse with PLProcessReader to generate the workflow graph</li> </ol> <p>The parser converts your Python code into a workflow graph that can be: - Visualized - Analyzed for timing and dependencies - Optimized by schedulers - Executed by automation systems</p> <p>For complete examples, see the Examples documentation.</p>"}]}